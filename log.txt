[2025-07-10T18:14:34Z INFO  cargo_ndk::cli] Using NDK at path: /home/saroj/Android/Sdk/ndk/android-ndk-r26d (ANDROID_NDK_HOME)
[2025-07-10T18:14:34Z INFO  cargo_ndk::cli] NDK API level: 21
[2025-07-10T18:14:34Z INFO  cargo_ndk::cli] Building targets: arm64-v8a
[2025-07-10T18:14:34Z INFO  cargo_ndk::cli] Building arm64-v8a (aarch64-linux-android)
       Fresh unicode-ident v1.0.12
       Fresh shlex v1.3.0
warning: unexpected `cfg` condition name: `manual_codegen_check`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shlex-1.3.0/src/bytes.rs:353:12
    |
353 | #[cfg_attr(manual_codegen_check, inline(never))]
    |            ^^^^^^^^^^^^^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(manual_codegen_check)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(manual_codegen_check)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

       Fresh autocfg v1.3.0
       Fresh cfg-if v1.0.0
warning: `shlex` (lib) generated 1 warning
       Fresh memchr v2.7.4
warning: struct `SensibleMoveMask` is never constructed
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.4/src/vector.rs:118:19
    |
118 | pub(crate) struct SensibleMoveMask(u32);
    |                   ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `get_for_offset` is never used
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.4/src/vector.rs:126:8
    |
120 | impl SensibleMoveMask {
    | --------------------- method in this implementation
...
126 |     fn get_for_offset(self) -> u32 {
    |        ^^^^^^^^^^^^^^

warning: `memchr` (lib) generated 2 warnings
       Fresh proc-macro2 v1.0.93
       Fresh jobserver v0.1.31
       Fresh libc v0.2.171
       Fresh quote v1.0.36
       Fresh cc v1.2.13
       Fresh version_check v0.9.4
       Fresh syn v2.0.98
       Fresh pkg-config v0.3.30
       Fresh log v0.4.22
       Fresh serde_derive v1.0.203
       Fresh thiserror-impl v1.0.61
       Fresh linux-raw-sys v0.4.14
       Fresh futures-macro v0.3.31
       Fresh tokio-macros v2.5.0
       Fresh serde v1.0.203
       Fresh home v0.5.9
       Fresh minimal-lexical v0.2.1
       Fresh rustix v0.38.34
warning: unexpected `cfg` condition name: `linux_raw`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:101:13
    |
101 | #![cfg_attr(linux_raw, deny(unsafe_code))]
    |             ^^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_raw)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_raw)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `rustc_attrs`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:102:13
    |
102 | #![cfg_attr(rustc_attrs, feature(rustc_attrs))]
    |             ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_attrs)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_attrs)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:103:13
    |
103 | #![cfg_attr(doc_cfg, feature(doc_cfg))]
    |             ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `wasi_ext`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:104:17
    |
104 | #![cfg_attr(all(wasi_ext, target_os = "wasi", feature = "std"), feature(wasi_ext))]
    |                 ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(wasi_ext)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(wasi_ext)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `core_ffi_c`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:105:13
    |
105 | #![cfg_attr(core_ffi_c, feature(core_ffi_c))]
    |             ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(core_ffi_c)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(core_ffi_c)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `core_c_str`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:106:13
    |
106 | #![cfg_attr(core_c_str, feature(core_c_str))]
    |             ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(core_c_str)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(core_c_str)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `alloc_c_string`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:107:36
    |
107 | #![cfg_attr(all(feature = "alloc", alloc_c_string), feature(alloc_c_string))]
    |                                    ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(alloc_c_string)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(alloc_c_string)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `alloc_ffi`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:108:36
    |
108 | #![cfg_attr(all(feature = "alloc", alloc_ffi), feature(alloc_ffi))]
    |                                    ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(alloc_ffi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(alloc_ffi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `core_intrinsics`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:113:39
    |
113 |     any(feature = "rustc-dep-of-std", core_intrinsics),
    |                                       ^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(core_intrinsics)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(core_intrinsics)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `asm_experimental_arch`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:116:13
    |
116 | #![cfg_attr(asm_experimental_arch, feature(asm_experimental_arch))]
    |             ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(asm_experimental_arch)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(asm_experimental_arch)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `static_assertions`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:134:17
    |
134 | #[cfg(all(test, static_assertions))]
    |                 ^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(static_assertions)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(static_assertions)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `static_assertions`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:138:21
    |
138 | #[cfg(all(test, not(static_assertions)))]
    |                     ^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(static_assertions)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(static_assertions)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_raw`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:166:9
    |
166 |     all(linux_raw, feature = "use-libc-auxv"),
    |         ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_raw)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_raw)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libc`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:167:9
    |
167 |     all(libc, not(any(windows, target_os = "espidf", target_os = "wasi")))
    |         ^^^^ help: found config with similar value: `feature = "libc"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libc)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libc)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_raw`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/weak.rs:9:13
  |
9 | #![cfg_attr(linux_raw, allow(unsafe_code))]
  |             ^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_raw)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_raw)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libc`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:173:12
    |
173 | #[cfg_attr(libc, path = "backend/libc/mod.rs")]
    |            ^^^^ help: found config with similar value: `feature = "libc"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libc)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libc)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_raw`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:174:12
    |
174 | #[cfg_attr(linux_raw, path = "backend/linux_raw/mod.rs")]
    |            ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_raw)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_raw)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `wasi`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:175:12
    |
175 | #[cfg_attr(wasi, path = "backend/wasi/mod.rs")]
    |            ^^^^ help: found config with similar value: `target_os = "wasi"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:202:12
    |
202 | #[cfg_attr(doc_cfg, doc(cfg(feature = "fs")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:205:7
    |
205 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:214:7
    |
214 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:229:5
    |
229 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:295:7
    |
295 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:346:9
    |
346 |     all(bsd, feature = "event"),
    |         ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:347:9
    |
347 |     all(linux_kernel, feature = "net")
    |         ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:354:57
    |
354 | #[cfg(any(feature = "process", feature = "runtime", all(bsd, feature = "event")))]
    |                                                         ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_raw`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:364:9
    |
364 |         linux_raw,
    |         ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_raw)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_raw)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_raw`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:383:9
    |
383 |         linux_raw,
    |         ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_raw)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_raw)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/lib.rs:393:9
    |
393 |     all(linux_kernel, feature = "net")
    |         ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_raw`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/weak.rs:118:7
    |
118 | #[cfg(linux_raw)]
    |       ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_raw)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_raw)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/weak.rs:146:11
    |
146 | #[cfg(not(linux_kernel))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/weak.rs:162:7
    |
162 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `thumb_mode`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/backend/linux_raw/arch/mod.rs:27:41
   |
27 | #[cfg_attr(all(target_arch = "arm", not(thumb_mode)), path = "arm.rs")]
   |                                         ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(thumb_mode)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(thumb_mode)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `thumb_mode`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/backend/linux_raw/arch/mod.rs:28:37
   |
28 | #[cfg_attr(all(target_arch = "arm", thumb_mode), path = "thumb.rs")]
   |                                     ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(thumb_mode)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(thumb_mode)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_attrs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/backend/linux_raw/io/errno.rs:11:17
   |
11 | #![cfg_attr(not(rustc_attrs), allow(unused_unsafe))]
   |                 ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_attrs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_attrs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_attrs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/backend/linux_raw/io/errno.rs:50:12
   |
50 | #[cfg_attr(rustc_attrs, rustc_layout_scalar_valid_range_start(0xf001))]
   |            ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_attrs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_attrs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_attrs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/backend/linux_raw/io/errno.rs:51:12
   |
51 | #[cfg_attr(rustc_attrs, rustc_layout_scalar_valid_range_end(0xffff))]
   |            ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_attrs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_attrs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `core_intrinsics`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/backend/linux_raw/io/errno.rs:191:15
    |
191 |         #[cfg(core_intrinsics)]
    |               ^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(core_intrinsics)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(core_intrinsics)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `core_intrinsics`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/backend/linux_raw/io/errno.rs:220:15
    |
220 |         #[cfg(core_intrinsics)]
    |               ^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(core_intrinsics)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(core_intrinsics)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:7:7
  |
7 | #[cfg(linux_kernel)]
  |       ^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:15:5
   |
15 |     apple,
   |     ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:16:5
   |
16 |     netbsdlike,
   |     ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:17:5
   |
17 |     solarish,
   |     ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:26:7
   |
26 | #[cfg(apple)]
   |       ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:28:7
   |
28 | #[cfg(apple)]
   |       ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:31:11
   |
31 | #[cfg(all(apple, feature = "alloc"))]
   |           ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:35:7
   |
35 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:45:11
   |
45 | #[cfg(any(linux_kernel, target_os = "freebsd"))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:47:7
   |
47 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:50:7
   |
50 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:52:7
   |
52 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:57:7
   |
57 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:66:11
   |
66 | #[cfg(any(apple, linux_kernel))]
   |           ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:66:18
   |
66 | #[cfg(any(apple, linux_kernel))]
   |                  ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:69:7
   |
69 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:75:7
   |
75 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:83:5
   |
83 |     apple,
   |     ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:84:5
   |
84 |     netbsdlike,
   |     ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:85:5
   |
85 |     solarish,
   |     ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:94:7
   |
94 | #[cfg(apple)]
   |       ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:96:7
   |
96 | #[cfg(apple)]
   |       ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:99:11
   |
99 | #[cfg(all(apple, feature = "alloc"))]
   |           ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:103:7
    |
103 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:113:11
    |
113 | #[cfg(any(linux_kernel, target_os = "freebsd"))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:115:7
    |
115 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:118:7
    |
118 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:120:7
    |
120 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:125:7
    |
125 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:134:11
    |
134 | #[cfg(any(apple, linux_kernel))]
    |           ^^^^^ help: found config with similar value: `target_vendor = "apple"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:134:18
    |
134 | #[cfg(any(apple, linux_kernel))]
    |                  ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `wasi_ext`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/mod.rs:142:11
    |
142 | #[cfg(all(wasi_ext, target_os = "wasi"))]
    |           ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(wasi_ext)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(wasi_ext)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/abs.rs:7:5
  |
7 |     solarish,
  |     ^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/abs.rs:256:5
    |
256 |     solarish,
    |     ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/at.rs:14:7
   |
14 | #[cfg(apple)]
   |       ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/at.rs:16:7
   |
16 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/at.rs:20:15
   |
20 | #[cfg(not(any(apple, target_os = "espidf", target_os = "vita", target_os = "wasi")))]
   |               ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/at.rs:274:7
    |
274 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/at.rs:415:7
    |
415 | #[cfg(apple)]
    |       ^^^^^ help: found config with similar value: `target_vendor = "apple"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/at.rs:436:15
    |
436 | #[cfg(not(any(apple, target_os = "espidf", target_os = "vita", target_os = "wasi")))]
    |               ^^^^^ help: found config with similar value: `target_vendor = "apple"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fcntl.rs:60:11
   |
60 | #[cfg(any(linux_kernel, target_os = "freebsd", target_os = "fuchsia"))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fcntl.rs:67:11
   |
67 | #[cfg(any(linux_kernel, target_os = "freebsd", target_os = "fuchsia"))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fcntl.rs:76:11
   |
76 | #[cfg(any(linux_kernel, target_os = "freebsd", target_os = "fuchsia"))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fd.rs:11:5
   |
11 |     netbsdlike,
   |     ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fd.rs:12:5
   |
12 |     solarish,
   |     ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fd.rs:27:7
   |
27 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fd.rs:31:5
   |
31 |     solarish,
   |     ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fd.rs:77:7
   |
77 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fd.rs:85:7
   |
85 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fd.rs:179:5
    |
179 |     solarish,
    |     ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fd.rs:243:5
    |
243 |     netbsdlike,
    |     ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fd.rs:244:5
    |
244 |     solarish,
    |     ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fd.rs:315:5
    |
315 |     apple,
    |     ^^^^^ help: found config with similar value: `target_vendor = "apple"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fd.rs:363:7
    |
363 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/fd.rs:272:15
    |
272 |     #[cfg(any(linux_kernel, target_os = "emscripten", target_os = "fuchsia"))]
    |               ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/ioctl.rs:5:7
  |
5 | #[cfg(linux_kernel)]
  |       ^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/ioctl.rs:14:11
   |
14 | #[cfg(all(linux_kernel, not(any(target_arch = "sparc", target_arch = "sparc64"))))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/ioctl.rs:22:7
   |
22 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/ioctl.rs:34:7
   |
34 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/ioctl.rs:53:11
   |
53 | #[cfg(all(linux_kernel, not(any(target_arch = "sparc", target_arch = "sparc64"))))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/ioctl.rs:61:7
   |
61 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/ioctl.rs:74:11
   |
74 | #[cfg(all(linux_kernel, not(any(target_arch = "sparc", target_arch = "sparc64"))))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/ioctl.rs:77:11
   |
77 | #[cfg(all(linux_kernel, not(any(target_arch = "sparc", target_arch = "sparc64"))))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/ioctl.rs:96:7
   |
96 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/ioctl.rs:134:7
    |
134 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/ioctl.rs:151:7
    |
151 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `staged_api`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:14:12
   |
14 | #[cfg_attr(staged_api, stable(feature = "rust1", since = "1.0.0"))]
   |            ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(staged_api)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(staged_api)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `staged_api`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:17:16
   |
17 |     #[cfg_attr(staged_api, stable(feature = "rust1", since = "1.0.0"))]
   |                ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(staged_api)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(staged_api)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `staged_api`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:18:22
   |
18 |     Start(#[cfg_attr(staged_api, stable(feature = "rust1", since = "1.0.0"))] u64),
   |                      ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(staged_api)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(staged_api)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `staged_api`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:25:16
   |
25 |     #[cfg_attr(staged_api, stable(feature = "rust1", since = "1.0.0"))]
   |                ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(staged_api)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(staged_api)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `staged_api`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:26:20
   |
26 |     End(#[cfg_attr(staged_api, stable(feature = "rust1", since = "1.0.0"))] i64),
   |                    ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(staged_api)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(staged_api)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `staged_api`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:33:16
   |
33 |     #[cfg_attr(staged_api, stable(feature = "rust1", since = "1.0.0"))]
   |                ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(staged_api)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(staged_api)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `staged_api`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:34:24
   |
34 |     Current(#[cfg_attr(staged_api, stable(feature = "rust1", since = "1.0.0"))] i64),
   |                        ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(staged_api)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(staged_api)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:43:15
   |
43 |     #[cfg(any(apple, freebsdlike, linux_kernel, solarish))]
   |               ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:43:22
   |
43 |     #[cfg(any(apple, freebsdlike, linux_kernel, solarish))]
   |                      ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:43:35
   |
43 |     #[cfg(any(apple, freebsdlike, linux_kernel, solarish))]
   |                                   ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:43:49
   |
43 |     #[cfg(any(apple, freebsdlike, linux_kernel, solarish))]
   |                                                 ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:51:15
   |
51 |     #[cfg(any(apple, freebsdlike, linux_kernel, solarish))]
   |               ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:51:22
   |
51 |     #[cfg(any(apple, freebsdlike, linux_kernel, solarish))]
   |                      ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:51:35
   |
51 |     #[cfg(any(apple, freebsdlike, linux_kernel, solarish))]
   |                                   ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/seek_from.rs:51:49
   |
51 |     #[cfg(any(apple, freebsdlike, linux_kernel, solarish))]
   |                                                 ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/fs/sendfile.rs:10:7
   |
10 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/io/ioctl.rs:19:7
   |
19 | #[cfg(apple)]
   |       ^^^^^ help: found config with similar value: `target_vendor = "apple"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/io/read_write.rs:14:7
   |
14 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/io/read_write.rs:286:7
    |
286 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/io/read_write.rs:305:7
    |
305 | #[cfg(linux_kernel)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:21:11
   |
21 | #[cfg(any(linux_kernel, bsd))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:21:25
   |
21 | #[cfg(any(linux_kernel, bsd))]
   |                         ^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:28:7
   |
28 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:31:7
   |
31 | #[cfg(bsd)]
   |       ^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:34:7
   |
34 | #[cfg(linux_kernel)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:37:7
   |
37 | #[cfg(bsd)]
   |       ^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_raw`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:306:7
    |
306 | #[cfg(linux_raw)]
    |       ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_raw)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_raw)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_raw`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:311:9
    |
311 |     not(linux_raw),
    |         ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_raw)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_raw)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_raw`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:319:9
    |
319 |     not(linux_raw),
    |         ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_raw)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_raw)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_raw`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:327:15
    |
327 | #[cfg(all(not(linux_raw), target_os = "android"))]
    |               ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_raw)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_raw)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:332:5
    |
332 |     bsd,
    |     ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:343:5
    |
343 |     solarish,
    |     ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:216:11
    |
216 | #[cfg(any(linux_kernel, bsd))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:216:25
    |
216 | #[cfg(any(linux_kernel, bsd))]
    |                         ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:219:11
    |
219 | #[cfg(any(linux_kernel, bsd))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:219:25
    |
219 | #[cfg(any(linux_kernel, bsd))]
    |                         ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:227:11
    |
227 | #[cfg(any(linux_kernel, bsd))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:227:25
    |
227 | #[cfg(any(linux_kernel, bsd))]
    |                         ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:230:11
    |
230 | #[cfg(any(linux_kernel, bsd))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:230:25
    |
230 | #[cfg(any(linux_kernel, bsd))]
    |                         ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:238:11
    |
238 | #[cfg(any(linux_kernel, bsd))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:238:25
    |
238 | #[cfg(any(linux_kernel, bsd))]
    |                         ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:241:11
    |
241 | #[cfg(any(linux_kernel, bsd))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:241:25
    |
241 | #[cfg(any(linux_kernel, bsd))]
    |                         ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:250:11
    |
250 | #[cfg(any(linux_kernel, bsd))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:250:25
    |
250 | #[cfg(any(linux_kernel, bsd))]
    |                         ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:253:11
    |
253 | #[cfg(any(linux_kernel, bsd))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/patterns.rs:253:25
    |
253 | #[cfg(any(linux_kernel, bsd))]
    |                         ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:212:15
    |
212 |     #[cfg(any(linux_kernel, bsd))]
    |               ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:212:29
    |
212 |     #[cfg(any(linux_kernel, bsd))]
    |                             ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:237:15
    |
237 |     #[cfg(any(linux_kernel, bsd))]
    |               ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:237:29
    |
237 |     #[cfg(any(linux_kernel, bsd))]
    |                             ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:247:15
    |
247 |     #[cfg(any(linux_kernel, bsd))]
    |               ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:247:29
    |
247 |     #[cfg(any(linux_kernel, bsd))]
    |                             ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:257:15
    |
257 |     #[cfg(any(linux_kernel, bsd))]
    |               ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:257:29
    |
257 |     #[cfg(any(linux_kernel, bsd))]
    |                             ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_kernel`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:267:15
    |
267 |     #[cfg(any(linux_kernel, bsd))]
    |               ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_kernel)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_kernel)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/ioctl/mod.rs:267:29
    |
267 |     #[cfg(any(linux_kernel, bsd))]
    |                             ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fix_y2038`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:4:11
  |
4 | #[cfg(not(fix_y2038))]
  |           ^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fix_y2038)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fix_y2038)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fix_y2038`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:8:11
  |
8 | #[cfg(not(fix_y2038))]
  |           ^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fix_y2038)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fix_y2038)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fix_y2038`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:12:7
   |
12 | #[cfg(fix_y2038)]
   |       ^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fix_y2038)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fix_y2038)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fix_y2038`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:24:11
   |
24 | #[cfg(not(fix_y2038))]
   |           ^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fix_y2038)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fix_y2038)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fix_y2038`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:29:7
   |
29 | #[cfg(fix_y2038)]
   |       ^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fix_y2038)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fix_y2038)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fix_y2038`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:34:5
   |
34 |     fix_y2038,
   |     ^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fix_y2038)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fix_y2038)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_raw`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:35:5
   |
35 |     linux_raw,
   |     ^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_raw)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_raw)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libc`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:36:9
   |
36 |     all(libc, target_arch = "x86_64", target_pointer_width = "32")
   |         ^^^^ help: found config with similar value: `feature = "libc"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libc)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libc)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fix_y2038`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:42:9
   |
42 |     not(fix_y2038),
   |         ^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fix_y2038)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fix_y2038)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libc`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:43:5
   |
43 |     libc,
   |     ^^^^ help: found config with similar value: `feature = "libc"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libc)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libc)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fix_y2038`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:51:7
   |
51 | #[cfg(fix_y2038)]
   |       ^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fix_y2038)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fix_y2038)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fix_y2038`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:66:7
   |
66 | #[cfg(fix_y2038)]
   |       ^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fix_y2038)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fix_y2038)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fix_y2038`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:77:7
   |
77 | #[cfg(fix_y2038)]
   |       ^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fix_y2038)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fix_y2038)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fix_y2038`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.34/src/timespec.rs:110:7
    |
110 | #[cfg(fix_y2038)]
    |       ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fix_y2038)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fix_y2038)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

       Fresh nom v7.1.3
warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/lib.rs:375:13
    |
375 | #![cfg_attr(feature = "cargo-clippy", allow(clippy::doc_markdown))]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `alloc`, `default`, `docsrs`, and `std`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/lib.rs:379:12
    |
379 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/lib.rs:391:12
    |
391 | #[cfg_attr(nightly, allow(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/lib.rs:418:14
    |
418 |   #[cfg_attr(nightly, allow(rustdoc::missing_doc_code_examples))]
    |              ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `self::str::*`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/lib.rs:439:9
    |
439 | pub use self::str::*;
    |         ^^^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: unexpected `cfg` condition name: `nightly`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/internal.rs:49:12
   |
49 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/internal.rs:96:12
   |
96 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/internal.rs:340:12
    |
340 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/internal.rs:357:12
    |
357 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/internal.rs:374:12
    |
374 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/internal.rs:392:12
    |
392 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/internal.rs:409:12
    |
409 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/internal.rs:430:12
    |
430 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/lib.rs:39:13
   |
39 | #![cfg_attr(libloading_docs, feature(doc_cfg))]
   |             ^^^^^^^^^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: requested on the command line with `-W unexpected-cfgs`

warning: unexpected `cfg` condition name: `libloading_docs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/lib.rs:45:26
   |
45 | #[cfg(any(unix, windows, libloading_docs))]
   |                          ^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/lib.rs:49:26
   |
49 | #[cfg(any(unix, windows, libloading_docs))]
   |                          ^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/os/mod.rs:20:17
   |
20 | #[cfg(any(unix, libloading_docs))]
   |                 ^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/os/mod.rs:21:12
   |
21 | #[cfg_attr(libloading_docs, doc(cfg(unix)))]
   |            ^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/os/mod.rs:25:20
   |
25 | #[cfg(any(windows, libloading_docs))]
   |                    ^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/os/unix/mod.rs:3:11
  |
3 | #[cfg(all(libloading_docs, not(unix)))]
  |           ^^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/os/unix/mod.rs:5:15
  |
5 | #[cfg(any(not(libloading_docs), unix))]
  |               ^^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/os/unix/consts.rs:46:11
   |
46 | #[cfg(all(libloading_docs, not(unix)))]
   |           ^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/os/unix/consts.rs:55:15
   |
55 | #[cfg(any(not(libloading_docs), unix))]
   |               ^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/safe.rs:2:7
  |
2 | #[cfg(libloading_docs)]
  |       ^^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/safe.rs:4:15
  |
4 | #[cfg(all(not(libloading_docs), unix))]
  |               ^^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/safe.rs:6:15
  |
6 | #[cfg(all(not(libloading_docs), windows))]
  |               ^^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/safe.rs:14:12
   |
14 | #[cfg_attr(libloading_docs, doc(cfg(any(unix, windows))))]
   |            ^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `libloading_docs`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.4/src/safe.rs:196:12
    |
196 | #[cfg_attr(libloading_docs, doc(cfg(any(unix, windows))))]
    |            ^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(libloading_docs)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(libloading_docs)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `rustix` (lib) generated 177 warnings
warning: `nom` (lib) generated 13 warnings
warning: `libloading` (lib) generated 15 warnings
       Fresh which v4.4.2
       Fresh clang-sys v1.8.1
warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clang-sys-1.8.1/src/lib.rs:23:13
   |
23 | #![cfg_attr(feature = "cargo-clippy", allow(clippy::unreadable_literal))]
   |             ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `clang_10_0`, `clang_11_0`, `clang_12_0`, `clang_13_0`, `clang_14_0`, `clang_15_0`, `clang_16_0`, `clang_17_0`, `clang_18_0`, `clang_3_5`, `clang_3_6`, `clang_3_7`, `clang_3_8`, `clang_3_9`, `clang_4_0`, `clang_5_0`, `clang_6_0`, `clang_7_0`, `clang_8_0`, `clang_9_0`, `libcpp`, `libloading`, `runtime`, and `static`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `cargo-clippy`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clang-sys-1.8.1/src/link.rs:173:24
     |
173  |               #[cfg_attr(feature="cargo-clippy", allow(clippy::missing_safety_doc))]
     |                          ^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clang-sys-1.8.1/src/lib.rs:1859:1
     |
1859 | / link! {
1860 | |     pub fn clang_CXCursorSet_contains(set: CXCursorSet, cursor: CXCursor) -> c_uint;
1861 | |     pub fn clang_CXCursorSet_insert(set: CXCursorSet, cursor: CXCursor) -> c_uint;
1862 | |     pub fn clang_CXIndex_getGlobalOptions(index: CXIndex) -> CXGlobalOptFlags;
...    |
2432 | |     pub fn clang_VerbatimLineComment_getText(comment: CXComment) -> CXString;
2433 | | }
     | |_- in this macro invocation
     |
     = note: expected values for `feature` are: `clang_10_0`, `clang_11_0`, `clang_12_0`, `clang_13_0`, `clang_14_0`, `clang_15_0`, `clang_16_0`, `clang_17_0`, `clang_18_0`, `clang_3_5`, `clang_3_6`, `clang_3_7`, `clang_3_8`, `clang_3_9`, `clang_4_0`, `clang_5_0`, `clang_6_0`, `clang_7_0`, `clang_8_0`, `clang_9_0`, `libcpp`, `libloading`, `runtime`, and `static`
     = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `link` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `cargo-clippy`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clang-sys-1.8.1/src/link.rs:174:24
     |
174  |               #[cfg_attr(feature="cargo-clippy", allow(clippy::too_many_arguments))]
     |                          ^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clang-sys-1.8.1/src/lib.rs:1859:1
     |
1859 | / link! {
1860 | |     pub fn clang_CXCursorSet_contains(set: CXCursorSet, cursor: CXCursor) -> c_uint;
1861 | |     pub fn clang_CXCursorSet_insert(set: CXCursorSet, cursor: CXCursor) -> c_uint;
1862 | |     pub fn clang_CXIndex_getGlobalOptions(index: CXIndex) -> CXGlobalOptFlags;
...    |
2432 | |     pub fn clang_VerbatimLineComment_getText(comment: CXComment) -> CXString;
2433 | | }
     | |_- in this macro invocation
     |
     = note: expected values for `feature` are: `clang_10_0`, `clang_11_0`, `clang_12_0`, `clang_13_0`, `clang_14_0`, `clang_15_0`, `clang_16_0`, `clang_17_0`, `clang_18_0`, `clang_3_5`, `clang_3_6`, `clang_3_7`, `clang_3_8`, `clang_3_9`, `clang_4_0`, `clang_5_0`, `clang_6_0`, `clang_7_0`, `clang_8_0`, `clang_9_0`, `libcpp`, `libloading`, `runtime`, and `static`
     = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `link` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `extern` declarations without an explicit ABI are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clang-sys-1.8.1/src/link.rs:96:42
     |
96   |                   pub $name: Option<unsafe extern fn($($pname: $pty), *) $(-> $ret)*>,
     |                                            ^^^^^^ help: explicitly specify the "C" ABI: `extern "C"`
     |
    ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clang-sys-1.8.1/src/lib.rs:1859:1
     |
1859 | / link! {
1860 | |     pub fn clang_CXCursorSet_contains(set: CXCursorSet, cursor: CXCursor) -> c_uint;
1861 | |     pub fn clang_CXCursorSet_insert(set: CXCursorSet, cursor: CXCursor) -> c_uint;
1862 | |     pub fn clang_CXIndex_getGlobalOptions(index: CXIndex) -> CXGlobalOptFlags;
...    |
2432 | |     pub fn clang_VerbatimLineComment_getText(comment: CXComment) -> CXString;
2433 | | }
     | |_- in this macro invocation
     |
     = note: `#[warn(missing_abi)]` on by default
     = note: this warning originates in the macro `link` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `extern` declarations without an explicit ABI are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clang-sys-1.8.1/src/lib.rs:2166:44
     |
2166 |     pub fn clang_executeOnThread(function: extern fn(*mut c_void), data: *mut c_void, stack: c_uint);
     |                                            ^^^^^^ help: explicitly specify the "C" ABI: `extern "C"`

warning: `extern` declarations without an explicit ABI are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clang-sys-1.8.1/src/link.rs:128:54
     |
128  |                           if self.library.get::<unsafe extern fn()>($fn).is_ok() {
     |                                                        ^^^^^^ help: explicitly specify the "C" ABI: `extern "C"`
     |
    ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clang-sys-1.8.1/src/lib.rs:1859:1
     |
1859 | / link! {
1860 | |     pub fn clang_CXCursorSet_contains(set: CXCursorSet, cursor: CXCursor) -> c_uint;
1861 | |     pub fn clang_CXCursorSet_insert(set: CXCursorSet, cursor: CXCursor) -> c_uint;
1862 | |     pub fn clang_CXIndex_getGlobalOptions(index: CXIndex) -> CXGlobalOptFlags;
...    |
2432 | |     pub fn clang_VerbatimLineComment_getText(comment: CXComment) -> CXString;
2433 | | }
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `check` which comes from the expansion of the macro `link` (in Nightly builds, run with -Z macro-backtrace for more info)

       Fresh cexpr v0.6.0
warning: `clang-sys` (lib) generated 20 warnings (14 duplicates)
warning: unexpected `cfg` condition name: `has_const_fn_trait_bound`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.12/src/mutex.rs:148:11
    |
148 |     #[cfg(has_const_fn_trait_bound)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_const_fn_trait_bound)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `has_const_fn_trait_bound`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.12/src/mutex.rs:158:15
    |
158 |     #[cfg(not(has_const_fn_trait_bound))]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_const_fn_trait_bound)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_const_fn_trait_bound`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.12/src/remutex.rs:232:11
    |
232 |     #[cfg(has_const_fn_trait_bound)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_const_fn_trait_bound)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_const_fn_trait_bound`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.12/src/remutex.rs:247:15
    |
247 |     #[cfg(not(has_const_fn_trait_bound))]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_const_fn_trait_bound)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_const_fn_trait_bound`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.12/src/rwlock.rs:369:11
    |
369 |     #[cfg(has_const_fn_trait_bound)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_const_fn_trait_bound)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_const_fn_trait_bound`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.12/src/rwlock.rs:379:15
    |
379 |     #[cfg(not(has_const_fn_trait_bound))]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_const_fn_trait_bound)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: field `0` is never read
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.12/src/lib.rs:103:24
    |
103 | pub struct GuardNoSend(*mut ());
    |            ----------- ^^^^^^^
    |            |
    |            field in this struct
    |
    = help: consider removing this field
    = note: `#[warn(dead_code)]` on by default

warning: unused import: `UnparkHandle`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.10/src/thread_parker/mod.rs:85:49
   |
85 | pub use self::imp::{thread_yield, ThreadParker, UnparkHandle};
   |                                                 ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unexpected `cfg` condition name: `tsan_enabled`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.10/src/word_lock.rs:293:13
    |
293 |     if cfg!(tsan_enabled) {
    |             ^^^^^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tsan_enabled)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tsan_enabled)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

       Fresh autocfg v0.1.8
       Fresh rand_core v0.4.2
warning: use of deprecated module `std::intrinsics`: import this function via `std::mem` instead
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.4.2/src/impls.rs:20:23
   |
20 | use core::intrinsics::transmute;
   |                       ^^^^^^^^^
   |
   = note: `#[warn(deprecated)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.4.2/src/error.rs:95:23
   |
95 |     cause: Option<Box<stdError + Send + Sync>>,
   |                       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
   = note: `#[warn(bare_trait_objects)]` on by default
help: if this is a dyn-compatible trait, use `dyn`
   |
95 |     cause: Option<Box<dyn stdError + Send + Sync>>,
   |                       +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.4.2/src/lib.rs:422:24
    |
422 | impl std::io::Read for RngCore {
    |                        ^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
422 | impl std::io::Read for dyn RngCore {
    |                        +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.4.2/src/error.rs:160:32
    |
160 |     fn cause(&self) -> Option<&stdError> {
    |                                ^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
160 |     fn cause(&self) -> Option<&dyn stdError> {
    |                                +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.4.2/src/error.rs:120:27
    |
120 |         where E: Into<Box<stdError + Send + Sync>>
    |                           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
120 |         where E: Into<Box<dyn stdError + Send + Sync>>
    |                           +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.4.2/src/error.rs:137:48
    |
137 |     pub fn take_cause(&mut self) -> Option<Box<stdError + Send + Sync>> {
    |                                                ^^^^^^^^^^^^^^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
137 |     pub fn take_cause(&mut self) -> Option<Box<dyn stdError + Send + Sync>> {
    |                                                +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.4.2/src/error.rs:161:52
    |
161 |         self.cause.as_ref().map(|e| e.as_ref() as &stdError)
    |                                                    ^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
161 |         self.cause.as_ref().map(|e| e.as_ref() as &dyn stdError)
    |                                                    +++

warning: unnecessary transmute
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.4.2/src/impls.rs:48:13
   |
48 |             transmute(rng.next_u64().to_le())
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `u64::to_ne_bytes(rng.next_u64().to_le())`
   |
   = help: there's also `to_le_bytes` and `to_be_bytes` if you expect a particular byte order
   = note: `#[warn(unnecessary_transmutes)]` on by default

warning: unnecessary transmute
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.4.2/src/impls.rs:55:13
   |
55 |             transmute(rng.next_u64().to_le())
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `u64::to_ne_bytes(rng.next_u64().to_le())`
   |
   = help: there's also `to_le_bytes` and `to_be_bytes` if you expect a particular byte order

warning: unnecessary transmute
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.4.2/src/impls.rs:60:13
   |
60 |             transmute(rng.next_u32().to_le())
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `u32::to_ne_bytes(rng.next_u32().to_le())`
   |
   = help: there's also `to_le_bytes` and `to_be_bytes` if you expect a particular byte order

warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.17.0/src/lib.rs:51:5
   |
51 |     feature = "cargo-clippy",
   |     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `const-generics`, `force_unix_path_separator`, `i128`, `no_std`, `scale-info`, `scale_info`, and `strict`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.17.0/src/lib.rs:61:13
   |
61 | #![cfg_attr(feature = "cargo-clippy", deny(clippy::missing_inline_in_public_items))]
   |             ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `const-generics`, `force_unix_path_separator`, `i128`, `no_std`, `scale-info`, `scale_info`, and `strict`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tests`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.17.0/src/bit.rs:187:7
    |
187 | #[cfg(tests)]
    |       ^^^^^ help: there is a config with a similar name: `test`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tests)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tests)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tests`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.17.0/src/uint.rs:1656:7
     |
1656 | #[cfg(tests)]
     |       ^^^^^ help: there is a config with a similar name: `test`
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tests)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tests)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.17.0/src/uint.rs:1709:16
     |
1709 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::suspicious_arithmetic_impl))]
     |                ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `const-generics`, `force_unix_path_separator`, `i128`, `no_std`, `scale-info`, `scale_info`, and `strict`
     = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `*`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.17.0/src/lib.rs:104:25
    |
104 |     N1, N2, Z0, P1, P2, *,
    |                         ^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: `lock_api` (lib) generated 7 warnings
warning: `parking_lot_core` (lib) generated 2 warnings
warning: `rand_core` (lib) generated 10 warnings
warning: `typenum` (lib) generated 6 warnings
warning: elided lifetime has a name
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazy_static-1.5.0/src/inline_lazy.rs:26:43
   |
26 |     pub fn get<F>(&'static self, f: F) -> &T
   |                                           ^ this elided lifetime gets resolved as `'static`
   |
   = note: `#[warn(elided_named_lifetimes)]` on by default
help: consider specifying it explicitly
   |
26 |     pub fn get<F>(&'static self, f: F) -> &'static T
   |                                            +++++++

warning: `lazy_static` (lib) generated 1 warning
warning: unexpected `cfg` condition name: `relaxed_coherence`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/src/impls.rs:136:19
    |
136 |               #[cfg(relaxed_coherence)]
    |                     ^^^^^^^^^^^^^^^^^
...
183 | / impl_from! {
184 | |     1  => ::typenum::U1,
185 | |     2  => ::typenum::U2,
186 | |     3  => ::typenum::U3,
...   |
215 | |     32 => ::typenum::U32
216 | | }
    | |_- in this macro invocation
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(relaxed_coherence)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(relaxed_coherence)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default
    = note: this warning originates in the macro `impl_from` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `relaxed_coherence`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/src/impls.rs:158:23
    |
158 |               #[cfg(not(relaxed_coherence))]
    |                         ^^^^^^^^^^^^^^^^^
...
183 | / impl_from! {
184 | |     1  => ::typenum::U1,
185 | |     2  => ::typenum::U2,
186 | |     3  => ::typenum::U3,
...   |
215 | |     32 => ::typenum::U32
216 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(relaxed_coherence)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(relaxed_coherence)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `impl_from` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `relaxed_coherence`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/src/impls.rs:136:19
    |
136 |               #[cfg(relaxed_coherence)]
    |                     ^^^^^^^^^^^^^^^^^
...
219 | / impl_from! {
220 | |     33 => ::typenum::U33,
221 | |     34 => ::typenum::U34,
222 | |     35 => ::typenum::U35,
...   |
268 | |     1024 => ::typenum::U1024
269 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(relaxed_coherence)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(relaxed_coherence)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `impl_from` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `relaxed_coherence`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/src/impls.rs:158:23
    |
158 |               #[cfg(not(relaxed_coherence))]
    |                         ^^^^^^^^^^^^^^^^^
...
219 | / impl_from! {
220 | |     33 => ::typenum::U33,
221 | |     34 => ::typenum::U34,
222 | |     35 => ::typenum::U35,
...   |
268 | |     1024 => ::typenum::U1024
269 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(relaxed_coherence)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(relaxed_coherence)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `impl_from` (in Nightly builds, run with -Z macro-backtrace for more info)

       Fresh bytes v1.10.1
warning: creating a shared reference to mutable static
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/signal-hook-registry-1.4.2/src/lib.rs:291:18
    |
291 |         unsafe { GLOBAL_DATA.as_ref().unwrap() }
    |                  ^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
    = note: `#[warn(static_mut_refs)]` on by default

warning: `generic-array` (lib) generated 4 warnings
warning: `signal-hook-registry` (lib) generated 1 warning
       Fresh rustc-hash v1.1.0
       Fresh peeking_take_while v0.1.2
warning: elided lifetime has a name
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/peeking_take_while-0.1.2/src/lib.rs:109:77
    |
106 | impl<'a, I> PeekableExt<'a, I> for Peekable<I>
    |      -- lifetime `'a` declared here
...
109 |     fn peeking_take_while<P>(&'a mut self, predicate: P) -> PeekingTakeWhile<I, P>
    |                                                                             ^ this elided lifetime gets resolved as `'a`
    |
    = note: `#[warn(elided_named_lifetimes)]` on by default

       Fresh once_cell v1.19.0
       Fresh lazycell v1.3.0
warning: use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazycell-1.3.0/src/lib.rs:269:31
    |
269 |         if NONE != self.state.compare_and_swap(NONE, LOCK, Ordering::Acquire) {
    |                               ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated method `core::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazycell-1.3.0/src/lib.rs:275:31
    |
275 |         if LOCK != self.state.compare_and_swap(LOCK, SOME, Ordering::Release) {
    |                               ^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition name: `slab_no_const_vec_new`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slab-0.4.9/src/lib.rs:250:15
    |
250 |     #[cfg(not(slab_no_const_vec_new))]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_no_const_vec_new)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_no_const_vec_new)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `slab_no_const_vec_new`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slab-0.4.9/src/lib.rs:264:11
    |
264 |     #[cfg(slab_no_const_vec_new)]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_no_const_vec_new)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_no_const_vec_new)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slab_no_track_caller`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slab-0.4.9/src/lib.rs:929:20
    |
929 |     #[cfg_attr(not(slab_no_track_caller), track_caller)]
    |                    ^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_no_track_caller)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_no_track_caller)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slab_no_track_caller`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slab-0.4.9/src/lib.rs:1098:20
     |
1098 |     #[cfg_attr(not(slab_no_track_caller), track_caller)]
     |                    ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_no_track_caller)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_no_track_caller)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slab_no_track_caller`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slab-0.4.9/src/lib.rs:1206:20
     |
1206 |     #[cfg_attr(not(slab_no_track_caller), track_caller)]
     |                    ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_no_track_caller)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_no_track_caller)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slab_no_track_caller`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slab-0.4.9/src/lib.rs:1216:20
     |
1216 |     #[cfg_attr(not(slab_no_track_caller), track_caller)]
     |                    ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_no_track_caller)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_no_track_caller)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `peeking_take_while` (lib) generated 1 warning
warning: `lazycell` (lib) generated 2 warnings
warning: `slab` (lib) generated 6 warnings
       Fresh rand_core v0.3.1
       Fresh atty v0.2.14
       Fresh unicode-width v0.1.13
warning: unexpected `cfg` condition value: `cloudabi`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/humantime-2.1.0/src/date.rs:6:7
  |
6 | #[cfg(target_os="cloudabi")]
  |       ^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `cloudabi`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/humantime-2.1.0/src/date.rs:14:9
   |
14 |     not(target_os="cloudabi"),
   |         ^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `humantime` (lib) generated 2 warnings
       Fresh textwrap v0.11.0
       Fresh termcolor v1.4.1
       Fresh ansi_term v0.12.1
warning: associated type `wstr` should have an upper camel case name
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ansi_term-0.12.1/src/write.rs:6:10
  |
6 |     type wstr: ?Sized;
  |          ^^^^ help: convert the identifier to upper camel case (notice the capitalization): `Wstr`
  |
  = note: `#[warn(non_camel_case_types)]` on by default

warning: unused import: `windows::*`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ansi_term-0.12.1/src/lib.rs:266:9
    |
266 | pub use windows::*;
    |         ^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ansi_term-0.12.1/src/write.rs:15:23
   |
15 | impl<'a> AnyWrite for fmt::Write + 'a {
   |                       ^^^^^^^^^^^^^^^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
   = note: `#[warn(bare_trait_objects)]` on by default
help: if this is a dyn-compatible trait, use `dyn`
   |
15 | impl<'a> AnyWrite for dyn fmt::Write + 'a {
   |                       +++
help: alternatively use a blanket implementation to implement `AnyWrite` for all types that also implement `fmt::Write + 'a`
   |
15 - impl<'a> AnyWrite for fmt::Write + 'a {
15 + impl<'a, T: fmt::Write + 'a> AnyWrite for T {
   |

warning: trait objects without an explicit `dyn` are deprecated
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ansi_term-0.12.1/src/write.rs:29:23
   |
29 | impl<'a> AnyWrite for io::Write + 'a {
   |                       ^^^^^^^^^^^^^^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
   |
29 | impl<'a> AnyWrite for dyn io::Write + 'a {
   |                       +++
help: alternatively use a blanket implementation to implement `AnyWrite` for all types that also implement `io::Write + 'a`
   |
29 - impl<'a> AnyWrite for io::Write + 'a {
29 + impl<'a, T: io::Write + 'a> AnyWrite for T {
   |

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ansi_term-0.12.1/src/ansi.rs:279:21
    |
279 |         let f: &mut fmt::Write = f;
    |                     ^^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
279 |         let f: &mut dyn fmt::Write = f;
    |                     +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ansi_term-0.12.1/src/ansi.rs:291:29
    |
291 |                 let f: &mut fmt::Write = f;
    |                             ^^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
291 |                 let f: &mut dyn fmt::Write = f;
    |                             +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ansi_term-0.12.1/src/ansi.rs:295:29
    |
295 |                 let f: &mut fmt::Write = f;
    |                             ^^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
295 |                 let f: &mut dyn fmt::Write = f;
    |                             +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ansi_term-0.12.1/src/ansi.rs:308:21
    |
308 |         let f: &mut fmt::Write = f;
    |                     ^^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
308 |         let f: &mut dyn fmt::Write = f;
    |                     +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ansi_term-0.12.1/src/display.rs:201:21
    |
201 |         let w: &mut fmt::Write = f;
    |                     ^^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
201 |         let w: &mut dyn fmt::Write = f;
    |                     +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ansi_term-0.12.1/src/display.rs:210:21
    |
210 |         let w: &mut io::Write = w;
    |                     ^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
210 |         let w: &mut dyn io::Write = w;
    |                     +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ansi_term-0.12.1/src/display.rs:229:21
    |
229 |         let f: &mut fmt::Write = f;
    |                     ^^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
229 |         let f: &mut dyn fmt::Write = f;
    |                     +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ansi_term-0.12.1/src/display.rs:239:21
    |
239 |         let w: &mut io::Write = w;
    |                     ^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
239 |         let w: &mut dyn io::Write = w;
    |                     +++

       Fresh vec_map v0.8.2
warning: unnecessary parentheses around type
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/vec_map-0.8.2/src/lib.rs:1010:34
     |
1010 |     fn next(&mut self) -> Option<(&'a V)> { self.iter.next().map(|e| e.1) }
     |                                  ^     ^
     |
     = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
     |
1010 -     fn next(&mut self) -> Option<(&'a V)> { self.iter.next().map(|e| e.1) }
1010 +     fn next(&mut self) -> Option<&'a V> { self.iter.next().map(|e| e.1) }
     |

warning: unnecessary parentheses around type
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/vec_map-0.8.2/src/lib.rs:1017:39
     |
1017 |     fn next_back(&mut self) -> Option<(&'a V)> { self.iter.next_back().map(|e| e.1) }
     |                                       ^     ^
     |
help: remove these parentheses
     |
1017 -     fn next_back(&mut self) -> Option<(&'a V)> { self.iter.next_back().map(|e| e.1) }
1017 +     fn next_back(&mut self) -> Option<&'a V> { self.iter.next_back().map(|e| e.1) }
     |

warning: unnecessary parentheses around type
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/vec_map-0.8.2/src/lib.rs:1023:34
     |
1023 |     fn next(&mut self) -> Option<(&'a mut V)> { self.iter_mut.next().map(|e| e.1) }
     |                                  ^         ^
     |
help: remove these parentheses
     |
1023 -     fn next(&mut self) -> Option<(&'a mut V)> { self.iter_mut.next().map(|e| e.1) }
1023 +     fn next(&mut self) -> Option<&'a mut V> { self.iter_mut.next().map(|e| e.1) }
     |

       Fresh strsim v0.8.0
       Fresh thiserror v1.0.61
       Fresh env_logger v0.9.3
warning: unexpected `cfg` condition name: `rustbuild`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_logger-0.9.3/src/lib.rs:283:13
    |
283 | #![cfg_attr(rustbuild, feature(staged_api, rustc_private))]
    |             ^^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustbuild)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustbuild)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `rustbuild`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_logger-0.9.3/src/lib.rs:284:13
    |
284 | #![cfg_attr(rustbuild, unstable(feature = "rustc_private", issue = "27812"))]
    |             ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustbuild)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustbuild)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `ansi_term` (lib) generated 12 warnings
warning: `vec_map` (lib) generated 3 warnings
warning: `env_logger` (lib) generated 2 warnings
       Fresh clap v2.34.0
warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/lib.rs:533:13
    |
533 |     not(any(feature = "cargo-clippy", feature = "nightly")),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/lib.rs:585:7
    |
585 | #[cfg(unstable)]
    |       ^^^^^^^^ help: found config with similar value: `feature = "unstable"`
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/lib.rs:588:7
    |
588 | #[cfg(unstable)]
    |       ^^^^^^^^ help: found config with similar value: `feature = "unstable"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/app/help.rs:102:16
    |
102 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::too_many_arguments))]
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `lints`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/app/parser.rs:808:16
    |
808 |     #[cfg_attr(feature = "lints", allow(wrong_self_convention))]
    |                ^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
    = help: consider adding `lints` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/app/parser.rs:872:9
    |
872 |         feature = "cargo-clippy",
    |         ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `lints`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/app/parser.rs:2202:16
     |
2202 |     #[cfg_attr(feature = "lints", allow(block_in_if_condition_stmt))]
     |                ^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
     = help: consider adding `lints` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/app/parser.rs:1141:28
     |
1141 |                 #[cfg_attr(feature = "cargo-clippy", allow(clippy::while_let_on_iterator))]
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
     = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/app/mod.rs:1847:16
     |
1847 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
     |                ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
     = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/app/mod.rs:1851:16
     |
1851 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
     |                ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
     = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/any_arg.rs:30:16
   |
30 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
   |                ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/any_arg.rs:32:16
   |
32 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
   |                ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/any_arg.rs:95:16
   |
95 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
   |                ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/any_arg.rs:99:16
   |
99 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
   |                ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/arg_builder/flag.rs:106:16
    |
106 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/arg_builder/flag.rs:110:16
    |
110 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/arg_builder/option.rs:160:16
    |
160 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/arg_builder/option.rs:164:16
    |
164 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/arg_builder/positional.rs:180:16
    |
180 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/arg_builder/positional.rs:184:16
    |
184 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/arg_builder/valued.rs:19:16
   |
19 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
   |                ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/arg_builder/valued.rs:21:16
   |
21 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
   |                ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/arg_builder/valued.rs:25:16
   |
25 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::type_complexity))]
   |                ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/args/arg_matcher.rs:269:12
    |
269 | #[cfg_attr(feature = "cargo-clippy", allow(clippy::from_over_into))]
    |            ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/completions/shell.rs:31:16
   |
31 |     #[cfg_attr(feature = "cargo-clippy", allow(clippy::wildcard_in_or_patterns))]
   |                ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/suggestions.rs:9:12
  |
9 | #[cfg_attr(feature = "cargo-clippy", allow(clippy::needless_lifetimes))]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `ansi_term`, `atty`, `clippy`, `color`, `debug`, `default`, `doc`, `nightly`, `no_cargo`, `strsim`, `suggestions`, `term_size`, `unstable`, `vec_map`, `wrap_help`, `yaml`, and `yaml-rust`
  = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `features`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/suggestions.rs:106:17
    |
106 | #[cfg(all(test, features = "suggestions"))]
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
help: there is a config with a similar name and value
    |
106 - #[cfg(all(test, features = "suggestions"))]
106 + #[cfg(all(test, feature = "suggestions"))]
    |

warning: unexpected `cfg` condition name: `has_total_cmp`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/src/float.rs:2305:19
     |
2305 |             #[cfg(has_total_cmp)]
     |                   ^^^^^^^^^^^^^
...
2325 | totalorder_impl!(f64, i64, u64, 64);
     | ----------------------------------- in this macro invocation
     |
     = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_total_cmp)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_total_cmp)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: `#[warn(unexpected_cfgs)]` on by default
     = note: this warning originates in the macro `totalorder_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `has_total_cmp`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/src/float.rs:2311:23
     |
2311 |             #[cfg(not(has_total_cmp))]
     |                       ^^^^^^^^^^^^^
...
2325 | totalorder_impl!(f64, i64, u64, 64);
     | ----------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_total_cmp)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_total_cmp)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `totalorder_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `has_total_cmp`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/src/float.rs:2305:19
     |
2305 |             #[cfg(has_total_cmp)]
     |                   ^^^^^^^^^^^^^
...
2326 | totalorder_impl!(f32, i32, u32, 32);
     | ----------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_total_cmp)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_total_cmp)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `totalorder_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `has_total_cmp`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/src/float.rs:2311:23
     |
2311 |             #[cfg(not(has_total_cmp))]
     |                       ^^^^^^^^^^^^^
...
2326 | totalorder_impl!(f32, i32, u32, 32);
     | ----------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_total_cmp)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_total_cmp)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `totalorder_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

       Fresh thiserror-impl v2.0.11
warning: `clap` (lib) generated 27 warnings
warning: `num-traits` (lib) generated 4 warnings
       Fresh bindgen v0.59.2
warning: unexpected `cfg` condition name: `testing_only_extra_assertions`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.59.2/src/ir/item.rs:104:7
    |
104 | #[cfg(testing_only_extra_assertions)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: found config with similar value: `feature = "testing_only_extra_assertions"`
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(testing_only_extra_assertions)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(testing_only_extra_assertions)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `testing_only_extra_assertions`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.59.2/src/ir/item.rs:107:11
    |
107 | #[cfg(not(testing_only_extra_assertions))]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: found config with similar value: `feature = "testing_only_extra_assertions"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(testing_only_extra_assertions)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(testing_only_extra_assertions)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `testing_only_extra_assertions`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.59.2/src/ir/item.rs:110:11
    |
110 | #[cfg(not(testing_only_extra_assertions))]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: found config with similar value: `feature = "testing_only_extra_assertions"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(testing_only_extra_assertions)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(testing_only_extra_assertions)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: fields `namespaced_constants` and `msvc_mangling` are never read
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.59.2/src/lib.rs:1832:5
     |
1667 | struct BindgenOptions {
     |        -------------- fields in this struct
...
1832 |     namespaced_constants: bool,
     |     ^^^^^^^^^^^^^^^^^^^^
...
1835 |     msvc_mangling: bool,
     |     ^^^^^^^^^^^^^
     |
     = note: `BindgenOptions` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
     = note: `#[warn(dead_code)]` on by default

warning: fields `index` and `cannot_derive_copy_in_array` are never read
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.59.2/src/ir/context.rs:368:5
    |
308 | pub struct BindgenContext {
    |            -------------- fields in this struct
...
368 |     index: clang::Index,
    |     ^^^^^
...
427 |     cannot_derive_copy_in_array: Option<HashSet<ItemId>>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `BindgenContext` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `comment` is never read
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.59.2/src/ir/function.rs:90:5
   |
79 | pub struct Function {
   |            -------- field in this struct
...
90 |     comment: Option<String>,
   |     ^^^^^^^
   |
   = note: `Function` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: method `has_float` is never used
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.59.2/src/ir/item.rs:94:8
   |
92 | pub trait HasFloat {
   |           -------- method in this trait
93 |     /// Returns `true` if the thing has float, and `false` otherwise.
94 |     fn has_float(&self, ctx: &BindgenContext) -> bool;
   |        ^^^^^^^^^

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/lib.rs:45:7
   |
45 | #[cfg(crossbeam_loom)]
   |       ^^^^^^^^^^^^^^
   |
   = help: expected names are: `crossbeam_no_atomic`, `crossbeam_sanitize_thread`, `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: requested on the command line with `-W unexpected-cfgs`

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/lib.rs:68:11
   |
68 | #[cfg(not(crossbeam_loom))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/lib.rs:109:11
    |
109 | #[cfg(not(crossbeam_loom))]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/mod.rs:7:11
  |
7 | #[cfg(not(crossbeam_loom))]
  |           ^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/mod.rs:25:11
   |
25 | #[cfg(not(crossbeam_loom))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/mod.rs:28:11
   |
28 | #[cfg(not(crossbeam_loom))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:36:19
   |
36 |     not(any(miri, crossbeam_loom, crossbeam_sanitize_thread)),
   |                   ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:53:19
   |
53 |     not(any(miri, crossbeam_loom, crossbeam_sanitize_thread)),
   |                   ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:107:7
    |
107 | #[cfg(crossbeam_loom)]
    |       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:71:15
   |
71 |         #[cfg(crossbeam_loom)]
   |               ^^^^^^^^^^^^^^
...
79 | impl_atomic!(AtomicBool, bool);
   | ------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `impl_atomic` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:71:15
   |
71 |         #[cfg(crossbeam_loom)]
   |               ^^^^^^^^^^^^^^
...
80 | impl_atomic!(AtomicUsize, usize);
   | -------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `impl_atomic` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:71:15
   |
71 |         #[cfg(crossbeam_loom)]
   |               ^^^^^^^^^^^^^^
...
81 | impl_atomic!(AtomicIsize, isize);
   | -------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `impl_atomic` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:71:15
   |
71 |         #[cfg(crossbeam_loom)]
   |               ^^^^^^^^^^^^^^
...
82 | impl_atomic!(AtomicU8, u8);
   | -------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `impl_atomic` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:71:15
   |
71 |         #[cfg(crossbeam_loom)]
   |               ^^^^^^^^^^^^^^
...
83 | impl_atomic!(AtomicI8, i8);
   | -------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `impl_atomic` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:71:15
   |
71 |         #[cfg(crossbeam_loom)]
   |               ^^^^^^^^^^^^^^
...
84 | impl_atomic!(AtomicU16, u16);
   | ---------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `impl_atomic` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:71:15
   |
71 |         #[cfg(crossbeam_loom)]
   |               ^^^^^^^^^^^^^^
...
85 | impl_atomic!(AtomicI16, i16);
   | ---------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `impl_atomic` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:71:15
   |
71 |         #[cfg(crossbeam_loom)]
   |               ^^^^^^^^^^^^^^
...
87 | impl_atomic!(AtomicU32, u32);
   | ---------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `impl_atomic` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:71:15
   |
71 |         #[cfg(crossbeam_loom)]
   |               ^^^^^^^^^^^^^^
...
89 | impl_atomic!(AtomicI32, i32);
   | ---------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `impl_atomic` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:71:15
   |
71 |         #[cfg(crossbeam_loom)]
   |               ^^^^^^^^^^^^^^
...
94 | impl_atomic!(AtomicU64, u64);
   | ---------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `impl_atomic` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/atomic/consume.rs:71:15
   |
71 |         #[cfg(crossbeam_loom)]
   |               ^^^^^^^^^^^^^^
...
99 | impl_atomic!(AtomicI64, i64);
   | ---------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `impl_atomic` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `crossbeam_loom`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/sync/mod.rs:7:11
  |
7 | #[cfg(not(crossbeam_loom))]
  |           ^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/sync/mod.rs:10:11
   |
10 | #[cfg(not(crossbeam_loom))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.20/src/sync/mod.rs:15:11
   |
15 | #[cfg(not(crossbeam_loom))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `bindgen` (lib) generated 7 warnings
warning: `crossbeam-utils` (lib) generated 23 warnings
       Fresh getrandom v0.2.15
       Fresh same-file v1.0.6
warning: unused return value of `into_raw_fd` that must be used
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/same-file-1.0.6/src/unix.rs:23:13
   |
23 |             self.file.take().unwrap().into_raw_fd();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: losing the raw file descriptor may leak resources
   = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
   |
23 |             let _ = self.file.take().unwrap().into_raw_fd();
   |             +++++++

       Fresh siphasher v0.2.3
       Fresh rand_chacha v0.1.1
warning: unexpected `cfg` condition name: `rustc_1_26`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.1.1/src/chacha.rs:117:15
    |
117 |     #[cfg(all(rustc_1_26, not(target_os = "emscripten")))]
    |               ^^^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `rustc_1_26`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.1.1/src/chacha.rs:138:15
    |
138 |     #[cfg(all(rustc_1_26, not(target_os = "emscripten")))]
    |               ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `same-file` (lib) generated 1 warning
warning: `rand_chacha` (lib) generated 2 warnings
       Fresh phf_shared v0.7.24
       Fresh walkdir v2.5.0
       Fresh rand_pcg v0.1.2
warning: unexpected `cfg` condition name: `rustc_1_26`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_pcg-0.1.2/src/lib.rs:45:11
   |
45 | #[cfg(all(rustc_1_26, not(target_os = "emscripten")))] mod pcg128;
   |           ^^^^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `rustc_1_26`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_pcg-0.1.2/src/lib.rs:48:11
   |
48 | #[cfg(all(rustc_1_26, not(target_os = "emscripten")))] pub use self::pcg128::{Pcg64Mcg, Mcg128Xsl64};
   |           ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_pcg-0.1.2/src/pcg64.rs:124:17
    |
124 |                 transmute(self.next_u32().to_le())
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `u32::to_ne_bytes(self.next_u32().to_le())`
    |
    = help: there's also `to_le_bytes` and `to_be_bytes` if you expect a particular byte order
    = note: `#[warn(unnecessary_transmutes)]` on by default

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_pcg-0.1.2/src/pcg64.rs:131:17
    |
131 |                 transmute(self.next_u32().to_le())
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `u32::to_ne_bytes(self.next_u32().to_le())`
    |
    = help: there's also `to_le_bytes` and `to_be_bytes` if you expect a particular byte order

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_pcg-0.1.2/src/pcg128.rs:105:17
    |
105 |                 transmute(self.next_u64().to_le())
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `u64::to_ne_bytes(self.next_u64().to_le())`
    |
    = help: there's also `to_le_bytes` and `to_be_bytes` if you expect a particular byte order

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_pcg-0.1.2/src/pcg128.rs:112:17
    |
112 |                 transmute(self.next_u64().to_le())
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `u64::to_ne_bytes(self.next_u64().to_le())`
    |
    = help: there's also `to_le_bytes` and `to_be_bytes` if you expect a particular byte order

       Fresh rand_isaac v0.1.1
warning: `rand_pcg` (lib) generated 6 warnings
       Fresh rand_xorshift v0.1.1
       Fresh rand_hc v0.1.0
       Fresh rand_jitter v0.1.4
       Fresh rand_os v0.1.3
warning: unexpected `cfg` condition value: `bitrig`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_os-0.1.3/src/lib.rs:366:5
    |
366 |     target_os = "bitrig",
    |     ^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `cloudabi`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_os-0.1.3/src/lib.rs:367:5
    |
367 |     target_os = "cloudabi",
    |     ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bitrig`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_os-0.1.3/src/lib.rs:300:14
    |
300 | mod_use!(cfg(target_os = "bitrig"), openbsd_bitrig);
    |              ^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cloudabi`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_os-0.1.3/src/lib.rs:301:14
    |
301 | mod_use!(cfg(target_os = "cloudabi"), cloudabi);
    |              ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: use of deprecated constant `std::sync::ONCE_INIT`: the `Once::new()` function is now preferred
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_os-0.1.3/src/random_device.rs:17:30
   |
17 | use std::sync::{Once, Mutex, ONCE_INIT};
   |                              ^^^^^^^^^
   |
   = note: `#[warn(deprecated)]` on by default

warning: use of deprecated constant `std::sync::ONCE_INIT`: the `Once::new()` function is now preferred
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_os-0.1.3/src/random_device.rs:21:30
   |
21 | static READ_RNG_ONCE: Once = ONCE_INIT;
   |                              ^^^^^^^^^
   |
help: replace the use of the deprecated constant
   |
21 - static READ_RNG_ONCE: Once = ONCE_INIT;
21 + static READ_RNG_ONCE: Once = Once::new();
   |

warning: use of deprecated constant `std::sync::ONCE_INIT`: the `Once::new()` function is now preferred
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_os-0.1.3/src/linux_android.rs:24:23
   |
24 | use std::sync::{Once, ONCE_INIT};
   |                       ^^^^^^^^^

warning: use of deprecated constant `std::sync::ONCE_INIT`: the `Once::new()` function is now preferred
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_os-0.1.3/src/linux_android.rs:165:28
    |
165 |     static CHECKER: Once = ONCE_INIT;
    |                            ^^^^^^^^^
    |
help: replace the use of the deprecated constant
    |
165 -     static CHECKER: Once = ONCE_INIT;
165 +     static CHECKER: Once = Once::new();
    |

warning: method `method_str` is never used
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_os-0.1.3/src/lib.rs:280:8
    |
258 | trait OsRngImpl where Self: Sized {
    |       --------- method in this trait
...
280 |     fn method_str(&self) -> &'static str;
    |        ^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: creating a shared reference to mutable static
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_os-0.1.3/src/random_device.rs:34:26
   |
34 |     let mutex = unsafe { READ_RNG_FILE.as_ref().unwrap() };
   |                          ^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
   = note: `#[warn(static_mut_refs)]` on by default

warning: creating a shared reference to mutable static
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_os-0.1.3/src/random_device.rs:48:26
   |
48 |     let mutex = unsafe { READ_RNG_FILE.as_ref().unwrap() };
   |                          ^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: `rand_os` (lib) generated 11 warnings
warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/build.rs:60:30
   |
60 |     let semver_exempt = cfg!(procmacro2_semver_exempt);
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/lib.rs:142:12
    |
142 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unused imports: `alloc`, `boxed`, `convert`, and `option`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/lib.rs:185:13
    |
185 |             alloc, borrow, boxed, cmp, collections, convert, fmt, hash, iter, mem, ops, option,
    |             ^^^^^          ^^^^^                    ^^^^^^^                             ^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::prelude as v1`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/lib.rs:192:21
    |
192 |             pub use std::prelude as v1;
    |                     ^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition name: `nightly`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/error.rs:63:12
   |
63 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/error.rs:97:12
   |
97 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/multi.rs:136:12
    |
136 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:15:12
   |
15 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:38:12
   |
38 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:85:12
   |
85 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:144:12
    |
144 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:201:12
    |
201 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:258:12
    |
258 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:313:12
    |
313 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:363:12
    |
363 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:396:12
    |
396 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:459:12
    |
459 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:501:12
    |
501 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:543:12
    |
543 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:580:12
    |
580 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:629:12
    |
629 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:678:12
    |
678 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:722:12
    |
722 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:766:12
    |
766 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:808:12
    |
808 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:855:12
    |
855 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `nightly`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.5.40/src/combinator/parser.rs:912:12
    |
912 | #[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(nightly)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(nightly)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

       Fresh crossbeam-utils v0.8.20
       Fresh rand v0.6.5
warning: unexpected `cfg` condition name: `rustc_1_26`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/lib.rs:496:11
    |
496 | #[cfg(all(rustc_1_26, not(target_os = "emscripten")))] impl_as_byte_slice!(u128);
    |           ^^^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `rustc_1_26`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/lib.rs:502:11
    |
502 | #[cfg(all(rustc_1_26, not(target_os = "emscripten")))] impl_as_byte_slice!(i128);
    |           ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_26`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/mod.rs:176:11
    |
176 | #[cfg(any(rustc_1_26, features="nightly"))]
    |           ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `features`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/mod.rs:176:23
    |
176 | #[cfg(any(rustc_1_26, features="nightly"))]
    |                       ^^^^^^^^^^^^^^^^^^
    |
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
help: there is a config with a similar name and value
    |
176 - #[cfg(any(rustc_1_26, features="nightly"))]
176 + #[cfg(any(rustc_1_26, feature="nightly"))]
    |

warning: unexpected `cfg` condition name: `rustc_1_26`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/mod.rs:308:7
    |
308 | #[cfg(rustc_1_26)]
    |       ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `features`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/mod.rs:312:7
    |
312 | #[cfg(features = "nightly")]
    |       ^^^^^^^^^^^^^^^^^^^^
    |
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
help: there is a config with a similar name and value
    |
312 - #[cfg(features = "nightly")]
312 + #[cfg(feature = "nightly")]
    |

warning: unexpected `cfg` condition name: `rustc_1_25`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/uniform.rs:112:33
    |
112 | #[cfg(all(not(feature = "std"), rustc_1_25))]
    |                                 ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_25)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_25)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_27`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/uniform.rs:273:7
    |
273 | #[cfg(rustc_1_27)]
    |       ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_27)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_27)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_26`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/uniform.rs:466:11
    |
466 | #[cfg(all(rustc_1_26, not(target_os = "emscripten")))]
    |           ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_26`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/uniform.rs:474:11
    |
474 | #[cfg(all(rustc_1_26, not(target_os = "emscripten")))]
    |           ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_25`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/uniform.rs:824:28
    |
824 | #[cfg(any(feature = "std", rustc_1_25))]
    |                            ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_25)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_25)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_25`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/uniform.rs:831:28
    |
831 | #[cfg(any(feature = "std", rustc_1_25))]
    |                            ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_25)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_25)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_25`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/uniform.rs:848:28
    |
848 | #[cfg(any(feature = "std", rustc_1_25))]
    |                            ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_25)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_25)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_25`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/uniform.rs:853:28
    |
853 | #[cfg(any(feature = "std", rustc_1_25))]
    |                            ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_25)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_25)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_26`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/integer.rs:48:11
   |
48 | #[cfg(all(rustc_1_26, not(target_os = "emscripten")))]
   |           ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_26`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/integer.rs:88:11
   |
88 | #[cfg(all(rustc_1_26, not(target_os = "emscripten")))] impl_int_from_uint! { i128, u128 }
   |           ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_26`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:64:11
   |
64 | #[cfg(all(rustc_1_26, not(target_os = "emscripten")))]
   |           ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_26`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:128:15
    |
128 | #[cfg(not(all(rustc_1_26, not(target_os = "emscripten"))))]
    |               ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_26`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:130:11
    |
130 | #[cfg(all(rustc_1_26, not(target_os = "emscripten")))]
    |           ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `std`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:250:11
    |
250 | #[cfg(not(std))]
    |           ^^^ help: found config with similar value: `feature = "std"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(std)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(std)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `std`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:290:19
    |
290 |         #[cfg(not(std))]
    |                   ^^^ help: found config with similar value: `feature = "std"`
...
348 | scalar_float_impl!(f32, u32);
    | ---------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(std)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(std)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `scalar_float_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `std`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:290:19
    |
290 |         #[cfg(not(std))]
    |                   ^^^ help: found config with similar value: `feature = "std"`
...
349 | scalar_float_impl!(f64, u64);
    | ---------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(std)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(std)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `scalar_float_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `extern` declarations without an explicit ABI are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/rngs/adapter/reseeding.rs:312:5
    |
312 |     extern fn fork_handler() {
    |     ^^^^^^ help: explicitly specify the "C" ABI: `extern "C"`
    |
    = note: `#[warn(missing_abi)]` on by default

warning: unexpected `cfg` condition name: `rustc_1_26`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/rngs/small.rs:13:15
   |
13 | #[cfg(all(all(rustc_1_26, not(target_os = "emscripten")), target_pointer_width = "64"))]
   |               ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_26`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/rngs/small.rs:15:19
   |
15 | #[cfg(not(all(all(rustc_1_26, not(target_os = "emscripten")), target_pointer_width = "64")))]
   |                   ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_26`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/deprecated.rs:154:15
    |
154 |     #[cfg(all(rustc_1_26, not(target_os = "emscripten")))]
    |               ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `rustc_1_26`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/deprecated.rs:159:15
    |
159 |     #[cfg(all(rustc_1_26, not(target_os = "emscripten")))]
    |               ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustc_1_26)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustc_1_26)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: this `#[deprecated]` annotation has no effect
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/mod.rs:439:1
    |
439 | #[deprecated(since="0.6.0", note="use WeightedIndex instead")]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove the unnecessary deprecation attribute
    |
    = note: `#[warn(useless_deprecated)]` on by default

warning: use of deprecated constant `std::sync::atomic::ATOMIC_USIZE_INIT`: the `new` function is now preferred
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/rngs/adapter/reseeding.rs:289:42
    |
289 |     use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};
    |                                          ^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated constant `std::sync::atomic::ATOMIC_BOOL_INIT`: the `new` function is now preferred
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/rngs/adapter/reseeding.rs:290:41
    |
290 |     use std::sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT};
    |                                         ^^^^^^^^^^^^^^^^

warning: use of deprecated constant `std::sync::atomic::ATOMIC_USIZE_INIT`: the `new` function is now preferred
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/rngs/adapter/reseeding.rs:304:54
    |
304 |     static RESEEDING_RNG_FORK_COUNTER: AtomicUsize = ATOMIC_USIZE_INIT;
    |                                                      ^^^^^^^^^^^^^^^^^
    |
help: replace the use of the deprecated constant
    |
304 -     static RESEEDING_RNG_FORK_COUNTER: AtomicUsize = ATOMIC_USIZE_INIT;
304 +     static RESEEDING_RNG_FORK_COUNTER: AtomicUsize = AtomicUsize::new(0);
    |

warning: use of deprecated constant `std::sync::atomic::ATOMIC_BOOL_INIT`: the `new` function is now preferred
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/rngs/adapter/reseeding.rs:310:50
    |
310 |     static FORK_HANDLER_REGISTERED: AtomicBool = ATOMIC_BOOL_INIT;
    |                                                  ^^^^^^^^^^^^^^^^
    |
help: replace the use of the deprecated constant
    |
310 -     static FORK_HANDLER_REGISTERED: AtomicBool = ATOMIC_BOOL_INIT;
310 +     static FORK_HANDLER_REGISTERED: AtomicBool = AtomicBool::new(false);
    |

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/weighted.rs:221:32
    |
221 |     fn cause(&self) -> Option<&::std::error::Error> {
    |                                ^^^^^^^^^^^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
    = note: `#[warn(bare_trait_objects)]` on by default
help: if this is a dyn-compatible trait, use `dyn`
    |
221 |     fn cause(&self) -> Option<&dyn (::std::error::Error)> {
    |                                +++++                   +

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/float.rs:98:25
    |
98  |                 unsafe{ mem::transmute(self | exponent_bits) }
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `f32::from_bits(self | exponent_bits)`
...
149 | float_impls! { f32, u32, f32, u32, 23, 127 }
    | -------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unnecessary_transmutes)]` on by default
    = note: this warning originates in the macro `float_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/float.rs:98:25
    |
98  |                 unsafe{ mem::transmute(self | exponent_bits) }
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `f64::from_bits(self | exponent_bits)`
...
150 | float_impls! { f64, u64, f64, u64, 52, 1023 }
    | --------------------------------------------- in this macro invocation
    |
    = note: this warning originates in the macro `float_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:311:26
    |
311 |                 unsafe { ::core::mem::transmute(self) }
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `f32::to_bits(self)`
...
348 | scalar_float_impl!(f32, u32);
    | ---------------------------- in this macro invocation
    |
    = note: this warning originates in the macro `scalar_float_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:317:26
    |
317 |                 unsafe { ::core::mem::transmute(v) }
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `f32::from_bits(v)`
...
348 | scalar_float_impl!(f32, u32);
    | ---------------------------- in this macro invocation
    |
    = note: this warning originates in the macro `scalar_float_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:311:26
    |
311 |                 unsafe { ::core::mem::transmute(self) }
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `f64::to_bits(self)`
...
349 | scalar_float_impl!(f64, u64);
    | ---------------------------- in this macro invocation
    |
    = note: this warning originates in the macro `scalar_float_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:317:26
    |
317 |                 unsafe { ::core::mem::transmute(v) }
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `f64::from_bits(v)`
...
349 | scalar_float_impl!(f64, u64);
    | ---------------------------- in this macro invocation
    |
    = note: this warning originates in the macro `scalar_float_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: trait `Float` is never used
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:251:18
    |
251 | pub(crate) trait Float : Sized {
    |                  ^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated items `lanes`, `extract`, and `replace` are never used
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:264:8
    |
262 | pub(crate) trait FloatAsSIMD : Sized {
    |                  ----------- associated items in this trait
263 |     #[inline(always)]
264 |     fn lanes() -> usize { 1 }
    |        ^^^^^
...
268 |     fn extract(self, index: usize) -> Self { debug_assert_eq!(index, 0); self }
    |        ^^^^^^^
269 |     #[inline(always)]
270 |     fn replace(self, index: usize, new_value: Self) -> Self { debug_assert_eq!(index, 0); new_value }
    |        ^^^^^^^

warning: method `all` is never used
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.6.5/src/distributions/utils.rs:275:8
    |
273 | pub(crate) trait BoolAsSIMD : Sized {
    |                  ---------- method in this trait
274 |     fn any(self) -> bool;
275 |     fn all(self) -> bool;
    |        ^^^

       Fresh syn v1.0.109
warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:254:13
    |
254 | #![cfg_attr(doc_cfg, feature(doc_cfg))]
    |             ^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:430:12
    |
430 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:434:12
    |
434 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:455:12
    |
455 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:804:12
    |
804 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:867:12
    |
867 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "proc-macro"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:887:12
    |
887 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:916:12
    |
916 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/group.rs:136:12
    |
136 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/group.rs:214:12
    |
214 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/group.rs:269:12
    |
269 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:561:12
    |
561 | #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:569:12
    |
569 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_omit_await_from_token_macro`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:881:11
    |
881 | #[cfg(not(syn_omit_await_from_token_macro))]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_omit_await_from_token_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_omit_await_from_token_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_omit_await_from_token_macro`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:883:7
    |
883 | #[cfg(syn_omit_await_from_token_macro)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_omit_await_from_token_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_omit_await_from_token_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:394:24
    |
394 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:398:24
    |
398 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:406:24
    |
406 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:414:24
    |
414 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:418:24
    |
418 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:426:24
    |
426 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:271:24
    |
271 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:275:24
    |
275 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:283:24
    |
283 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:291:24
    |
291 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:295:24
    |
295 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:303:24
    |
303 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:309:24
    |
309 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:317:24
    |
317 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:444:24
    |
444 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:452:24
    |
452 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:394:24
    |
394 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:398:24
    |
398 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:406:24
    |
406 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:414:24
    |
414 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:418:24
    |
418 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:426:24
    |
426 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:503:24
    |
503 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
756 | / define_delimiters! {
757 | |     "{"           pub struct Brace        /// `{...}`
758 | |     "["           pub struct Bracket      /// `[...]`
759 | |     "("           pub struct Paren        /// `(...)`
760 | |     " "           pub struct Group        /// None-delimited group
761 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:507:24
    |
507 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
756 | / define_delimiters! {
757 | |     "{"           pub struct Brace        /// `{...}`
758 | |     "["           pub struct Bracket      /// `[...]`
759 | |     "("           pub struct Paren        /// `(...)`
760 | |     " "           pub struct Group        /// None-delimited group
761 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:515:24
    |
515 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
756 | / define_delimiters! {
757 | |     "{"           pub struct Brace        /// `{...}`
758 | |     "["           pub struct Bracket      /// `[...]`
759 | |     "("           pub struct Paren        /// `(...)`
760 | |     " "           pub struct Group        /// None-delimited group
761 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:523:24
    |
523 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
756 | / define_delimiters! {
757 | |     "{"           pub struct Brace        /// `{...}`
758 | |     "["           pub struct Bracket      /// `[...]`
759 | |     "("           pub struct Paren        /// `(...)`
760 | |     " "           pub struct Group        /// None-delimited group
761 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:527:24
    |
527 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
756 | / define_delimiters! {
757 | |     "{"           pub struct Brace        /// `{...}`
758 | |     "["           pub struct Bracket      /// `[...]`
759 | |     "("           pub struct Paren        /// `(...)`
760 | |     " "           pub struct Group        /// None-delimited group
761 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:535:24
    |
535 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                          ^^^^^^^
...
756 | / define_delimiters! {
757 | |     "{"           pub struct Brace        /// `{...}`
758 | |     "["           pub struct Bracket      /// `[...]`
759 | |     "("           pub struct Paren        /// `(...)`
760 | |     " "           pub struct Group        /// None-delimited group
761 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ident.rs:38:12
   |
38 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:463:12
    |
463 | #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:148:16
    |
148 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:329:16
    |
329 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:360:16
    |
360 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:336:1
    |
336 | / ast_enum_of_structs! {
337 | |     /// Content of a compile-time structured attribute.
338 | |     ///
339 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
370 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:377:16
    |
377 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:390:16
    |
390 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:417:16
    |
417 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:412:1
    |
412 | / ast_enum_of_structs! {
413 | |     /// Element of a compile-time attribute list.
414 | |     ///
415 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
426 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:165:16
    |
165 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:213:16
    |
213 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:223:16
    |
223 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:237:16
    |
237 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:251:16
    |
251 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:557:16
    |
557 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:565:16
    |
565 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:573:16
    |
573 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:581:16
    |
581 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:630:16
    |
630 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:644:16
    |
644 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:654:16
    |
654 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:9:16
  |
9 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:36:16
   |
36 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:25:1
    |
25  | / ast_enum_of_structs! {
26  | |     /// Data stored within an enum variant or struct.
27  | |     ///
28  | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
48  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:56:16
   |
56 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:68:16
   |
68 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:153:16
    |
153 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:185:16
    |
185 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:173:1
    |
173 | / ast_enum_of_structs! {
174 | |     /// The visibility level of an item: inherited or `pub` or
175 | |     /// `pub(restricted)`.
176 | |     ///
...   |
200 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:207:16
    |
207 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:218:16
    |
218 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:230:16
    |
230 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:246:16
    |
246 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:275:16
    |
275 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:286:16
    |
286 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:327:16
    |
327 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:299:20
    |
299 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:315:20
    |
315 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:423:16
    |
423 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:436:16
    |
436 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:445:16
    |
445 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:454:16
    |
454 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:467:16
    |
467 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:474:16
    |
474 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:481:16
    |
481 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:89:16
   |
89 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:90:20
   |
90 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
   |                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:14:1
    |
14  | / ast_enum_of_structs! {
15  | |     /// A Rust expression.
16  | |     ///
17  | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
250 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:256:16
    |
256 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:268:16
    |
268 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:281:16
    |
281 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:294:16
    |
294 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:307:16
    |
307 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:321:16
    |
321 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:334:16
    |
334 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:346:16
    |
346 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:359:16
    |
359 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:373:16
    |
373 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:387:16
    |
387 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:400:16
    |
400 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:418:16
    |
418 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:431:16
    |
431 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:444:16
    |
444 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:464:16
    |
464 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:480:16
    |
480 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:495:16
    |
495 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:508:16
    |
508 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:523:16
    |
523 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:534:16
    |
534 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:547:16
    |
547 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:558:16
    |
558 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:572:16
    |
572 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:588:16
    |
588 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:604:16
    |
604 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:616:16
    |
616 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:629:16
    |
629 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:643:16
    |
643 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:657:16
    |
657 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:672:16
    |
672 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:687:16
    |
687 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:699:16
    |
699 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:711:16
    |
711 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:723:16
    |
723 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:737:16
    |
737 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:749:16
    |
749 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:761:16
    |
761 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:775:16
    |
775 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:850:16
    |
850 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:920:16
    |
920 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:246:15
    |
246 |         #[cfg(syn_no_non_exhaustive)]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:784:40
    |
784 |     #[cfg(all(feature = "parsing", not(syn_no_const_vec_new)))]
    |                                        ^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:1159:16
     |
1159 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2063:16
     |
2063 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2818:16
     |
2818 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2832:16
     |
2832 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2879:16
     |
2879 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2905:23
     |
2905 |             #[cfg(not(syn_no_const_vec_new))]
     |                       ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2907:19
     |
2907 |             #[cfg(syn_no_const_vec_new)]
     |                   ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3008:16
     |
3008 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3072:16
     |
3072 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3082:16
     |
3082 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3091:16
     |
3091 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3099:16
     |
3099 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3338:16
     |
3338 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3348:16
     |
3348 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3358:16
     |
3358 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3367:16
     |
3367 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3400:16
     |
3400 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3501:16
     |
3501 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:296:5
    |
296 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:307:5
    |
307 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:318:5
    |
318 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:14:16
   |
14 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:35:16
   |
35 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:23:1
    |
23  | / ast_enum_of_structs! {
24  | |     /// A generic type parameter, lifetime, or const generic: `T: Into<String>`,
25  | |     /// `'a: 'b`, `const LEN: usize`.
26  | |     ///
...   |
46  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:53:16
   |
53 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:69:16
   |
69 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:83:16
   |
83 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:363:20
    |
363 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
404 | generics_wrapper_impls!(ImplGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:371:20
    |
371 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
404 | generics_wrapper_impls!(ImplGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:382:20
    |
382 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
404 | generics_wrapper_impls!(ImplGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:386:20
    |
386 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
404 | generics_wrapper_impls!(ImplGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:394:20
    |
394 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
404 | generics_wrapper_impls!(ImplGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:363:20
    |
363 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
406 | generics_wrapper_impls!(TypeGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:371:20
    |
371 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
406 | generics_wrapper_impls!(TypeGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:382:20
    |
382 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
406 | generics_wrapper_impls!(TypeGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:386:20
    |
386 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
406 | generics_wrapper_impls!(TypeGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:394:20
    |
394 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
406 | generics_wrapper_impls!(TypeGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:363:20
    |
363 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
408 | generics_wrapper_impls!(Turbofish);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:371:20
    |
371 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
408 | generics_wrapper_impls!(Turbofish);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:382:20
    |
382 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
408 | generics_wrapper_impls!(Turbofish);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:386:20
    |
386 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
408 | generics_wrapper_impls!(Turbofish);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:394:20
    |
394 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
408 | generics_wrapper_impls!(Turbofish);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:426:16
    |
426 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:475:16
    |
475 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:470:1
    |
470 | / ast_enum_of_structs! {
471 | |     /// A trait or lifetime used as a bound on a type parameter.
472 | |     ///
473 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
480 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:487:16
    |
487 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:504:16
    |
504 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:517:16
    |
517 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:535:16
    |
535 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:524:1
    |
524 | / ast_enum_of_structs! {
525 | |     /// A single predicate in a `where` clause: `T: Deserialize<'de>`.
526 | |     ///
527 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
546 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:553:16
    |
553 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:570:16
    |
570 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:583:16
    |
583 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:347:9
    |
347 |         doc_cfg,
    |         ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:597:16
    |
597 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:660:16
    |
660 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:687:16
    |
687 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:725:16
    |
725 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:747:16
    |
747 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:758:16
    |
758 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:812:16
    |
812 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:856:16
    |
856 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:905:16
    |
905 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:916:16
    |
916 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:940:16
    |
940 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:971:16
    |
971 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:982:16
    |
982 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:1057:16
     |
1057 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:1207:16
     |
1207 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:1217:16
     |
1217 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:1229:16
     |
1229 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:1268:16
     |
1268 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:1300:16
     |
1300 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:1310:16
     |
1310 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:1325:16
     |
1325 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:1335:16
     |
1335 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:1345:16
     |
1345 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/generics.rs:1354:16
     |
1354 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lifetime.rs:127:16
    |
127 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lifetime.rs:145:16
    |
145 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:629:12
    |
629 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:640:12
    |
640 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:652:12
    |
652 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:14:1
    |
14  | / ast_enum_of_structs! {
15  | |     /// A Rust literal such as a string or integer or boolean.
16  | |     ///
17  | |     /// # Syntax tree enum
...   |
49  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
703 | lit_extra_traits!(LitStr);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:676:20
    |
676 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
703 | lit_extra_traits!(LitStr);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:684:20
    |
684 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
703 | lit_extra_traits!(LitStr);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
704 | lit_extra_traits!(LitByteStr);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:676:20
    |
676 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
704 | lit_extra_traits!(LitByteStr);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:684:20
    |
684 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
704 | lit_extra_traits!(LitByteStr);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
705 | lit_extra_traits!(LitByte);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:676:20
    |
676 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
705 | lit_extra_traits!(LitByte);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:684:20
    |
684 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
705 | lit_extra_traits!(LitByte);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
706 | lit_extra_traits!(LitChar);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:676:20
    |
676 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
706 | lit_extra_traits!(LitChar);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:684:20
    |
684 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
706 | lit_extra_traits!(LitChar);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
707 | lit_extra_traits!(LitInt);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:676:20
    |
676 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
707 | lit_extra_traits!(LitInt);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:684:20
    |
684 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
707 | lit_extra_traits!(LitInt);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
708 | lit_extra_traits!(LitFloat);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:676:20
    |
676 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
708 | lit_extra_traits!(LitFloat);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:684:20
    |
684 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                    ^^^^^^^
...
708 | lit_extra_traits!(LitFloat);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:170:16
    |
170 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:200:16
    |
200 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:557:16
    |
557 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:567:16
    |
567 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:577:16
    |
577 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:587:16
    |
587 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:597:16
    |
597 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:607:16
    |
607 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:617:16
    |
617 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:744:16
    |
744 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:816:16
    |
816 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:827:16
    |
827 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:838:16
    |
838 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:849:16
    |
849 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:860:16
    |
860 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:871:16
    |
871 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:882:16
    |
882 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:900:16
    |
900 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:907:16
    |
907 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:914:16
    |
914 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:921:16
    |
921 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:928:16
    |
928 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:935:16
    |
935 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:942:16
    |
942 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_negative_literal_parse`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lit.rs:1568:15
     |
1568 |         #[cfg(syn_no_negative_literal_parse)]
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_negative_literal_parse)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_negative_literal_parse)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/mac.rs:15:16
   |
15 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/mac.rs:29:16
   |
29 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/mac.rs:137:16
    |
137 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/mac.rs:145:16
    |
145 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/mac.rs:177:16
    |
177 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/mac.rs:201:16
    |
201 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/derive.rs:8:16
  |
8 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/derive.rs:37:16
   |
37 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/derive.rs:57:16
   |
57 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/derive.rs:70:16
   |
70 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/derive.rs:83:16
   |
83 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/derive.rs:95:16
   |
95 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/derive.rs:231:16
    |
231 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/op.rs:6:16
  |
6 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/op.rs:72:16
   |
72 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/op.rs:130:16
    |
130 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/op.rs:165:16
    |
165 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/op.rs:188:16
    |
188 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/op.rs:224:16
    |
224 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:16:16
   |
16 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:17:20
   |
17 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
   |                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:5:1
    |
5   | / ast_enum_of_structs! {
6   | |     /// The possible types that a Rust value could have.
7   | |     ///
8   | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
89  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:96:16
   |
96 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:110:16
    |
110 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:128:16
    |
128 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:141:16
    |
141 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:153:16
    |
153 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:164:16
    |
164 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:175:16
    |
175 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:186:16
    |
186 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:199:16
    |
199 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:211:16
    |
211 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:225:16
    |
225 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:239:16
    |
239 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:252:16
    |
252 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:264:16
    |
264 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:276:16
    |
276 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:288:16
    |
288 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:311:16
    |
311 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:323:16
    |
323 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:85:15
   |
85 |         #[cfg(syn_no_non_exhaustive)]
   |               ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:342:16
    |
342 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:656:16
    |
656 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:667:16
    |
667 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:680:16
    |
680 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:703:16
    |
703 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:716:16
    |
716 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:777:16
    |
777 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:786:16
    |
786 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:795:16
    |
795 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:828:16
    |
828 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:837:16
    |
837 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:887:16
    |
887 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:895:16
    |
895 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:949:16
    |
949 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:992:16
    |
992 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1003:16
     |
1003 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1024:16
     |
1024 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1098:16
     |
1098 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1108:16
     |
1108 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:357:20
    |
357 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:869:20
    |
869 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:904:20
    |
904 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:958:20
    |
958 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1128:16
     |
1128 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1137:16
     |
1137 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1148:16
     |
1148 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1162:16
     |
1162 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1172:16
     |
1172 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1193:16
     |
1193 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1200:16
     |
1200 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1209:16
     |
1209 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1216:16
     |
1216 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1224:16
     |
1224 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1232:16
     |
1232 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1241:16
     |
1241 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1250:16
     |
1250 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1257:16
     |
1257 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1264:16
     |
1264 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1277:16
     |
1277 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1289:16
     |
1289 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ty.rs:1297:16
     |
1297 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:9:16
  |
9 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:35:16
   |
35 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:67:16
   |
67 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:105:16
    |
105 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:130:16
    |
130 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:144:16
    |
144 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:157:16
    |
157 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:171:16
    |
171 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:201:16
    |
201 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:218:16
    |
218 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:225:16
    |
225 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:358:16
    |
358 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:385:16
    |
385 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:397:16
    |
397 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:430:16
    |
430 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:505:20
    |
505 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:569:20
    |
569 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:591:20
    |
591 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:693:16
    |
693 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:701:16
    |
701 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:709:16
    |
709 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:724:16
    |
724 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:752:16
    |
752 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:793:16
    |
793 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:802:16
    |
802 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/path.rs:811:16
    |
811 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:371:12
    |
371 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:386:12
    |
386 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:395:12
    |
395 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:408:12
    |
408 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:422:12
    |
422 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:1012:12
     |
1012 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:54:15
   |
54 |     #[cfg(not(syn_no_const_vec_new))]
   |               ^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:63:11
   |
63 |     #[cfg(syn_no_const_vec_new)]
   |           ^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:267:16
    |
267 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:288:16
    |
288 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:325:16
    |
325 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:346:16
    |
346 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:1060:16
     |
1060 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/punctuated.rs:1071:16
     |
1071 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse_quote.rs:68:12
   |
68 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse_quote.rs:100:12
    |
100 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse_macro_input.rs:107:12
    |
107 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "proc-macro"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:7:12
  |
7 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
  |            ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:17:12
   |
17 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:43:12
   |
43 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:46:12
   |
46 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:53:12
   |
53 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:66:12
   |
66 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:77:12
   |
77 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:80:12
   |
80 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:87:12
   |
87 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:108:12
    |
108 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:120:12
    |
120 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:135:12
    |
135 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:146:12
    |
146 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:157:12
    |
157 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:168:12
    |
168 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:179:12
    |
179 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:189:12
    |
189 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:202:12
    |
202 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:341:12
    |
341 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:387:12
    |
387 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:399:12
    |
399 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:439:12
    |
439 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:490:12
    |
490 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:515:12
    |
515 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:575:12
    |
575 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:586:12
    |
586 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:705:12
    |
705 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:751:12
    |
751 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:788:12
    |
788 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:799:12
    |
799 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:809:12
    |
809 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:907:12
    |
907 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:930:12
    |
930 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:941:12
    |
941 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1027:12
     |
1027 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1313:12
     |
1313 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1324:12
     |
1324 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1339:12
     |
1339 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1362:12
     |
1362 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1374:12
     |
1374 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1385:12
     |
1385 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1395:12
     |
1395 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1406:12
     |
1406 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1417:12
     |
1417 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1440:12
     |
1440 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1450:12
     |
1450 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1655:12
     |
1655 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1665:12
     |
1665 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1678:12
     |
1678 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1688:12
     |
1688 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1699:12
     |
1699 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1710:12
     |
1710 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1722:12
     |
1722 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1757:12
     |
1757 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1798:12
     |
1798 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1810:12
     |
1810 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1813:12
     |
1813 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1889:12
     |
1889 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1914:12
     |
1914 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1926:12
     |
1926 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1942:12
     |
1942 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1952:12
     |
1952 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1962:12
     |
1962 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1971:12
     |
1971 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1978:12
     |
1978 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1987:12
     |
1987 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2001:12
     |
2001 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2011:12
     |
2011 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2021:12
     |
2021 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2031:12
     |
2031 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2043:12
     |
2043 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2055:12
     |
2055 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2065:12
     |
2065 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2075:12
     |
2075 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2085:12
     |
2085 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2088:12
     |
2088 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2158:12
     |
2158 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2168:12
     |
2168 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2180:12
     |
2180 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2189:12
     |
2189 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2198:12
     |
2198 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2210:12
     |
2210 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2222:12
     |
2222 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:2232:12
     |
2232 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:276:23
    |
276 |             #[cfg(any(syn_no_non_exhaustive, not(feature = "full")))]
    |                       ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/clone.rs:1908:19
     |
1908 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:8:12
  |
8 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
  |            ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:11:12
   |
11 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:18:12
   |
18 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:21:12
   |
21 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:39:12
   |
39 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:42:12
   |
42 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:53:12
   |
53 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:56:12
   |
56 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:64:12
   |
64 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:67:12
   |
67 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:74:12
   |
74 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:77:12
   |
77 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:114:12
    |
114 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:117:12
    |
117 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:134:12
    |
134 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:137:12
    |
137 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:144:12
    |
144 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:147:12
    |
147 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:155:12
    |
155 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:158:12
    |
158 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:165:12
    |
165 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:168:12
    |
168 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:180:12
    |
180 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:183:12
    |
183 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:190:12
    |
190 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:193:12
    |
193 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:200:12
    |
200 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:203:12
    |
203 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:210:12
    |
210 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:213:12
    |
213 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:221:12
    |
221 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:224:12
    |
224 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:357:12
    |
357 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:360:12
    |
360 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:399:12
    |
399 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:402:12
    |
402 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:409:12
    |
409 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:412:12
    |
412 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:442:12
    |
442 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:445:12
    |
445 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:486:12
    |
486 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:489:12
    |
489 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:506:12
    |
506 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:509:12
    |
509 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:558:12
    |
558 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:561:12
    |
561 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:568:12
    |
568 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:571:12
    |
571 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:672:12
    |
672 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:675:12
    |
675 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:713:12
    |
713 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:716:12
    |
716 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:746:12
    |
746 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:749:12
    |
749 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:761:12
    |
761 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:764:12
    |
764 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:771:12
    |
771 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:774:12
    |
774 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:868:12
    |
868 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:871:12
    |
871 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:914:12
    |
914 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:917:12
    |
917 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:931:12
    |
931 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:934:12
    |
934 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1231:12
     |
1231 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1234:12
     |
1234 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1241:12
     |
1241 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1243:12
     |
1243 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1261:12
     |
1261 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1263:12
     |
1263 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1269:12
     |
1269 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1271:12
     |
1271 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1273:12
     |
1273 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1275:12
     |
1275 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1277:12
     |
1277 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1279:12
     |
1279 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1292:12
     |
1292 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1295:12
     |
1295 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1303:12
     |
1303 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1306:12
     |
1306 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1318:12
     |
1318 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1321:12
     |
1321 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1333:12
     |
1333 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1336:12
     |
1336 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1343:12
     |
1343 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1346:12
     |
1346 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1363:12
     |
1363 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1366:12
     |
1366 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1377:12
     |
1377 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1380:12
     |
1380 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1573:12
     |
1573 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1576:12
     |
1576 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1583:12
     |
1583 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1586:12
     |
1586 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1604:12
     |
1604 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1607:12
     |
1607 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1614:12
     |
1614 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1617:12
     |
1617 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1624:12
     |
1624 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1627:12
     |
1627 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1634:12
     |
1634 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1637:12
     |
1637 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1645:12
     |
1645 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1648:12
     |
1648 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1681:12
     |
1681 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1684:12
     |
1684 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1725:12
     |
1725 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1728:12
     |
1728 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1736:12
     |
1736 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1739:12
     |
1739 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1814:12
     |
1814 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1817:12
     |
1817 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1843:12
     |
1843 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1846:12
     |
1846 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1853:12
     |
1853 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1856:12
     |
1856 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1865:12
     |
1865 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1868:12
     |
1868 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1875:12
     |
1875 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1878:12
     |
1878 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1885:12
     |
1885 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1888:12
     |
1888 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1895:12
     |
1895 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1898:12
     |
1898 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1905:12
     |
1905 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1908:12
     |
1908 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1915:12
     |
1915 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1918:12
     |
1918 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1927:12
     |
1927 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1930:12
     |
1930 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1945:12
     |
1945 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1948:12
     |
1948 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1955:12
     |
1955 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1958:12
     |
1958 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1965:12
     |
1965 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1968:12
     |
1968 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1976:12
     |
1976 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1979:12
     |
1979 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1987:12
     |
1987 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1990:12
     |
1990 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:1997:12
     |
1997 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2000:12
     |
2000 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2007:12
     |
2007 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2010:12
     |
2010 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2017:12
     |
2017 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2020:12
     |
2020 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2099:12
     |
2099 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2102:12
     |
2102 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2109:12
     |
2109 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2112:12
     |
2112 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2120:12
     |
2120 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2123:12
     |
2123 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2130:12
     |
2130 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2133:12
     |
2133 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2140:12
     |
2140 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2143:12
     |
2143 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2150:12
     |
2150 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2153:12
     |
2153 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2168:12
     |
2168 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2171:12
     |
2171 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2178:12
     |
2178 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/eq.rs:2181:12
     |
2181 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:9:12
  |
9 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
  |            ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:19:12
   |
19 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:44:12
   |
44 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:61:12
   |
61 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:73:12
   |
73 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:85:12
   |
85 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:180:12
    |
180 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:201:12
    |
201 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:211:12
    |
211 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:225:12
    |
225 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:236:12
    |
236 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:259:12
    |
259 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:269:12
    |
269 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:280:12
    |
280 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:290:12
    |
290 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:304:12
    |
304 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:566:12
    |
566 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:614:12
    |
614 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:626:12
    |
626 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:665:12
    |
665 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:715:12
    |
715 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:739:12
    |
739 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:799:12
    |
799 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:810:12
    |
810 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:929:12
    |
929 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:976:12
    |
976 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1016:12
     |
1016 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1038:12
     |
1038 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1048:12
     |
1048 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1172:12
     |
1172 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1222:12
     |
1222 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1245:12
     |
1245 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1663:12
     |
1663 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1675:12
     |
1675 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1717:12
     |
1717 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1739:12
     |
1739 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1751:12
     |
1751 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1771:12
     |
1771 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1794:12
     |
1794 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1805:12
     |
1805 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1826:12
     |
1826 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:1845:12
     |
1845 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2108:12
     |
2108 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2119:12
     |
2119 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2141:12
     |
2141 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2152:12
     |
2152 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2163:12
     |
2163 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2174:12
     |
2174 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2186:12
     |
2186 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2227:12
     |
2227 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2290:12
     |
2290 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2303:12
     |
2303 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2406:12
     |
2406 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2479:12
     |
2479 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2490:12
     |
2490 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2505:12
     |
2505 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2515:12
     |
2515 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2525:12
     |
2525 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2533:12
     |
2533 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2543:12
     |
2543 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2551:12
     |
2551 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2566:12
     |
2566 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2585:12
     |
2585 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2595:12
     |
2595 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2606:12
     |
2606 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2618:12
     |
2618 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2630:12
     |
2630 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2640:12
     |
2640 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2651:12
     |
2651 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2661:12
     |
2661 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2762:12
     |
2762 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2772:12
     |
2772 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2785:12
     |
2785 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2793:12
     |
2793 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2801:12
     |
2801 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2812:12
     |
2812 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2838:12
     |
2838 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2848:12
     |
2848 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:501:23
    |
501 |             #[cfg(any(syn_no_non_exhaustive, not(feature = "full")))]
    |                       ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/hash.rs:2473:19
     |
2473 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:7:12
  |
7 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
  |            ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:17:12
   |
17 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:43:12
   |
43 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:57:12
   |
57 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:70:12
   |
70 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:81:12
   |
81 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:229:12
    |
229 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:250:12
    |
250 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:262:12
    |
262 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:277:12
    |
277 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:288:12
    |
288 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:311:12
    |
311 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:322:12
    |
322 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:333:12
    |
333 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:343:12
    |
343 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:356:12
    |
356 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:655:12
    |
655 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:701:12
    |
701 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:713:12
    |
713 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:753:12
    |
753 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:804:12
    |
804 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:829:12
    |
829 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:889:12
    |
889 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:900:12
    |
900 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1019:12
     |
1019 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1065:12
     |
1065 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1102:12
     |
1102 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1121:12
     |
1121 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1131:12
     |
1131 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1257:12
     |
1257 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1308:12
     |
1308 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1331:12
     |
1331 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1437:12
     |
1437 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1790:12
     |
1790 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1800:12
     |
1800 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1811:12
     |
1811 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1872:12
     |
1872 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1884:12
     |
1884 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1907:12
     |
1907 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1925:12
     |
1925 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1948:12
     |
1948 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1959:12
     |
1959 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:1982:12
     |
1982 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2000:12
     |
2000 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2269:12
     |
2269 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2279:12
     |
2279 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2298:12
     |
2298 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2308:12
     |
2308 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2319:12
     |
2319 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2330:12
     |
2330 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2342:12
     |
2342 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2385:12
     |
2385 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2448:12
     |
2448 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2460:12
     |
2460 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2563:12
     |
2563 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2648:12
     |
2648 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2660:12
     |
2660 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2676:12
     |
2676 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2686:12
     |
2686 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2696:12
     |
2696 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2705:12
     |
2705 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2714:12
     |
2714 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2723:12
     |
2723 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2737:12
     |
2737 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2755:12
     |
2755 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2765:12
     |
2765 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2775:12
     |
2775 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2787:12
     |
2787 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2799:12
     |
2799 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2809:12
     |
2809 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2819:12
     |
2819 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2829:12
     |
2829 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2935:12
     |
2935 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2945:12
     |
2945 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2957:12
     |
2957 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2966:12
     |
2966 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2975:12
     |
2975 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2987:12
     |
2987 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:3011:12
     |
3011 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:3021:12
     |
3021 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:590:23
    |
590 |             #[cfg(any(syn_no_non_exhaustive, not(feature = "full")))]
    |                       ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/gen/debug.rs:2642:19
     |
2642 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `crate::gen::*`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:787:9
    |
787 | pub use crate::gen::*;
    |         ^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse.rs:1065:12
     |
1065 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse.rs:1072:12
     |
1072 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse.rs:1083:12
     |
1083 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse.rs:1090:12
     |
1090 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse.rs:1100:12
     |
1100 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse.rs:1116:12
     |
1116 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse.rs:1126:12
     |
1126 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse.rs:1291:12
     |
1291 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse.rs:1299:12
     |
1299 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse.rs:1303:12
     |
1303 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/parse.rs:1311:12
     |
1311 | #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: method `inner` is never used
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:470:8
    |
466 | pub trait FilterAttrs<'a> {
    |           ----------- method in this trait
...
470 |     fn inner(self) -> Self::Ret;
    |        ^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field `0` is never read
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:1110:28
     |
1110 |     pub struct AllowStruct(bool);
     |                ----------- ^^^^
     |                |
     |                field in this struct
     |
     = help: consider removing this field

warning: `proc-macro2` (build script) generated 1 warning
warning: `winnow` (lib) generated 26 warnings
warning: `crossbeam-utils` (lib) generated 23 warnings (23 duplicates)
warning: `rand` (lib) generated 42 warnings
warning: `syn` (lib) generated 1081 warnings (270 duplicates)
       Fresh typenum v1.17.0
       Fresh num-traits v0.2.19
warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/lib.rs:38:13
   |
38 | #![cfg_attr(doc_cfg, feature(doc_cfg))]
   |             ^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/error.rs:50:16
   |
50 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "std")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/error.rs:64:16
   |
64 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "std")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/error.rs:75:16
   |
75 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "std")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/os.rs:46:12
   |
46 | #[cfg_attr(doc_cfg, doc(cfg(feature = "getrandom")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/lib.rs:411:16
    |
411 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "getrandom")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `typenum` (lib) generated 6 warnings (6 duplicates)
warning: `num-traits` (lib) generated 4 warnings (4 duplicates)
warning: `rand_core` (lib) generated 6 warnings
       Fresh unicode-xid v0.1.0
       Fresh rustls-pki-types v1.11.0
       Fresh byteorder v1.5.0
       Fresh pin-project-lite v0.2.14
       Fresh fastrand v2.1.0
warning: unexpected `cfg` condition value: `128`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fastrand-2.1.0/src/lib.rs:622:11
    |
622 |     #[cfg(target_pointer_width = "128")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

       Fresh generic-array v0.14.7
       Fresh proc-macro2 v0.4.30
warning: unexpected `cfg` condition name: `proc_macro_span`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:83:17
   |
83 | #![cfg_attr(any(proc_macro_span, super_unstable), feature(proc_macro_span))]
   |                 ^^^^^^^^^^^^^^^ help: there is a config with a similar name: `proc_macro`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(proc_macro_span)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(proc_macro_span)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `super_unstable`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:83:34
   |
83 | #![cfg_attr(any(proc_macro_span, super_unstable), feature(proc_macro_span))]
   |                                  ^^^^^^^^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:84:13
   |
84 | #![cfg_attr(super_unstable, feature(proc_macro_raw_ident, proc_macro_def_site))]
   |             ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `use_proc_macro`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:86:7
   |
86 | #[cfg(use_proc_macro)]
   |       ^^^^^^^^^^^^^^ help: there is a config with a similar name: `proc_macro`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(use_proc_macro)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(use_proc_macro)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:95:7
   |
95 | #[cfg(procmacro2_semver_exempt)]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `wrap_proc_macro`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:104:11
    |
104 | #[cfg(not(wrap_proc_macro))]
    |           ^^^^^^^^^^^^^^^ help: there is a config with a similar name: `proc_macro`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(wrap_proc_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(wrap_proc_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `wrap_proc_macro`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:107:7
    |
107 | #[cfg(wrap_proc_macro)]
    |       ^^^^^^^^^^^^^^^ help: there is a config with a similar name: `proc_macro`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(wrap_proc_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(wrap_proc_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `use_proc_macro`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:188:7
    |
188 | #[cfg(use_proc_macro)]
    |       ^^^^^^^^^^^^^^ help: there is a config with a similar name: `proc_macro`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(use_proc_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(use_proc_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `use_proc_macro`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:195:7
    |
195 | #[cfg(use_proc_macro)]
    |       ^^^^^^^^^^^^^^ help: there is a config with a similar name: `proc_macro`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(use_proc_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(use_proc_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:253:7
    |
253 | #[cfg(procmacro2_semver_exempt)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:260:7
    |
260 | #[cfg(procmacro2_semver_exempt)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:293:7
    |
293 | #[cfg(procmacro2_semver_exempt)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:303:7
    |
303 | #[cfg(span_locations)]
    |       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/strnom.rs:12:11
   |
12 |     #[cfg(span_locations)]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/strnom.rs:17:15
   |
17 |     #[cfg(not(span_locations))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/strnom.rs:23:11
   |
23 |     #[cfg(span_locations)]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `...` range patterns are deprecated
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/strnom.rs:98:24
   |
98 |             b' ' | 0x09...0x0d => {
   |                        ^^^ help: use `..=` for an inclusive range
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
   = note: `#[warn(ellipsis_inclusive_range_patterns)]` on by default

warning: unexpected `cfg` condition name: `span_locations`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1:7
  |
1 | #[cfg(span_locations)]
  |       ^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:3:7
  |
3 | #[cfg(procmacro2_semver_exempt)]
  |       ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:7:7
  |
7 | #[cfg(procmacro2_semver_exempt)]
  |       ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:36:7
   |
36 | #[cfg(span_locations)]
   |       ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:50:11
   |
50 | #[cfg(not(span_locations))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `use_proc_macro`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:120:7
    |
120 | #[cfg(use_proc_macro)]
    |       ^^^^^^^^^^^^^^ help: there is a config with a similar name: `proc_macro`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(use_proc_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(use_proc_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `use_proc_macro`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:130:7
    |
130 | #[cfg(use_proc_macro)]
    |       ^^^^^^^^^^^^^^ help: there is a config with a similar name: `proc_macro`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(use_proc_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(use_proc_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:226:7
    |
226 | #[cfg(span_locations)]
    |       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:252:7
    |
252 | #[cfg(span_locations)]
    |       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:260:7
    |
260 | #[cfg(span_locations)]
    |       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:286:7
    |
286 | #[cfg(span_locations)]
    |       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:297:7
    |
297 | #[cfg(span_locations)]
    |       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:302:7
    |
302 | #[cfg(span_locations)]
    |       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:830:11
    |
830 | #[cfg(not(span_locations))]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:839:7
    |
839 | #[cfg(span_locations)]
    |       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:350:11
    |
350 |     #[cfg(span_locations)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:352:11
    |
352 |     #[cfg(span_locations)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:357:15
    |
357 |     #[cfg(not(span_locations))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:362:11
    |
362 |     #[cfg(span_locations)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:367:11
    |
367 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:372:11
    |
372 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:380:11
    |
380 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:385:11
    |
385 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:396:11
    |
396 |     #[cfg(span_locations)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:405:11
    |
405 |     #[cfg(span_locations)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:414:11
    |
414 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:432:15
    |
432 |         #[cfg(procmacro2_semver_exempt)]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:435:19
    |
435 |         #[cfg(not(procmacro2_semver_exempt))]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:441:13
    |
441 |     if cfg!(procmacro2_semver_exempt) {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:474:11
    |
474 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:479:11
    |
479 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:511:15
    |
511 |         #[cfg(procmacro2_semver_exempt)]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:629:15
    |
629 |     #[cfg(not(procmacro2_semver_exempt))]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:640:11
    |
640 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `u128`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:695:11
    |
695 |     #[cfg(u128)]
    |           ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(u128)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(u128)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `u128`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:714:11
    |
714 |     #[cfg(u128)]
    |           ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(u128)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(u128)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:774:24
    |
774 |                 b'\x20'...b'\x7E' => escaped.push(*b as char),
    |                        ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:801:15
    |
801 |         #[cfg(procmacro2_semver_exempt)]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1176:25
     |
1176 |     next_ch!(chars @ '0'...'7');
     |                         ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1177:25
     |
1177 |     next_ch!(chars @ '0'...'9' | 'a'...'f' | 'A'...'F');
     |                         ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1177:37
     |
1177 |     next_ch!(chars @ '0'...'9' | 'a'...'f' | 'A'...'F');
     |                                     ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1177:49
     |
1177 |     next_ch!(chars @ '0'...'9' | 'a'...'f' | 'A'...'F');
     |                                                 ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1185:26
     |
1185 |     next_ch!(chars @ b'0'...b'9' | b'a'...b'f' | b'A'...b'F');
     |                          ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1185:40
     |
1185 |     next_ch!(chars @ b'0'...b'9' | b'a'...b'f' | b'A'...b'F');
     |                                        ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1185:54
     |
1185 |     next_ch!(chars @ b'0'...b'9' | b'a'...b'f' | b'A'...b'F');
     |                                                      ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1186:26
     |
1186 |     next_ch!(chars @ b'0'...b'9' | b'a'...b'f' | b'A'...b'F');
     |                          ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1186:40
     |
1186 |     next_ch!(chars @ b'0'...b'9' | b'a'...b'f' | b'A'...b'F');
     |                                        ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1186:54
     |
1186 |     next_ch!(chars @ b'0'...b'9' | b'a'...b'f' | b'A'...b'F');
     |                                                      ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1195:25
     |
1195 |     next_ch!(chars @ '0'...'9' | 'a'...'f' | 'A'...'F');
     |                         ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1195:37
     |
1195 |     next_ch!(chars @ '0'...'9' | 'a'...'f' | 'A'...'F');
     |                                     ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1195:49
     |
1195 |     next_ch!(chars @ '0'...'9' | 'a'...'f' | 'A'...'F');
     |                                                 ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1197:37
     |
1197 |         let c = next_ch!(chars @ '0'...'9' | 'a'...'f' | 'A'...'F' | '_' | '}');
     |                                     ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1197:49
     |
1197 |         let c = next_ch!(chars @ '0'...'9' | 'a'...'f' | 'A'...'F' | '_' | '}');
     |                                                 ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1197:61
     |
1197 |         let c = next_ch!(chars @ '0'...'9' | 'a'...'f' | 'A'...'F' | '_' | '}');
     |                                                             ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1226:16
     |
1226 |             '0'...'9' | '_' => {
     |                ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1271:20
     |
1271 |                 '0'...'9' => {
     |                    ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1321:17
     |
1321 |             b'0'...b'9' => (b - b'0') as u64,
     |                 ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1322:17
     |
1322 |             b'a'...b'f' => 10 + (b - b'a') as u64,
     |                 ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1323:17
     |
1323 |             b'A'...b'F' => 10 + (b - b'A') as u64,
     |                 ^^^ help: use `..=` for an inclusive range
     |
     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: elided lifetime has a name
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/fallback.rs:1408:33
     |
1408 | named!(doc_comment_contents -> (&str, bool), alt!(
     |                                 ^ this elided lifetime gets resolved as `'a`
     |
    ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/strnom.rs:162:18
     |
162  |         fn $name<'a>(i: Cursor<'a>) -> $crate::strnom::PResult<'a, $o> {
     |                  -- lifetime `'a` declared here
     |
     = note: `#[warn(elided_named_lifetimes)]` on by default

warning: unexpected `cfg` condition name: `super_unstable`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:4:7
  |
4 | #[cfg(super_unstable)]
  |       ^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:378:7
    |
378 | #[cfg(super_unstable)]
    |       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:384:7
    |
384 | #[cfg(super_unstable)]
    |       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:406:7
    |
406 | #[cfg(super_unstable)]
    |       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:416:11
    |
416 | #[cfg(any(super_unstable, feature = "span-locations"))]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slow_extend`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:203:19
    |
203 |             #[cfg(slow_extend)]
    |                   ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slow_extend)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slow_extend)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slow_extend`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:213:23
    |
213 |             #[cfg(not(slow_extend))]
    |                       ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slow_extend)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slow_extend)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slow_extend`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:237:27
    |
237 |                 #[cfg(not(slow_extend))]
    |                           ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slow_extend)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slow_extend)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slow_extend`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:245:23
    |
245 |                 #[cfg(slow_extend)]
    |                       ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slow_extend)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slow_extend)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slow_extend`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:268:27
    |
268 |                 #[cfg(not(slow_extend))]
    |                           ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slow_extend)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slow_extend)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slow_extend`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:272:23
    |
272 |                 #[cfg(slow_extend)]
    |                       ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slow_extend)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slow_extend)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:437:11
    |
437 |     #[cfg(super_unstable)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:446:11
    |
446 |     #[cfg(super_unstable)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:455:11
    |
455 |     #[cfg(super_unstable)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:471:11
    |
471 |     #[cfg(super_unstable)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:479:15
    |
479 |     #[cfg(any(super_unstable, feature = "span-locations"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:496:15
    |
496 |     #[cfg(any(super_unstable, feature = "span-locations"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:513:11
    |
513 |     #[cfg(super_unstable)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:523:11
    |
523 |     #[cfg(super_unstable)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:620:11
    |
620 |     #[cfg(super_unstable)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `super_unstable`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:628:11
    |
628 |     #[cfg(super_unstable)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(super_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(super_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `u128`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:818:11
    |
818 |     #[cfg(u128)]
    |           ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(u128)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(u128)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `u128`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:837:11
    |
837 |     #[cfg(u128)]
    |           ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(u128)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(u128)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:348:11
    |
348 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:357:11
    |
357 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:366:11
    |
366 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `wrap_proc_macro`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:381:11
    |
381 |     #[cfg(wrap_proc_macro)]
    |           ^^^^^^^^^^^^^^^ help: there is a config with a similar name: `proc_macro`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(wrap_proc_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(wrap_proc_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `wrap_proc_macro`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:387:11
    |
387 |     #[cfg(wrap_proc_macro)]
    |           ^^^^^^^^^^^^^^^ help: there is a config with a similar name: `proc_macro`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(wrap_proc_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(wrap_proc_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:396:11
    |
396 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:404:11
    |
404 |     #[cfg(span_locations)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `span_locations`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:416:11
    |
416 |     #[cfg(span_locations)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(span_locations)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(span_locations)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:430:11
    |
430 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:438:11
    |
438 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:629:11
    |
629 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:640:11
    |
640 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:870:11
    |
870 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `u128`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:1020:11
     |
1020 |     #[cfg(u128)]
     |           ^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(u128)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(u128)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `u128`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/lib.rs:1039:11
     |
1039 |     #[cfg(u128)]
     |           ^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(u128)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(u128)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:3:24
  |
3 | use std::panic::{self, PanicInfo};
  |                        ^^^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:63:30
   |
63 |         type PanicHook = Fn(&PanicInfo) + Sync + Send + 'static;
   |                              ^^^^^^^^^

warning: trait objects without an explicit `dyn` are deprecated
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-0.4.30/src/wrapper.rs:63:26
   |
63 |         type PanicHook = Fn(&PanicInfo) + Sync + Send + 'static;
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
   = note: `#[warn(bare_trait_objects)]` on by default
help: if this is a dyn-compatible trait, use `dyn`
   |
63 |         type PanicHook = dyn Fn(&PanicInfo) + Sync + Send + 'static;
   |                          +++

warning: implicit autoref creates a reference to the dereference of a raw pointer
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-1.3.1/src/header/map.rs:2318:35
     |
2318 |         let entry = unsafe { &mut (*self.map).entries[self.entry] };
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
note: the lint level is defined here
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-1.3.1/src/lib.rs:156:9
     |
156  | #![deny(warnings, missing_docs, missing_debug_implementations)]
     |         ^^^^^^^^
     = note: `#[warn(dangerous_implicit_autorefs)]` implied by `#[warn(warnings)]`
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
     |
2318 |         let entry = unsafe { &mut (&mut (*self.map).entries)[self.entry] };
     |                                   +++++                    +

warning: implicit autoref creates a reference to the dereference of a raw pointer
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-1.3.1/src/header/map.rs:2326:43
     |
2326 |                 let extra = unsafe { &mut (*self.map).extra_values[idx] };
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
     |
2326 |                 let extra = unsafe { &mut (&mut (*self.map).extra_values)[idx] };
     |                                           +++++                         +

warning: implicit autoref creates a reference to the dereference of a raw pointer
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-1.3.1/src/header/map.rs:2966:35
     |
2966 |         let entry = unsafe { &mut (*self.map).entries[self.index] };
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
     |
2966 |         let entry = unsafe { &mut (&mut (*self.map).entries)[self.index] };
     |                                   +++++                    +

warning: implicit autoref creates a reference to the dereference of a raw pointer
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-1.3.1/src/header/map.rs:2986:43
     |
2986 |                 let extra = unsafe { &mut (*self.map).extra_values[idx] };
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
     |
2986 |                 let extra = unsafe { &mut (&mut (*self.map).extra_values)[idx] };
     |                                           +++++                         +

warning: implicit autoref creates a reference to the dereference of a raw pointer
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-1.3.1/src/header/map.rs:3009:35
     |
3009 |         let entry = unsafe { &mut (*self.map).entries[self.index] };
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
     |
3009 |         let entry = unsafe { &mut (&mut (*self.map).entries)[self.index] };
     |                                   +++++                    +

warning: implicit autoref creates a reference to the dereference of a raw pointer
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-1.3.1/src/header/map.rs:3018:43
     |
3018 |                 let extra = unsafe { &mut (*self.map).extra_values[idx] };
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
     |
3018 |                 let extra = unsafe { &mut (&mut (*self.map).extra_values)[idx] };
     |                                           +++++                         +

warning: unexpected `cfg` condition name: `never`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/protobuf-3.7.2/src/lib.rs:102:7
    |
102 | #[cfg(never)]
    |       ^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(never)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(never)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: requested on the command line with `-W unexpected-cfgs`

warning: unexpected `cfg` condition name: `never`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/protobuf-3.7.2/src/lib.rs:105:7
    |
105 | #[cfg(never)]
    |       ^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(never)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(never)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `fastrand` (lib) generated 1 warning
warning: `generic-array` (lib) generated 4 warnings (4 duplicates)
warning: `proc-macro2` (lib) generated 118 warnings
warning: `http` (lib) generated 6 warnings
warning: `protobuf` (lib) generated 2 warnings
       Fresh tempfile v3.10.1
       Fresh phf_generator v0.7.24
       Fresh aho-corasick v1.1.3
warning: method `cmpeq` is never used
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aho-corasick-1.1.3/src/packed/vector.rs:74:15
   |
28 | pub(crate) trait Vector:
   |                  ------ method in this trait
...
74 |     unsafe fn cmpeq(self, vector2: Self) -> Self;
   |               ^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

       Fresh scopeguard v1.2.0
       Fresh smallvec v1.13.2
       Fresh futures-core v0.3.31
       Fresh futures-sink v0.3.31
       Fresh untrusted v0.9.0
       Fresh regex-syntax v0.8.5
warning: `aho-corasick` (lib) generated 1 warning
       Fresh dasp_sample v0.11.0
       Fresh ring v0.17.14
       Fresh lock_api v0.4.12
       Fresh regex-automata v0.4.9
       Fresh parking_lot_core v0.9.10
       Fresh futures-channel v0.3.31
       Fresh phf_codegen v0.7.24
warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:150:9
    |
150 |         try!(write!(w,
    |         ^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:162:9
    |
162 |         try!(write!(w,
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:156:13
    |
156 |             try!(write!(w,
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:167:13
    |
167 |             try!(write!(w,
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:211:9
    |
211 |         try!(write!(w, "{}::Set {{ map: ", self.map.path));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:212:9
    |
212 |         try!(self.map.build(w));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:265:9
    |
265 |         try!(write!(w,
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:277:9
    |
277 |         try!(write!(w,
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:287:9
    |
287 |         try!(write!(w,
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:271:13
    |
271 |             try!(write!(w,
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:282:13
    |
282 |             try!(write!(w,
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:292:13
    |
292 |             try!(write!(w,
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:337:9
    |
337 |         try!(write!(w, "{}::OrderedSet {{ map: ", self.map.path));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_codegen-0.7.24/src/lib.rs:338:9
    |
338 |         try!(self.map.build(w));
    |         ^^^

warning: `lock_api` (lib) generated 7 warnings (7 duplicates)
warning: `parking_lot_core` (lib) generated 2 warnings (2 duplicates)
warning: `phf_codegen` (lib) generated 14 warnings
       Fresh protobuf-parse v3.7.2
       Fresh anyhow v1.0.98
       Fresh slab v0.4.9
       Fresh getrandom v0.3.2
       Fresh quote v0.6.13
warning: unexpected `cfg` condition name: `integer128`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-0.6.13/src/to_tokens.rs:148:7
    |
148 | #[cfg(integer128)]
    |       ^^^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(integer128)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(integer128)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: `slab` (lib) generated 6 warnings (6 duplicates)
warning: `quote` (lib) generated 1 warning
       Fresh pin-project-internal v1.1.5
       Fresh lazy_static v1.5.0
       Fresh pin-utils v0.1.0
       Fresh futures-io v0.3.31
       Fresh futures-task v0.3.31
       Fresh jni-sys v0.3.0
warning: `lazy_static` (lib) generated 1 warning (1 duplicate)
       Fresh ppv-lite86 v0.2.17
warning: unnecessary qualification
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zeroize-1.8.1/src/lib.rs:415:63
    |
415 |             volatile_set((self as *mut Self).cast::<u8>(), 0, mem::size_of::<Self>());
    |                                                               ^^^^^^^^^^^^^^^^^^^^
    |
note: the lint level is defined here
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zeroize-1.8.1/src/lib.rs:7:41
    |
7   | #![warn(missing_docs, rust_2018_idioms, unused_qualifications)]
    |                                         ^^^^^^^^^^^^^^^^^^^^^
help: remove the unnecessary path segments
    |
415 -             volatile_set((self as *mut Self).cast::<u8>(), 0, mem::size_of::<Self>());
415 +             volatile_set((self as *mut Self).cast::<u8>(), 0, size_of::<Self>());
    |

warning: unnecessary qualification
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zeroize-1.8.1/src/lib.rs:460:43
    |
460 |         let size = self.len().checked_mul(mem::size_of::<Z>()).unwrap();
    |                                           ^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
460 -         let size = self.len().checked_mul(mem::size_of::<Z>()).unwrap();
460 +         let size = self.len().checked_mul(size_of::<Z>()).unwrap();
    |

warning: unnecessary qualification
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zeroize-1.8.1/src/lib.rs:840:16
    |
840 |     let size = mem::size_of::<F>();
    |                ^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
840 -     let size = mem::size_of::<F>();
840 +     let size = size_of::<F>();
    |

warning: unexpected `cfg` condition name: `fuzzing`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/miniz_oxide-0.7.4/src/inflate/core.rs:1800:18
     |
1800 |         if !cfg!(fuzzing) {
     |                  ^^^^^^^
     |
     = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fuzzing)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fuzzing)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: `#[warn(unexpected_cfgs)]` on by default

       Fresh futures-util v0.3.31
       Fresh syn v0.15.44
warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/lib.rs:240:13
    |
240 | #![cfg_attr(feature = "cargo-clippy", allow(renamed_and_removed_lints))]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `clone-impls`, `default`, `derive`, `extra-traits`, `fold`, `full`, `parsing`, `printing`, `proc-macro`, `quote`, `visit`, and `visit-mut`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/lib.rs:241:13
    |
241 | #![cfg_attr(feature = "cargo-clippy", deny(clippy, clippy_pedantic))]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `clone-impls`, `default`, `derive`, `extra-traits`, `fold`, `full`, `parsing`, `printing`, `proc-macro`, `quote`, `visit`, and `visit-mut`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/lib.rs:244:5
    |
244 |     feature = "cargo-clippy",
    |     ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `clone-impls`, `default`, `derive`, `extra-traits`, `fold`, `full`, `parsing`, `printing`, `proc-macro`, `quote`, `visit`, and `visit-mut`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/lib.rs:261:5
    |
261 |     feature = "cargo-clippy",
    |     ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `clone-impls`, `default`, `derive`, `extra-traits`, `fold`, `full`, `parsing`, `printing`, `proc-macro`, `quote`, `visit`, and `visit-mut`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/group.rs:80:19
   |
80 |             #[cfg(procmacro2_semver_exempt)]
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/group.rs:82:23
   |
82 |             #[cfg(not(procmacro2_semver_exempt))]
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_match_trailing_dollar`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/token.rs:819:7
    |
819 | #[cfg(syn_can_match_trailing_dollar)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_match_trailing_dollar)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_match_trailing_dollar)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_match_trailing_dollar`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/token.rs:823:11
    |
823 | #[cfg(not(syn_can_match_trailing_dollar))]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_match_trailing_dollar)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_match_trailing_dollar)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_associated_constants`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/ident.rs:90:11
   |
90 |     #[cfg(syn_can_use_associated_constants)]
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_associated_constants)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_associated_constants)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_associated_constants`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/ident.rs:96:15
   |
96 |     #[cfg(not(syn_can_use_associated_constants))]
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_associated_constants)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_associated_constants)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/attr.rs:519:20
    |
519 |         #[cfg_attr(feature = "cargo-clippy", allow(trivially_copy_pass_by_ref))]
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `clone-impls`, `default`, `derive`, `extra-traits`, `fold`, `full`, `parsing`, `printing`, `proc-macro`, `quote`, `visit`, and `visit-mut`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/attr.rs:530:20
    |
530 |         #[cfg_attr(feature = "cargo-clippy", allow(trivially_copy_pass_by_ref))]
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `clone-impls`, `default`, `derive`, `extra-traits`, `fold`, `full`, `parsing`, `printing`, `proc-macro`, `quote`, `visit`, and `visit-mut`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/lit.rs:733:16
    |
733 |     #[cfg_attr(feature = "cargo-clippy", allow(needless_continue))]
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `clone-impls`, `default`, `derive`, `extra-traits`, `fold`, `full`, `parsing`, `printing`, `proc-macro`, `quote`, `visit`, and `visit-mut`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/lit.rs:821:16
    |
821 |     #[cfg_attr(feature = "cargo-clippy", allow(needless_continue))]
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `clone-impls`, `default`, `derive`, `extra-traits`, `fold`, `full`, `parsing`, `printing`, `proc-macro`, `quote`, `visit`, and `visit-mut`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/path.rs:558:20
    |
558 |         #[cfg_attr(feature = "cargo-clippy", allow(match_same_arms))]
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `clone-impls`, `default`, `derive`, `extra-traits`, `fold`, `full`, `parsing`, `printing`, `proc-macro`, `quote`, `visit`, and `visit-mut`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/buffer.rs:355:11
    |
355 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/buffer.rs:363:11
    |
363 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_associated_constants`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/ext.rs:9:7
  |
9 | #[cfg(syn_can_use_associated_constants)]
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_associated_constants)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_associated_constants)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_associated_constants`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/ext.rs:11:7
   |
11 | #[cfg(syn_can_use_associated_constants)]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_associated_constants)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_associated_constants)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_associated_constants`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/ext.rs:13:7
   |
13 | #[cfg(syn_can_use_associated_constants)]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_associated_constants)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_associated_constants)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_associated_constants`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/ext.rs:15:7
   |
15 | #[cfg(syn_can_use_associated_constants)]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_associated_constants)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_associated_constants)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_associated_constants`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/ext.rs:114:7
    |
114 | #[cfg(syn_can_use_associated_constants)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_associated_constants)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_associated_constants)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_associated_constants`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/ext.rs:119:7
    |
119 | #[cfg(syn_can_use_associated_constants)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_associated_constants)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_associated_constants)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_associated_constants`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/ext.rs:130:7
    |
130 | #[cfg(syn_can_use_associated_constants)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_associated_constants)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_associated_constants)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_associated_constants`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/ext.rs:62:11
   |
62 |     #[cfg(syn_can_use_associated_constants)]
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_associated_constants)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_associated_constants)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_associated_constants`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/ext.rs:140:11
    |
140 |     #[cfg(syn_can_use_associated_constants)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_associated_constants)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_associated_constants)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_associated_constants`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/ext.rs:143:11
    |
143 |     #[cfg(syn_can_use_associated_constants)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_associated_constants)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_associated_constants)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_call_macro_by_path`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/parse_quote.rs:77:11
   |
77 | #[cfg(not(syn_can_call_macro_by_path))]
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_call_macro_by_path)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_call_macro_by_path)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_call_macro_by_path`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/parse_quote.rs:87:7
   |
87 | #[cfg(syn_can_call_macro_by_path)]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_call_macro_by_path)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_call_macro_by_path)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/spanned.rs:127:11
    |
127 |     #[cfg(procmacro2_semver_exempt)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/spanned.rs:136:15
    |
136 |     #[cfg(not(procmacro2_semver_exempt))]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `gen::*`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/lib.rs:549:9
    |
549 | pub use gen::*;
    |         ^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: unexpected `cfg` condition name: `syn_can_use_thread_id`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/thread.rs:44:7
   |
44 | #[cfg(syn_can_use_thread_id)]
   |       ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_thread_id)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_thread_id)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_can_use_thread_id`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/thread.rs:55:11
   |
55 | #[cfg(not(syn_can_use_thread_id))]
   |           ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_can_use_thread_id)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_can_use_thread_id)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/error.rs:13:11
   |
13 | #[cfg(all(procmacro2_semver_exempt, feature = "parsing"))]
   |           ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/error.rs:121:15
    |
121 |         #[cfg(procmacro2_semver_exempt)]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/error.rs:129:19
    |
129 |         #[cfg(not(procmacro2_semver_exempt))]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/error.rs:177:15
    |
177 |         #[cfg(procmacro2_semver_exempt)]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `procmacro2_semver_exempt`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/error.rs:179:19
    |
179 |         #[cfg(not(procmacro2_semver_exempt))]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(procmacro2_semver_exempt)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: method `inner` is never used
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/attr.rs:509:8
    |
505 | pub trait FilterAttrs<'a> {
    |           ----------- method in this trait
...
509 |     fn inner(self) -> Self::Ret;
    |        ^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field `0` is never read
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/expr.rs:994:28
    |
994 |     pub struct AllowStruct(bool);
    |                ----------- ^^^^
    |                |
    |                field in this struct
    |
    = help: consider removing this field
    = note: `AllowStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: panic message contains braces
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-0.15.44/src/lit.rs:986:30
    |
986 |             panic!("expected {{ after \\u");
    |                              ^^
    |
    = note: this message is not used as a format string, but will be in Rust 2021
    = note: `#[warn(non_fmt_panics)]` on by default
help: add a "{}" format string to use the message literally
    |
986 |             panic!("{}", "expected {{ after \\u");
    |                    +++++

       Fresh protobuf-codegen v3.7.2
       Fresh parking_lot v0.12.3
warning: `zeroize` (lib) generated 3 warnings
warning: `miniz_oxide` (lib) generated 1 warning
warning: `syn` (lib) generated 42 warnings
       Fresh regex v1.11.1
       Fresh rustls-webpki v0.103.1
       Fresh block-buffer v0.10.4
       Fresh crypto-common v0.1.6
       Fresh num-traits v0.1.43
       Fresh mio v1.0.3
       Fresh signal-hook-registry v1.4.2
       Fresh socket2 v0.5.10
       Fresh itoa v0.3.4
warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-0.3.4/src/lib.rs:13:13
   |
13 | #![cfg_attr(feature = "cargo-clippy", allow(cast_lossless, unreadable_literal))]
   |             ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `i128`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: anonymous parameters are deprecated and will be removed in the next edition
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-0.3.4/src/lib.rs:26:34
   |
26 |     fn write<W: io::Write>(self, W) -> io::Result<usize>;
   |                                  ^ help: try naming the parameter or explicitly ignoring it: `_: W`
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!
   = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>
   = note: `#[warn(anonymous_parameters)]` on by default

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-0.3.4/src/lib.rs:50:17
    |
50  |                 try!(wr.write_all(bytes));
    |                 ^^^
...
119 | impl_Integer!(i8, u8, i16, u16, i32, u32 as u32);
    | ------------------------------------------------ in this macro invocation
    |
    = note: `#[warn(deprecated)]` on by default
    = note: this warning originates in the macro `impl_Integer` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-0.3.4/src/lib.rs:50:17
    |
50  |                 try!(wr.write_all(bytes));
    |                 ^^^
...
120 | impl_Integer!(i64, u64 as u64);
    | ------------------------------ in this macro invocation
    |
    = note: this warning originates in the macro `impl_Integer` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-0.3.4/src/lib.rs:50:17
    |
50  |                 try!(wr.write_all(bytes));
    |                 ^^^
...
126 | impl_Integer!(isize, usize as u64);
    | ---------------------------------- in this macro invocation
    |
    = note: this warning originates in the macro `impl_Integer` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-0.3.4/src/lib.rs:48:45
    |
48  |                 let mut buf = unsafe { mem::uninitialized() };
    |                                             ^^^^^^^^^^^^^
...
119 | impl_Integer!(i8, u8, i16, u16, i32, u32 as u32);
    | ------------------------------------------------ in this macro invocation
    |
    = note: this warning originates in the macro `impl_Integer` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-0.3.4/src/lib.rs:48:45
    |
48  |                 let mut buf = unsafe { mem::uninitialized() };
    |                                             ^^^^^^^^^^^^^
...
120 | impl_Integer!(i64, u64 as u64);
    | ------------------------------ in this macro invocation
    |
    = note: this warning originates in the macro `impl_Integer` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-0.3.4/src/lib.rs:48:45
    |
48  |                 let mut buf = unsafe { mem::uninitialized() };
    |                                             ^^^^^^^^^^^^^
...
126 | impl_Integer!(isize, usize as u64);
    | ---------------------------------- in this macro invocation
    |
    = note: this warning originates in the macro `impl_Integer` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: the type `[u8; 40]` does not permit being left uninitialized
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-0.3.4/src/lib.rs:48:40
    |
48  |                 let mut buf = unsafe { mem::uninitialized() };
    |                                        ^^^^^^^^^^^^^^^^^^^^
    |                                        |
    |                                        this code causes undefined behavior when executed
    |                                        help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
...
119 | impl_Integer!(i8, u8, i16, u16, i32, u32 as u32);
    | ------------------------------------------------ in this macro invocation
    |
    = note: integers must be initialized
    = note: `#[warn(invalid_value)]` on by default
    = note: this warning originates in the macro `impl_Integer` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: the type `[u8; 40]` does not permit being left uninitialized
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-0.3.4/src/lib.rs:48:40
    |
48  |                 let mut buf = unsafe { mem::uninitialized() };
    |                                        ^^^^^^^^^^^^^^^^^^^^
    |                                        |
    |                                        this code causes undefined behavior when executed
    |                                        help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
...
120 | impl_Integer!(i64, u64 as u64);
    | ------------------------------ in this macro invocation
    |
    = note: integers must be initialized
    = note: this warning originates in the macro `impl_Integer` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: the type `[u8; 40]` does not permit being left uninitialized
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-0.3.4/src/lib.rs:48:40
    |
48  |                 let mut buf = unsafe { mem::uninitialized() };
    |                                        ^^^^^^^^^^^^^^^^^^^^
    |                                        |
    |                                        this code causes undefined behavior when executed
    |                                        help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
...
126 | impl_Integer!(isize, usize as u64);
    | ---------------------------------- in this macro invocation
    |
    = note: integers must be initialized
    = note: this warning originates in the macro `impl_Integer` (in Nightly builds, run with -Z macro-backtrace for more info)

       Fresh subtle v2.6.1
       Fresh serde v0.9.15
warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/lib.rs:67:13
   |
67 | #![cfg_attr(feature = "cargo-clippy", allow(linkedlist, type_complexity, doc_markdown))]
   |             ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `alloc`, `collections`, `default`, `derive`, `playground`, `serde_derive`, `std`, `unstable`, and `unstable-testing`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unused import: `num`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/lib.rs:82:47
   |
82 |                   usize, f32, f64, char, str, num, slice, iter, cell, default, result, option,
   |                                               ^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: use of deprecated macro `try`: use the `?` operator instead
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/bytes.rs:69:9
   |
69 |         try!(f.write_str("b\""));
   |         ^^^
   |
   = note: `#[warn(deprecated)]` on by default

warning: use of deprecated macro `try`: use the `?` operator instead
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/bytes.rs:71:13
   |
71 |             try!(f.write_char(c));
   |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/bytes.rs:171:13
    |
171 |             try!(f.write_str("b\""));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/bytes.rs:173:17
    |
173 |                 try!(f.write_char(c));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/bytes.rs:261:37
    |
261 |             while let Some(value) = try!(visitor.visit()) {
    |                                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:328:21
    |
328 |         let bytes = try!(ByteBuf::deserialize(deserializer));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:364:17
    |
364 |         Ok(Some(try!(Deserialize::deserialize(deserializer))))
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:458:41
    |
458 |                   while let Some(value) = try!($visitor.visit()) {
    |                                           ^^^
...
479 | / seq_impl!(
480 | |     BinaryHeap<T>,
481 | |     BinaryHeapVisitor<T: Deserialize + Ord>,
482 | |     visitor,
483 | |     BinaryHeap::new(),
484 | |     BinaryHeap::with_capacity(cmp::min(visitor.size_hint().0, 4096)),
485 | |     BinaryHeap::push);
    | |_____________________- in this macro invocation
    |
    = note: this warning originates in the macro `seq_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:458:41
    |
458 |                   while let Some(value) = try!($visitor.visit()) {
    |                                           ^^^
...
488 | / seq_impl!(
489 | |     BTreeSet<T>,
490 | |     BTreeSetVisitor<T: Deserialize + Eq + Ord>,
491 | |     visitor,
492 | |     BTreeSet::new(),
493 | |     BTreeSet::new(),
494 | |     BTreeSet::insert);
    | |_____________________- in this macro invocation
    |
    = note: this warning originates in the macro `seq_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:458:41
    |
458 |                   while let Some(value) = try!($visitor.visit()) {
    |                                           ^^^
...
497 | / seq_impl!(
498 | |     LinkedList<T>,
499 | |     LinkedListVisitor<T: Deserialize>,
500 | |     visitor,
501 | |     LinkedList::new(),
502 | |     LinkedList::new(),
503 | |     LinkedList::push_back);
    | |__________________________- in this macro invocation
    |
    = note: this warning originates in the macro `seq_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:458:41
    |
458 |                   while let Some(value) = try!($visitor.visit()) {
    |                                           ^^^
...
506 | / seq_impl!(
507 | |     HashSet<T, S>,
508 | |     HashSetVisitor<T: Deserialize + Eq + Hash,
509 | |                    S: BuildHasher + Default>,
...   |
512 | |     HashSet::with_capacity_and_hasher(cmp::min(visitor.size_hint().0, 4096), S::default()),
513 | |     HashSet::insert);
    | |____________________- in this macro invocation
    |
    = note: this warning originates in the macro `seq_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:458:41
    |
458 |                   while let Some(value) = try!($visitor.visit()) {
    |                                           ^^^
...
516 | / seq_impl!(
517 | |     Vec<T>,
518 | |     VecVisitor<T: Deserialize>,
519 | |     visitor,
520 | |     Vec::new(),
521 | |     Vec::with_capacity(cmp::min(visitor.size_hint().0, 4096)),
522 | |     Vec::push);
    | |______________- in this macro invocation
    |
    = note: this warning originates in the macro `seq_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:458:41
    |
458 |                   while let Some(value) = try!($visitor.visit()) {
    |                                           ^^^
...
525 | / seq_impl!(
526 | |     VecDeque<T>,
527 | |     VecDequeVisitor<T: Deserialize>,
528 | |     visitor,
529 | |     VecDeque::new(),
530 | |     VecDeque::with_capacity(cmp::min(visitor.size_hint().0, 4096)),
531 | |     VecDeque::push_back);
    | |________________________- in this macro invocation
    |
    = note: this warning originates in the macro `seq_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:594:43
    |
594 |                           let $name = match try!(visitor.visit()) {
    |                                             ^^^
...
617 | / array_impls! {
618 | |     1 => (0 a)
619 | |     2 => (0 a 1 b)
620 | |     3 => (0 a 1 b 2 c)
...   |
649 | |     32 => (0 a 1 b 2 c 3 d 4 e 5 f 6 g 7 h 8 i 9 j 10 k 11 l 12 m 13 n 14 o 15 p 16 q 17 r 18 s 19 t 20 u 21 v 22 w 23 x 24 y 25 z 26 aa 27 ab 28 ac 29 ad 30 ae 31 af)
650 | | }
    | |_- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:682:43
    |
682 |                           let $name = match try!(visitor.visit()) {
    |                                             ^^^
...
704 | / tuple_impls! {
705 | |     1 => TupleVisitor1 => (0 T0)
706 | |     2 => TupleVisitor2 => (0 T0 1 T1)
707 | |     3 => TupleVisitor3 => (0 T0 1 T1 2 T2)
...   |
720 | |     16 => TupleVisitor16 => (0 T0 1 T1 2 T2 3 T3 4 T4 5 T5 6 T6 7 T7 8 T8 9 T9 10 T10 11 T11 12 T12 13 T13 14 T14 15 T15)
721 | | }
    | |_- in this macro invocation
    |
    = note: this warning originates in the macro `tuple_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:771:48
    |
771 |                   while let Some((key, value)) = try!($visitor.visit()) {
    |                                                  ^^^
...
792 | / map_impl!(
793 | |     BTreeMap<K, V>,
794 | |     BTreeMapVisitor<K: Deserialize + Ord,
795 | |                     V: Deserialize>,
796 | |     visitor,
797 | |     BTreeMap::new(),
798 | |     BTreeMap::new());
    | |____________________- in this macro invocation
    |
    = note: this warning originates in the macro `map_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:771:48
    |
771 |                   while let Some((key, value)) = try!($visitor.visit()) {
    |                                                  ^^^
...
801 | / map_impl!(
802 | |     HashMap<K, V, S>,
803 | |     HashMapVisitor<K: Deserialize + Eq + Hash,
804 | |                    V: Deserialize,
...   |
807 | |     HashMap::with_hasher(S::default()),
808 | |     HashMap::with_capacity_and_hasher(cmp::min(visitor.size_hint().0, 4096), S::default()));
    | |___________________________________________________________________________________________- in this macro invocation
    |
    = note: this warning originates in the macro `map_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:817:17
    |
817 |         let s = try!(String::deserialize(deserializer));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:830:17
    |
830 |         let s = try!(String::deserialize(deserializer));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:843:17
    |
843 |         let s = try!(String::deserialize(deserializer));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:858:17
    |
858 |         let s = try!(String::deserialize(deserializer));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:871:17
    |
871 |         let s = try!(String::deserialize(deserializer));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:884:17
    |
884 |         let s = try!(String::deserialize(deserializer));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1012:15
     |
1012 |         match try!(visitor.visit_variant()) {
     |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1055:19
     |
1055 |         let val = try!(Deserialize::deserialize(deserializer));
     |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1065:25
     |
1065 |         let v: Vec<T> = try!(Deserialize::deserialize(deserializer));
     |                         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1075:17
     |
1075 |         let s = try!(String::deserialize(deserializer));
     |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1085:19
     |
1085 |         let val = try!(Deserialize::deserialize(deserializer));
     |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1095:19
     |
1095 |         let val = try!(Deserialize::deserialize(deserializer));
     |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1109:19
     |
1109 |         let val = try!(Deserialize::deserialize(deserializer));
     |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1118:19
     |
1118 |         let val = try!(Deserialize::deserialize(deserializer));
     |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1127:19
     |
1127 |         let val = try!(Deserialize::deserialize(deserializer));
     |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1137:19
     |
1137 |         let val = try!(Deserialize::deserialize(deserializer));
     |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1147:19
     |
1147 |         let val = try!(Deserialize::deserialize(deserializer));
     |                   ^^^

warning: unnecessary trailing semicolon
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1170:10
     |
1170 |         };
     |          ^ help: remove this semicolon
     |
     = note: `#[warn(redundant_semicolons)]` on by default

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1225:39
     |
1225 |                 let secs: u64 = match try!(visitor.visit()) {
     |                                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1231:40
     |
1231 |                 let nanos: u32 = match try!(visitor.visit()) {
     |                                        ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1245:39
     |
1245 |                 while let Some(key) = try!(visitor.visit_key::<Field>()) {
     |                                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1251:41
     |
1251 | ...                   secs = Some(try!(visitor.visit_value()));
     |                                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1257:42
     |
1257 | ...                   nanos = Some(try!(visitor.visit_value()));
     |                                    ^^^

warning: unnecessary trailing semicolon
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1296:10
     |
1296 |         };
     |          ^ help: remove this semicolon

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1353:40
     |
1353 |                 let start: Idx = match try!(visitor.visit()) {
     |                                        ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1359:38
     |
1359 |                 let end: Idx = match try!(visitor.visit()) {
     |                                      ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1373:39
     |
1373 |                 while let Some(key) = try!(visitor.visit_key::<Field>()) {
     |                                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1379:42
     |
1379 | ...                   start = Some(try!(visitor.visit_value()));
     |                                    ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1385:40
     |
1385 | ...                   end = Some(try!(visitor.visit_value()));
     |                                  ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1520:23
     |
1520 |                 match try!(visitor.visit_variant()) {
     |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1608:37
     |
1608 |                 while let Some(_) = try!(visitor.visit::<IgnoredAny>()) {
     |                                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/impls.rs:1618:42
     |
1618 |                 while let Some((_, _)) = try!(visitor.visit::<IgnoredAny, IgnoredAny>()) {
     |                                          ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/value.rs:499:9
    |
499 |         try!(self.end());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/value.rs:498:17
    |
498 |         let v = try!(visitor.visit_seq(&mut self));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/value.rs:697:9
    |
697 |         try!(self.end());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/value.rs:696:21
    |
696 |         let value = try!(visitor.visit_map(&mut self));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/value.rs:705:9
    |
705 |         try!(self.end());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/value.rs:704:21
    |
704 |         let value = try!(visitor.visit_seq(&mut self));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/value.rs:765:27
    |
765 |                 let key = try!(kseed.deserialize(key.into_deserializer()));
    |                           ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/value.rs:766:29
    |
766 |                 let value = try!(vseed.deserialize(value.into_deserializer()));
    |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/value.rs:831:20
    |
831 |         let pair = try!(visitor.visit_seq(&mut pair_visitor));
    |                    ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:227:29
    |
227 |         while let Some(e) = try!(visitor.visit()) {
    |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:237:30
    |
237 |         while let Some(kv) = try!(visitor.visit()) {
    |                              ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:495:29
    |
495 |         while let Some(k) = try!(visitor.visit_key_seed(TagOrContentVisitor::new(self.tag_name))) {
    |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:501:32
    |
501 |                     tag = Some(try!(visitor.visit_value()));
    |                                ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:504:29
    |
504 |                     let v = try!(visitor.visit_value());
    |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:603:17
    |
603 |                 try!(seq_visitor.end());
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:602:29
    |
602 |                 let value = try!(visitor.visit_seq(&mut seq_visitor));
    |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:613:17
    |
613 |                 try!(map_visitor.end());
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:612:29
    |
612 |                 let value = try!(visitor.visit_map(&mut map_visitor));
    |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:805:23
    |
805 |             let ret = try!(visitor.visit_seq(&mut self));
    |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:950:17
    |
950 |                 try!(seq_visitor.end());
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:949:29
    |
949 |                 let value = try!(visitor.visit_seq(&mut seq_visitor));
    |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:960:17
    |
960 |                 try!(map_visitor.end());
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:959:29
    |
959 |                 let value = try!(visitor.visit_map(&mut map_visitor));
    |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/content.rs:1150:23
     |
1150 |             let ret = try!(visitor.visit_seq(&mut self));
     |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/mod.rs:1262:15
     |
1262 |         match try!(self.visit_key_seed(kseed)) {
     |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/mod.rs:1264:29
     |
1264 |                 let value = try!(self.visit_value_seed(vseed));
     |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/mod.rs:1524:17
     |
1524 |                 try!(write!(formatter, "one of "));
     |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/mod.rs:1529:21
     |
1529 |                     try!(write!(formatter, "`{}`", alt));
     |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/mod.rs:1527:25
     |
1527 |                         try!(write!(formatter, ", "));
     |                         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
172 | array_impls!(0);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
172 | array_impls!(0);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
173 | array_impls!(1);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
173 | array_impls!(1);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
174 | array_impls!(2);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
174 | array_impls!(2);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
175 | array_impls!(3);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
175 | array_impls!(3);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
176 | array_impls!(4);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
176 | array_impls!(4);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
177 | array_impls!(5);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
177 | array_impls!(5);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
178 | array_impls!(6);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
178 | array_impls!(6);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
179 | array_impls!(7);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
179 | array_impls!(7);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
180 | array_impls!(8);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
180 | array_impls!(8);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
181 | array_impls!(9);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
181 | array_impls!(9);
    | --------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
182 | array_impls!(10);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
182 | array_impls!(10);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
183 | array_impls!(11);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
183 | array_impls!(11);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
184 | array_impls!(12);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
184 | array_impls!(12);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
185 | array_impls!(13);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
185 | array_impls!(13);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
186 | array_impls!(14);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
186 | array_impls!(14);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
187 | array_impls!(15);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
187 | array_impls!(15);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
188 | array_impls!(16);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
188 | array_impls!(16);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
189 | array_impls!(17);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
189 | array_impls!(17);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
190 | array_impls!(18);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
190 | array_impls!(18);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
191 | array_impls!(19);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
191 | array_impls!(19);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
192 | array_impls!(20);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
192 | array_impls!(20);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
193 | array_impls!(21);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
193 | array_impls!(21);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
194 | array_impls!(22);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
194 | array_impls!(22);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
195 | array_impls!(23);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
195 | array_impls!(23);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
196 | array_impls!(24);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
196 | array_impls!(24);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
197 | array_impls!(25);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
197 | array_impls!(25);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
198 | array_impls!(26);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
198 | array_impls!(26);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
199 | array_impls!(27);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
199 | array_impls!(27);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
200 | array_impls!(28);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
200 | array_impls!(28);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
201 | array_impls!(29);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
201 | array_impls!(29);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
202 | array_impls!(30);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
202 | array_impls!(30);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
203 | array_impls!(31);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
203 | array_impls!(31);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:162:31
    |
162 |                 let mut seq = try!(serializer.serialize_seq_fixed_size($len));
    |                               ^^^
...
204 | array_impls!(32);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:164:21
    |
164 |                     try!(seq.serialize_element(e));
    |                     ^^^
...
204 | array_impls!(32);
    | ---------------- in this macro invocation
    |
    = note: this warning originates in the macro `array_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:277:9
    |
277 |         try!(state.serialize_field("start", &self.start));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:278:9
    |
278 |         try!(state.serialize_field("end", &self.end));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:276:25
    |
276 |         let mut state = try!(serializer.serialize_struct("Range", 2));
    |                         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:312:25
    |
312 |                           try!(tuple.serialize_element(&self.$idx));
    |                           ^^^
...
321 | / tuple_impls! {
322 | |     TupleVisitor1 (1, T0) {
323 | |         0 => 0,
...   |
490 | | }
    | |_- in this macro invocation
    |
    = note: this warning originates in the macro `tuple_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:310:37
    |
310 |                       let mut tuple = try!(serializer.serialize_tuple($len));
    |                                       ^^^
...
321 | / tuple_impls! {
322 | |     TupleVisitor1 (1, T0) {
323 | |         0 => 0,
...   |
490 | | }
    | |_- in this macro invocation
    |
    = note: this warning originates in the macro `tuple_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:673:9
    |
673 |         try!(state.serialize_field("secs", &self.as_secs()));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:674:9
    |
674 |         try!(state.serialize_field("nanos", &self.subsec_nanos()));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:672:25
    |
672 |         let mut state = try!(serializer.serialize_struct("Duration", 2));
    |                         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:204:9
    |
204 |         try!(map.serialize_entry(self.tag, self.variant_name));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:205:9
    |
205 |         try!(map.serialize_entry(inner_variant, &()));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:203:23
    |
203 |         let mut map = try!(self.delegate.serialize_map(Some(2)));
    |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:227:9
    |
227 |         try!(map.serialize_entry(self.tag, self.variant_name));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:228:9
    |
228 |         try!(map.serialize_entry(inner_variant, inner_value));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:226:23
    |
226 |         let mut map = try!(self.delegate.serialize_map(Some(2)));
    |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:271:9
    |
271 |         try!(map.serialize_entry(self.tag, self.variant_name));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:272:9
    |
272 |         try!(map.serialize_key(inner_variant));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:270:23
    |
270 |         let mut map = try!(self.delegate.serialize_map(Some(2)));
    |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:278:9
    |
278 |         try!(map.serialize_entry(self.tag, self.variant_name));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:277:23
    |
277 |         let mut map = try!(self.delegate.serialize_map(len.map(|len| len + 1)));
    |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:287:9
    |
287 |         try!(state.serialize_field(self.tag, self.variant_name));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:286:25
    |
286 |         let mut state = try!(self.delegate.serialize_struct(name, len + 1));
    |                         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:311:9
    |
311 |         try!(map.serialize_entry(self.tag, self.variant_name));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:312:9
    |
312 |         try!(map.serialize_key(inner_variant));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/private.rs:310:23
    |
310 |         let mut map = try!(self.delegate.serialize_map(Some(2)));
    |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:37:21
   |
37 |         let value = try!(value.serialize(ContentSerializer::<M::Error>::new()));
   |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:43:9
   |
43 |         try!(self.map.serialize_value(&Content::TupleStruct(self.name, self.fields)));
   |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:74:21
   |
74 |         let value = try!(value.serialize(ContentSerializer::<M::Error>::new()));
   |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:80:9
   |
80 |         try!(self.map.serialize_value(&Content::Struct(self.name, self.fields)));
   |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:156:31
    |
156 |                 let mut seq = try!(serializer.serialize_seq_fixed_size(elements.len()));
    |                               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:158:21
    |
158 |                     try!(seq.serialize_element(e));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:164:33
    |
164 |                 let mut tuple = try!(serializer.serialize_tuple(elements.len()));
    |                                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:166:21
    |
166 |                     try!(tuple.serialize_element(e));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:172:30
    |
172 |                 let mut ts = try!(serializer.serialize_tuple_struct(n, fields.len()));
    |                              ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:174:21
    |
174 |                     try!(ts.serialize_field(f));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:180:30
    |
180 |                 let mut tv = try!(serializer.serialize_tuple_variant(n, i, v, fields.len()));
    |                              ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:182:21
    |
182 |                     try!(tv.serialize_field(f));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:188:31
    |
188 |                 let mut map = try!(serializer.serialize_map(Some(entries.len())));
    |                               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:190:21
    |
190 |                     try!(map.serialize_entry(k, v));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:196:29
    |
196 |                 let mut s = try!(serializer.serialize_struct(n, fields.len()));
    |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:198:21
    |
198 |                     try!(s.serialize_field(k, v));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:204:30
    |
204 |                 let mut sv = try!(serializer.serialize_struct_variant(n, i, v, fields.len()));
    |                              ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:206:21
    |
206 |                     try!(sv.serialize_field(k, v));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:299:35
    |
299 |         Ok(Content::Some(Box::new(try!(value.serialize(self)))))
    |                                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:322:50
    |
322 |         Ok(Content::NewtypeStruct(name, Box::new(try!(value.serialize(self)))))
    |                                                  ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:334:45
    |
334 | ...                   Box::new(try!(value.serialize(self)))))
    |                                ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:431:21
    |
431 |         let value = try!(value.serialize(ContentSerializer::<E>::new()));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:457:21
    |
457 |         let value = try!(value.serialize(ContentSerializer::<E>::new()));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:480:21
    |
480 |         let value = try!(value.serialize(ContentSerializer::<E>::new()));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:505:21
    |
505 |         let value = try!(value.serialize(ContentSerializer::<E>::new()));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:528:19
    |
528 |         let key = try!(key.serialize(ContentSerializer::<E>::new()));
    |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:535:21
    |
535 |         let value = try!(value.serialize(ContentSerializer::<E>::new()));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:548:19
    |
548 |         let key = try!(key.serialize(ContentSerializer::<E>::new()));
    |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:549:21
    |
549 |         let value = try!(value.serialize(ContentSerializer::<E>::new()));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:571:21
    |
571 |         let value = try!(value.serialize(ContentSerializer::<E>::new()));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/content.rs:599:21
    |
599 |         let value = try!(value.serialize(ContentSerializer::<E>::new()));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/mod.rs:602:30
    |
602 |         let mut serializer = try!(self.serialize_seq(iter.len_hint()));
    |                              ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/mod.rs:604:13
    |
604 |             try!(serializer.serialize_element(&item));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/mod.rs:620:30
    |
620 |         let mut serializer = try!(self.serialize_map(iter.len_hint()));
    |                              ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/mod.rs:622:13
    |
622 |             try!(serializer.serialize_entry(&key, &value));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/mod.rs:827:9
    |
827 |         try!(self.serialize_key(key));
    |         ^^^

warning: `#[inline]` is ignored on function prototypes
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/from_primitive.rs:111:5
    |
111 |     #[inline]
    |     ^^^^^^^^^
    |
    = note: `#[warn(unused_attributes)]` on by default

warning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/macros.rs:188:67
    |
188 |             let mut buffer: [u8; $MAX_LEN] = unsafe { ::std::mem::uninitialized() };
    |                                                                   ^^^^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:700:9
    |
700 |         serialize_display_bounded_length!(self, MAX_LEN, serializer)
    |         ------------------------------------------------------------ in this macro invocation
    |
    = note: this warning originates in the macro `serialize_display_bounded_length` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/macros.rs:188:67
    |
188 |             let mut buffer: [u8; $MAX_LEN] = unsafe { ::std::mem::uninitialized() };
    |                                                                   ^^^^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:711:9
    |
711 |         serialize_display_bounded_length!(self, MAX_LEN, serializer)
    |         ------------------------------------------------------------ in this macro invocation
    |
    = note: this warning originates in the macro `serialize_display_bounded_length` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/macros.rs:188:67
    |
188 |             let mut buffer: [u8; $MAX_LEN] = unsafe { ::std::mem::uninitialized() };
    |                                                                   ^^^^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:736:9
    |
736 |         serialize_display_bounded_length!(self, MAX_LEN, serializer)
    |         ------------------------------------------------------------ in this macro invocation
    |
    = note: this warning originates in the macro `serialize_display_bounded_length` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/macros.rs:188:67
    |
188 |             let mut buffer: [u8; $MAX_LEN] = unsafe { ::std::mem::uninitialized() };
    |                                                                   ^^^^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:747:9
    |
747 |         serialize_display_bounded_length!(self, MAX_LEN, serializer)
    |         ------------------------------------------------------------ in this macro invocation
    |
    = note: this warning originates in the macro `serialize_display_bounded_length` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/mod.rs:178:46
    |
178 |     fn invalid_type(unexp: Unexpected, exp: &Expected) -> Self {
    |                                              ^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
    = note: `#[warn(bare_trait_objects)]` on by default
help: if this is a dyn-compatible trait, use `dyn`
    |
178 |     fn invalid_type(unexp: Unexpected, exp: &dyn Expected) -> Self {
    |                                              +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/mod.rs:195:47
    |
195 |     fn invalid_value(unexp: Unexpected, exp: &Expected) -> Self {
    |                                               ^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
195 |     fn invalid_value(unexp: Unexpected, exp: &dyn Expected) -> Self {
    |                                               +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/mod.rs:208:41
    |
208 |     fn invalid_length(len: usize, exp: &Expected) -> Self {
    |                                         ^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
208 |     fn invalid_length(len: usize, exp: &dyn Expected) -> Self {
    |                                         +++

warning: trait objects without an explicit `dyn` are deprecated
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/error.rs:14:32
   |
14 |     fn cause(&self) -> Option<&Error> {
   |                                ^^^^^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
   |
14 |     fn cause(&self) -> Option<&dyn Error> {
   |                                +++

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/mod.rs:426:22
    |
426 | impl<'a> Display for Expected + 'a {
    |                      ^^^^^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
    |
426 | impl<'a> Display for dyn Expected + 'a {
    |                      +++

warning: associated functions `from_isize` and `from_usize` are never used
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/de/from_primitive.rs:325:8
    |
323 | pub trait FromPrimitive: Sized {
    |           ------------- associated functions in this trait
324 |     #[inline]
325 |     fn from_isize(n: isize) -> Option<Self> {
    |        ^^^^^^^^^^
...
347 |     fn from_usize(n: usize) -> Option<Self> {
    |        ^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: the type `[u8; 15]` does not permit being left uninitialized
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/macros.rs:188:55
    |
188 |             let mut buffer: [u8; $MAX_LEN] = unsafe { ::std::mem::uninitialized() };
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                                                       |
    |                                                       this code causes undefined behavior when executed
    |                                                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:700:9
    |
700 |         serialize_display_bounded_length!(self, MAX_LEN, serializer)
    |         ------------------------------------------------------------ in this macro invocation
    |
    = note: integers must be initialized
    = note: `#[warn(invalid_value)]` on by default
    = note: this warning originates in the macro `serialize_display_bounded_length` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: the type `[u8; 39]` does not permit being left uninitialized
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/macros.rs:188:55
    |
188 |             let mut buffer: [u8; $MAX_LEN] = unsafe { ::std::mem::uninitialized() };
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                                                       |
    |                                                       this code causes undefined behavior when executed
    |                                                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:711:9
    |
711 |         serialize_display_bounded_length!(self, MAX_LEN, serializer)
    |         ------------------------------------------------------------ in this macro invocation
    |
    = note: integers must be initialized
    = note: this warning originates in the macro `serialize_display_bounded_length` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: the type `[u8; 21]` does not permit being left uninitialized
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/macros.rs:188:55
    |
188 |             let mut buffer: [u8; $MAX_LEN] = unsafe { ::std::mem::uninitialized() };
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                                                       |
    |                                                       this code causes undefined behavior when executed
    |                                                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:736:9
    |
736 |         serialize_display_bounded_length!(self, MAX_LEN, serializer)
    |         ------------------------------------------------------------ in this macro invocation
    |
    = note: integers must be initialized
    = note: this warning originates in the macro `serialize_display_bounded_length` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: the type `[u8; 47]` does not permit being left uninitialized
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/macros.rs:188:55
    |
188 |             let mut buffer: [u8; $MAX_LEN] = unsafe { ::std::mem::uninitialized() };
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                                                       |
    |                                                       this code causes undefined behavior when executed
    |                                                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-0.9.15/src/ser/impls.rs:747:9
    |
747 |         serialize_display_bounded_length!(self, MAX_LEN, serializer)
    |         ------------------------------------------------------------ in this macro invocation
    |
    = note: integers must be initialized
    = note: this warning originates in the macro `serialize_display_bounded_length` (in Nightly builds, run with -Z macro-backtrace for more info)

       Fresh zeroize v1.8.1
warning: `signal-hook-registry` (lib) generated 1 warning (1 duplicate)
warning: `itoa` (lib) generated 11 warnings
warning: `serde` (lib) generated 221 warnings
warning: `zeroize` (lib) generated 3 warnings (3 duplicates)
       Fresh dtoa v0.4.8
warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dtoa-0.4.8/src/lib.rs:50:13
   |
50 | #![cfg_attr(feature = "cargo-clippy", allow(renamed_and_removed_lints))]
   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove the condition
   |
   = note: no expected values for `feature`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dtoa-0.4.8/src/lib.rs:52:5
   |
52 |     feature = "cargo-clippy",
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove the condition
   |
   = note: no expected values for `feature`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dtoa-0.4.8/src/diyfp.rs:120:29
    |
120 |           let u: $mask_type = mem::transmute(d);
    |                               ^^^^^^^^^^^^^^^^^ help: replace this with: `f32::to_bits(d)`
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dtoa-0.4.8/src/lib.rs:84:9
    |
84  | /         dtoa! {
85  | |             floating_type: f32,
86  | |             significand_type: u32,
87  | |             exponent_type: i32,
...   |
98  | |             min_power: (-36),
99  | |         };
    | |_________- in this macro invocation
    |
    = note: `#[warn(unnecessary_transmutes)]` on by default
    = note: this warning originates in the macro `diyfp` which comes from the expansion of the macro `dtoa` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dtoa-0.4.8/src/diyfp.rs:120:29
    |
120 |           let u: $mask_type = mem::transmute(d);
    |                               ^^^^^^^^^^^^^^^^^ help: replace this with: `f64::to_bits(d)`
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dtoa-0.4.8/src/lib.rs:106:9
    |
106 | /         dtoa! {
107 | |             floating_type: f64,
108 | |             significand_type: u64,
109 | |             exponent_type: isize,
...   |
120 | |             min_power: (-348),
121 | |         };
    | |_________- in this macro invocation
    |
    = note: this warning originates in the macro `diyfp` which comes from the expansion of the macro `dtoa` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: the type `[u8; 24]` does not permit being left uninitialized
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dtoa-0.4.8/src/dtoa.rs:493:36
    |
493 |           let mut buffer: [u8; 24] = mem::uninitialized();
    |                                      ^^^^^^^^^^^^^^^^^^^^
    |                                      |
    |                                      this code causes undefined behavior when executed
    |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dtoa-0.4.8/src/lib.rs:84:9
    |
84  | /         dtoa! {
85  | |             floating_type: f32,
86  | |             significand_type: u32,
87  | |             exponent_type: i32,
...   |
98  | |             min_power: (-36),
99  | |         };
    | |_________- in this macro invocation
    |
    = note: integers must be initialized
    = note: `#[warn(invalid_value)]` on by default
    = note: this warning originates in the macro `dtoa` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: the type `[u8; 24]` does not permit being left uninitialized
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dtoa-0.4.8/src/dtoa.rs:493:36
    |
493 |           let mut buffer: [u8; 24] = mem::uninitialized();
    |                                      ^^^^^^^^^^^^^^^^^^^^
    |                                      |
    |                                      this code causes undefined behavior when executed
    |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dtoa-0.4.8/src/lib.rs:106:9
    |
106 | /         dtoa! {
107 | |             floating_type: f64,
108 | |             significand_type: u64,
109 | |             exponent_type: isize,
...   |
120 | |             min_power: (-348),
121 | |         };
    | |_________- in this macro invocation
    |
    = note: integers must be initialized
    = note: this warning originates in the macro `dtoa` (in Nightly builds, run with -Z macro-backtrace for more info)

       Fresh rustls v0.23.26
       Fresh tokio v1.44.2
       Fresh digest v0.10.7
       Fresh dlopen_derive v0.1.4
warning: `dtoa` (lib) generated 6 warnings
warning: unexpected `cfg` condition name: `docs_rs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/lib.rs:12:13
   |
12 | #![cfg_attr(docs_rs, feature(doc_cfg))]
   |             ^^^^^^^ help: there is a config with a similar name: `docsrs`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(docs_rs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(docs_rs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `docs_rs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:38:12
   |
38 | #[cfg_attr(docs_rs, doc(cfg(feature = "alloc")))]
   |            ^^^^^^^ help: there is a config with a similar name: `docsrs`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(docs_rs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(docs_rs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `docs_rs`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:97:12
   |
97 | #[cfg_attr(docs_rs, doc(cfg(feature = "alloc")))]
   |            ^^^^^^^ help: there is a config with a similar name: `docsrs`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(docs_rs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(docs_rs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `docs_rs`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1043:12
     |
1043 | #[cfg_attr(docs_rs, doc(cfg(feature = "alloc")))]
     |            ^^^^^^^ help: there is a config with a similar name: `docsrs`
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(docs_rs)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(docs_rs)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `docs_rs`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1092:12
     |
1092 | #[cfg_attr(docs_rs, doc(cfg(feature = "alloc")))]
     |            ^^^^^^^ help: there is a config with a similar name: `docsrs`
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(docs_rs)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(docs_rs)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `docs_rs`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1312:12
     |
1312 | #[cfg_attr(docs_rs, doc(cfg(feature = "alloc")))]
     |            ^^^^^^^ help: there is a config with a similar name: `docsrs`
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(docs_rs)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(docs_rs)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:12:3
   |
12 |   #[must_use]
   |   ^^^^^^^^^^^
   |
   = note: `#[warn(unused_attributes)]` on by default

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:18:3
   |
18 |   #[must_use]
   |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:34:3
   |
34 |   #[must_use]
   |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:40:3
   |
40 |   #[must_use]
   |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:56:3
   |
56 |   #[must_use]
   |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:62:3
   |
62 |   #[must_use]
   |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:78:3
   |
78 |   #[must_use]
   |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:84:3
   |
84 |   #[must_use]
   |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:100:3
    |
100 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:106:3
    |
106 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:122:3
    |
122 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:128:3
    |
128 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:144:3
    |
144 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:150:3
    |
150 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:173:3
    |
173 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:179:3
    |
179 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:203:3
    |
203 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:209:3
    |
209 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:234:3
    |
234 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:240:3
    |
240 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:266:3
    |
266 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:272:3
    |
272 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:299:3
    |
299 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:305:3
    |
305 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:333:3
    |
333 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:339:3
    |
339 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:368:3
    |
368 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:374:3
    |
374 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:404:3
    |
404 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:410:3
    |
410 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:441:3
    |
441 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:447:3
    |
447 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:479:3
    |
479 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:485:3
    |
485 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:518:3
    |
518 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:524:3
    |
524 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:558:3
    |
558 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:564:3
    |
564 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:599:3
    |
599 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:605:3
    |
605 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:641:3
    |
641 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:647:3
    |
647 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:684:3
    |
684 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:690:3
    |
690 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:728:3
    |
728 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:734:3
    |
734 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:773:3
    |
773 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:779:3
    |
779 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:819:3
    |
819 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:825:3
    |
825 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:866:3
    |
866 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:872:3
    |
872 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:914:3
    |
914 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:920:3
    |
920 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:963:3
    |
963 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:969:3
    |
969 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1013:3
     |
1013 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1019:3
     |
1019 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1064:3
     |
1064 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1070:3
     |
1070 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1116:3
     |
1116 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1122:3
     |
1122 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1169:3
     |
1169 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1175:3
     |
1175 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1223:3
     |
1223 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1229:3
     |
1229 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1278:3
     |
1278 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1284:3
     |
1284 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1334:3
     |
1334 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1340:3
     |
1340 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1421:3
     |
1421 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1427:3
     |
1427 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1572:3
     |
1572 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1578:3
     |
1578 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1851:3
     |
1851 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:1857:3
     |
1857 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:2386:3
     |
2386 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:2392:3
     |
2392 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:3433:3
     |
3433 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:3439:3
     |
3439 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:5504:3
     |
5504 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/array/generated_impl.rs:5510:3
     |
5510 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:158:3
    |
158 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:166:3
    |
166 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:175:3
    |
175 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:183:3
    |
183 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1238:3
     |
1238 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1246:3
     |
1246 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1254:3
     |
1254 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1262:3
     |
1262 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1279:3
     |
1279 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1340:3
     |
1340 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1377:3
     |
1377 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1457:3
     |
1457 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1467:3
     |
1467 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1477:3
     |
1477 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1488:3
     |
1488 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1500:3
     |
1500 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1510:3
     |
1510 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1521:3
     |
1521 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/arrayvec.rs:1532:3
     |
1532 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:23:3
   |
23 |   #[must_use]
   |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:32:3
   |
32 |   #[must_use]
   |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:40:3
   |
40 |   #[must_use]
   |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:52:3
   |
52 |   #[must_use]
   |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:63:3
   |
63 |   #[must_use]
   |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:754:3
    |
754 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:762:3
    |
762 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:770:3
    |
770 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:778:3
    |
778 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:797:3
    |
797 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:808:3
    |
808 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:820:3
    |
820 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:830:3
    |
830 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/slicevec.rs:841:3
    |
841 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:135:3
    |
135 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:164:3
    |
164 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:172:3
    |
172 |   #[must_use]
    |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1202:3
     |
1202 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1210:3
     |
1210 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1218:3
     |
1218 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1226:3
     |
1226 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1261:3
     |
1261 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1279:3
     |
1279 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1295:3
     |
1295 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1303:3
     |
1303 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1390:3
     |
1390 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1403:3
     |
1403 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1413:3
     |
1413 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1424:3
     |
1424 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1436:3
     |
1436 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1446:3
     |
1446 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1457:3
     |
1457 |   #[must_use]
     |   ^^^^^^^^^^^

warning: `#[must_use]` has no effect when applied to a provided trait method
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.6.1/src/tinyvec.rs:1468:3
     |
1468 |   #[must_use]
     |   ^^^^^^^^^^^

       Fresh serde_json v0.9.10
warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/lib.rs:236:13
    |
236 | #![cfg_attr(feature = "cargo-clippy", deny(clippy, clippy_pedantic))]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `linked-hash-map` and `preserve_order`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/lib.rs:238:13
    |
238 | #![cfg_attr(feature = "cargo-clippy", allow(doc_markdown))]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `linked-hash-map` and `preserve_order`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/lib.rs:240:13
    |
240 | #![cfg_attr(feature = "cargo-clippy", allow(
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `linked-hash-map` and `preserve_order`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: use of deprecated macro `try`: use the `?` operator instead
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:88:12
   |
88 |         if try!(self.parse_whitespace()) { // true if eof
   |            ^^^
   |
   = note: `#[warn(deprecated)]` on by default

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:112:12
    |
112 |         Ok(try!(self.peek()).unwrap_or(b'\x00'))
    |            ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:124:12
    |
124 |         Ok(try!(self.next_char()).unwrap_or(b'\x00'))
    |            ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:144:19
    |
144 |             match try!(self.peek()) {
    |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:161:12
    |
161 |         if try!(self.parse_whitespace()) { // true if eof
    |            ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:165:27
    |
165 |         let value = match try!(self.peek_or_null()) {
    |                           ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:168:17
    |
168 |                 try!(self.parse_ident(b"ull"));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:173:17
    |
173 |                 try!(self.parse_ident(b"rue"));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:178:17
    |
178 |                 try!(self.parse_ident(b"alse"));
    |                 ^^^

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:185:17
    |
185 |             b'0'...b'9' => self.parse_integer(true, visitor),
    |                 ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
    = note: `#[warn(ellipsis_inclusive_range_patterns)]` on by default

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:189:25
    |
189 |                 let s = try!(self.read.parse_str(&mut self.str_buf));
    |                         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:241:28
    |
241 |             if Some(*c) != try!(self.next_char()) {
    |                            ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:252:15
    |
252 |         match try!(self.next_char_or_null()) {
    |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:255:23
    |
255 |                 match try!(self.peek_or_null()) {
    |                       ^^^

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:256:25
    |
256 |                     b'0'...b'9' => {
    |                         ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:262:21
    |
262 |             c @ b'1'...b'9' => {
    |                     ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:266:27
    |
266 |                     match try!(self.peek_or_null()) {
    |                           ^^^

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:267:33
    |
267 |                         c @ b'0'...b'9' => {
    |                                 ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:303:19
    |
303 |             match try!(self.peek_or_null()) {
    |                   ^^^

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:304:21
    |
304 |                 b'0'...b'9' => {
    |                     ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:334:15
    |
334 |         match try!(self.peek_or_null()) {
    |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:366:37
    |
366 |         while let c @ b'0'...b'9' = try!(self.peek_or_null()) {
    |                                     ^^^

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:366:27
    |
366 |         while let c @ b'0'...b'9' = try!(self.peek_or_null()) {
    |                           ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:374:41
    |
374 |                 while let b'0'...b'9' = try!(self.peek_or_null()) {
    |                                         ^^^

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:374:31
    |
374 |                 while let b'0'...b'9' = try!(self.peek_or_null()) {
    |                               ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:388:15
    |
388 |         match try!(self.peek_or_null()) {
    |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:407:29
    |
407 |         let pos_exp = match try!(self.peek_or_null()) {
    |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:420:29
    |
420 |         let mut exp = match try!(self.next_char_or_null()) {
    |                             ^^^

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:421:21
    |
421 |             c @ b'0'...b'9' => (c - b'0') as i32,
    |                     ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:427:37
    |
427 |         while let c @ b'0'...b'9' = try!(self.peek_or_null()) {
    |                                     ^^^

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:427:27
    |
427 |         while let c @ b'0'...b'9' = try!(self.peek_or_null()) {
    |                           ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:468:33
    |
468 |         while let b'0'...b'9' = try!(self.peek_or_null()) {
    |                                 ^^^

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:468:23
    |
468 |         while let b'0'...b'9' = try!(self.peek_or_null()) {
    |                       ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:521:9
    |
521 |         try!(self.parse_whitespace());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:523:15
    |
523 |         match try!(self.peek()) {
    |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:534:9
    |
534 |         try!(self.parse_whitespace());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:536:15
    |
536 |         match try!(self.next_char()) {
    |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:544:9
    |
544 |         try!(self.parse_whitespace());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:546:15
    |
546 |         match try!(self.next_char()) {
    |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:602:9
    |
602 |         try!(self.parse_whitespace());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:604:15
    |
604 |         match try!(self.peek_or_null()) {
    |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:607:17
    |
607 |                 try!(self.parse_ident(b"ull"));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:637:9
    |
637 |         try!(self.parse_whitespace());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:639:15
    |
639 |         match try!(self.peek_or_null()) {
    |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:651:17
    |
651 |                 try!(self.parse_whitespace());
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:647:29
    |
647 |                 let value = try!(visitor.visit_enum(VariantVisitor::new(self)));
    |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:653:23
    |
653 |                 match try!(self.next_char_or_null()) {
    |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:702:9
    |
702 |         try!(self.parse_whitespace());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:704:15
    |
704 |         match try!(self.peek_or_null()) {
    |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:708:29
    |
708 |                 let slice = try!(self.read.parse_str_raw(&mut self.str_buf));
    |                             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:750:9
    |
750 |         try!(self.de.parse_whitespace());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:752:15
    |
752 |         match try!(self.de.peek()) {
    |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:772:21
    |
772 |         let value = try!(seed.deserialize(&mut *self.de));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:797:9
    |
797 |         try!(self.de.parse_whitespace());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:799:15
    |
799 |         match try!(self.de.peek()) {
    |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:805:17
    |
805 |                 try!(self.de.parse_whitespace());
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:821:15
    |
821 |         match try!(self.de.peek()) {
    |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:822:35
    |
822 |             Some(b'"') => Ok(Some(try!(seed.deserialize(&mut *self.de)))),
    |                                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:831:9
    |
831 |         try!(self.de.parse_object_colon());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:857:9
    |
857 |         try!(self.de.parse_object_colon());
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:856:19
    |
856 |         let val = try!(seed.deserialize(&mut *self.de));
    |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:911:23
    |
911 |         let variant = try!(seed.deserialize(&mut *self.de));
    |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:1027:5
     |
1027 |     try!(de.end());
     |     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/de.rs:1024:17
     |
1024 |     let value = try!(de::Deserialize::deserialize(&mut de));
     |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/map.rs:275:23
    |
275 |         let mut map = try!(serializer.serialize_map(Some(self.len())));
    |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/map.rs:277:13
    |
277 |             try!(map.serialize_key(k));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/map.rs:278:13
    |
278 |             try!(map.serialize_value(v));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/map.rs:311:48
    |
311 |                 while let Some((key, value)) = try!(visitor.visit()) {
    |                                                ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:158:23
    |
158 |         let mut seq = try!(self.serialize_seq(Some(value.len())));
    |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:160:13
    |
160 |             try!(seq.serialize_element(byte));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:207:9
    |
207 |         try!(self.formatter.begin_object(&mut self.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:208:9
    |
208 |         try!(self.formatter.begin_object_key(&mut self.writer, true));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:209:9
    |
209 |         try!(self.serialize_str(variant));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:210:9
    |
210 |         try!(self.formatter.end_object_key(&mut self.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:211:9
    |
211 |         try!(self.formatter.begin_object_value(&mut self.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:212:9
    |
212 |         try!(value.serialize(&mut *self));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:213:9
    |
213 |         try!(self.formatter.end_object_value(&mut self.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:232:13
    |
232 |             try!(self.formatter.begin_array(&mut self.writer));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:233:13
    |
233 |             try!(self.formatter.end_array(&mut self.writer));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:236:13
    |
236 |             try!(self.formatter.begin_array(&mut self.writer));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:268:9
    |
268 |         try!(self.formatter.begin_object(&mut self.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:269:9
    |
269 |         try!(self.formatter.begin_object_key(&mut self.writer, true));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:270:9
    |
270 |         try!(self.serialize_str(variant));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:271:9
    |
271 |         try!(self.formatter.end_object_key(&mut self.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:272:9
    |
272 |         try!(self.formatter.begin_object_value(&mut self.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:279:13
    |
279 |             try!(self.formatter.begin_object(&mut self.writer));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:280:13
    |
280 |             try!(self.formatter.end_object(&mut self.writer));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:283:13
    |
283 |             try!(self.formatter.begin_object(&mut self.writer));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:305:9
    |
305 |         try!(self.formatter.begin_object(&mut self.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:306:9
    |
306 |         try!(self.formatter.begin_object_key(&mut self.writer, true));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:307:9
    |
307 |         try!(self.serialize_str(variant));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:308:9
    |
308 |         try!(self.formatter.end_object_key(&mut self.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:309:9
    |
309 |         try!(self.formatter.begin_object_value(&mut self.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:340:9
    |
340 |         try!(self.formatter.begin_string(&mut self.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:386:9
    |
386 |         try!(self.ser.formatter.begin_array_value(&mut self.ser.writer, self.state == State::First));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:388:9
    |
388 |         try!(value.serialize(&mut *self.ser));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:470:9
    |
470 |         try!(self.ser.formatter.end_object_value(&mut self.ser.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:468:18
    |
468 |             _ => try!(self.ser.formatter.end_array(&mut self.ser.writer)),
    |                  ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:489:9
    |
489 |         try!(self.ser.formatter.begin_object_key(&mut self.ser.writer, self.state == State::First));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:492:9
    |
492 |         try!(key.serialize(MapKeySerializer {
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:506:9
    |
506 |         try!(self.ser.formatter.begin_object_value(&mut self.ser.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:507:9
    |
507 |         try!(value.serialize(&mut *self.ser));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:535:9
    |
535 |         try!(ser::SerializeMap::serialize_key(self, key));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:569:9
    |
569 |         try!(self.ser.formatter.end_object_value(&mut self.ser.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:567:18
    |
567 |             _ => try!(self.ser.formatter.end_object(&mut self.ser.writer)),
    |                  ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:628:9
    |
628 |         try!(self.ser.formatter.begin_string(&mut self.ser.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:629:9
    |
629 |         try!(self.ser.formatter.write_i8(&mut self.ser.writer, value));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:634:9
    |
634 |         try!(self.ser.formatter.begin_string(&mut self.ser.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:635:9
    |
635 |         try!(self.ser.formatter.write_i16(&mut self.ser.writer, value));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:640:9
    |
640 |         try!(self.ser.formatter.begin_string(&mut self.ser.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:641:9
    |
641 |         try!(self.ser.formatter.write_i32(&mut self.ser.writer, value));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:646:9
    |
646 |         try!(self.ser.formatter.begin_string(&mut self.ser.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:647:9
    |
647 |         try!(self.ser.formatter.write_i64(&mut self.ser.writer, value));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:652:9
    |
652 |         try!(self.ser.formatter.begin_string(&mut self.ser.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:653:9
    |
653 |         try!(self.ser.formatter.write_u8(&mut self.ser.writer, value));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:658:9
    |
658 |         try!(self.ser.formatter.begin_string(&mut self.ser.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:659:9
    |
659 |         try!(self.ser.formatter.write_u16(&mut self.ser.writer, value));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:664:9
    |
664 |         try!(self.ser.formatter.begin_string(&mut self.ser.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:665:9
    |
665 |         try!(self.ser.formatter.write_u32(&mut self.ser.writer, value));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:670:9
    |
670 |         try!(self.ser.formatter.begin_string(&mut self.ser.writer));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:671:9
    |
671 |         try!(self.ser.formatter.write_u64(&mut self.ser.writer, value));
    |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1144:13
     |
1144 |             try!(writer.write_all(b"\n"));
     |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1145:13
     |
1145 |             try!(indent(writer, self.current_indent, self.indent));
     |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1160:9
     |
1160 |         try!(indent(writer, self.current_indent, self.indent));
     |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1156:13
     |
1156 |             try!(writer.write_all(b"\n"));
     |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1158:13
     |
1158 |             try!(writer.write_all(b",\n"));
     |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1188:13
     |
1188 |             try!(writer.write_all(b"\n"));
     |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1189:13
     |
1189 |             try!(indent(writer, self.current_indent, self.indent));
     |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1200:13
     |
1200 |             try!(writer.write_all(b"\n"));
     |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1202:13
     |
1202 |             try!(writer.write_all(b",\n"));
     |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1227:5
     |
1227 |     try!(formatter.begin_string(writer));
     |     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1228:5
     |
1228 |     try!(format_escaped_str_contents(writer, formatter, value));
     |     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1229:5
     |
1229 |     try!(formatter.end_string(writer));
     |     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1255:9
     |
1255 |         try!(formatter.write_char_escape(writer, char_escape));
     |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1251:13
     |
1251 |             try!(formatter.write_string_fragment(writer, &bytes[start..i]));
     |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1261:9
     |
1261 |         try!(formatter.write_string_fragment(writer, &bytes[start..]));
     |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1326:5
     |
1326 |     try!(value.serialize(&mut ser));
     |     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1341:5
     |
1341 |     try!(value.serialize(&mut ser));
     |     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1354:5
     |
1354 |     try!(to_writer(&mut writer, value));
     |     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1367:5
     |
1367 |     try!(to_writer_pretty(&mut writer, value));
     |     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1379:15
     |
1379 |     let vec = try!(to_vec(value));
     |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1395:15
     |
1395 |     let vec = try!(to_vec_pretty(value));
     |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/ser.rs:1407:9
     |
1407 |         try!(wr.write_all(s));
     |         ^^^

warning: unexpected `cfg` condition value: `cargo-clippy`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:2227:12
     |
2227 | #[cfg_attr(feature = "cargo-clippy", allow(needless_pass_by_value))]
     |            ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `linked-hash-map` and `preserve_order`
     = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1054:31
     |
1054 |                 let mut map = try!(serializer.serialize_map(Some(m.len())));
     |                               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1056:21
     |
1056 |                     try!(map.serialize_key(k));
     |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1057:21
     |
1057 |                     try!(map.serialize_value(v));
     |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1135:30
     |
1135 |                 let values = try!(de::impls::VecVisitor::new()
     |                              ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1145:48
     |
1145 |                 while let Some((key, value)) = try!(visitor.visit()) {
     |                                                ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1169:9
     |
1169 |         try!(self.inner.write_str(s).map_err(io_error));
     |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1168:17
     |
1168 |         let s = try!(str::from_utf8(buf).map_err(io_error));
     |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1355:46
     |
1355 |         values.insert(String::from(variant), try!(to_value(&value)));
     |                                              ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1474:23
     |
1474 |         self.vec.push(try!(to_value(&value)));
     |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1520:23
     |
1520 |         self.vec.push(try!(to_value(&value)));
     |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1540:15
     |
1540 |         match try!(to_value(&key)) {
     |               ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1561:30
     |
1561 |         self.map.insert(key, try!(to_value(&value)));
     |                              ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1577:9
     |
1577 |         try!(ser::SerializeMap::serialize_key(self, key));
     |         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1593:44
     |
1593 |         self.map.insert(String::from(key), try!(to_value(&value)));
     |                                            ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1621:27
     |
1621 |                 let seq = try!(visitor.visit_seq(&mut deserializer));
     |                           ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1632:27
     |
1632 |                 let map = try!(visitor.visit_map(&mut deserializer));
     |                           ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1807:23
     |
1807 |             let ret = try!(visitor.visit_seq(&mut self));
     |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1915:27
     |
1915 |                 let seq = try!(visitor.visit_seq(&mut deserializer));
     |                           ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:1926:27
     |
1926 |                 let map = try!(visitor.visit_map(&mut deserializer));
     |                           ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/value.rs:2099:23
     |
2099 |             let ret = try!(visitor.visit_seq(&mut self));
     |                       ^^^

warning: unexpected `cfg` condition value: `cargo-clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/number.rs:16:12
   |
16 | #[cfg_attr(feature = "cargo-clippy", allow(enum_variant_names))]
   |            ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `linked-hash-map` and `preserve_order`
   = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:138:22
    |
138 |             let ch = try!(next_or_eof(self));
    |                      ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:148:21
    |
148 |                     try!(parse_escape(self, scratch));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:359:21
    |
359 |                     try!(parse_escape(self, scratch));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:518:11
    |
518 |     match try!(read.next()) {
    |           ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:537:14
    |
537 |     let ch = try!(next_or_eof(read));
    |              ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:550:23
    |
550 |                 match try!(decode_hex_escape(read)) {
    |                       ^^^

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:551:27
    |
551 |                     0xDC00...0xDFFF => {
    |                           ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:557:32
    |
557 |                     n1 @ 0xD800...0xDBFF => {
    |                                ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:558:28
    |
558 |                         if try!(next_or_eof(read)) != b'\\' {
    |                            ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:561:28
    |
561 |                         if try!(next_or_eof(read)) != b'u' {
    |                            ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:565:34
    |
565 |                         let n2 = try!(decode_hex_escape(read));
    |                                  ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:610:19
    |
610 |         n = match try!(next_or_eof(read)) {
    |                   ^^^

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/read.rs:611:21
    |
611 |             c @ b'0'...b'9' => n * 16_u16 + ((c as u16) - (b'0' as u16)),
    |                     ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: use of deprecated method `std::error::Error::description`: use the Display impl or to_string()
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/error.rs:295:53
    |
295 |             ErrorCode::Io(ref err) => error::Error::description(err),
    |                                                     ^^^^^^^^^^^

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-0.9.10/src/error.rs:303:32
    |
303 |     fn cause(&self) -> Option<&error::Error> {
    |                                ^^^^^^^^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
    = note: `#[warn(bare_trait_objects)]` on by default
help: if this is a dyn-compatible trait, use `dyn`
    |
303 |     fn cause(&self) -> Option<&dyn error::Error> {
    |                                +++

       Fresh dasp_frame v0.11.0
warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/lib.rs:66:7
   |
66 | #[cfg(crossbeam_loom)]
   |       ^^^^^^^^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/lib.rs:69:7
   |
69 | #[cfg(crossbeam_loom)]
   |       ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/lib.rs:91:11
   |
91 | #[cfg(not(crossbeam_loom))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/atomic.rs:1675:21
     |
1675 | #[cfg(all(test, not(crossbeam_loom)))]
     |                     ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/atomic.rs:350:15
    |
350 |     #[cfg(not(crossbeam_loom))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/atomic.rs:358:11
    |
358 |     #[cfg(crossbeam_loom)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/collector.rs:112:21
    |
112 | #[cfg(all(test, not(crossbeam_loom)))]
    |                     ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/deferred.rs:90:21
   |
90 | #[cfg(all(test, not(crossbeam_loom)))]
   |                     ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_sanitize`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/internal.rs:56:15
   |
56 | #[cfg(not(any(crossbeam_sanitize, miri)))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_sanitize)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_sanitize)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_sanitize`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/internal.rs:59:11
   |
59 | #[cfg(any(crossbeam_sanitize, miri))]
   |           ^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_sanitize)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_sanitize)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_sanitize`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/internal.rs:300:15
    |
300 | #[cfg(not(any(crossbeam_sanitize, miri)))] // `crossbeam_sanitize` and `miri` reduce the size of `Local`
    |               ^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_sanitize)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_sanitize)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/internal.rs:557:21
    |
557 | #[cfg(all(test, not(crossbeam_loom)))]
    |                     ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_sanitize`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/internal.rs:202:29
    |
202 |         let steps = if cfg!(crossbeam_sanitize) {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_sanitize)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_sanitize)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/sync/mod.rs:5:11
  |
5 | #[cfg(not(crossbeam_loom))]
  |           ^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/sync/list.rs:298:21
    |
298 | #[cfg(all(test, not(crossbeam_loom)))]
    |                     ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/sync/queue.rs:217:21
    |
217 | #[cfg(all(test, not(crossbeam_loom)))]
    |                     ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/default.rs:10:11
   |
10 | #[cfg(not(crossbeam_loom))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/default.rs:64:21
   |
64 | #[cfg(all(test, not(crossbeam_loom)))]
   |                     ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/default.rs:14:15
   |
14 |     #[cfg(not(crossbeam_loom))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/default.rs:22:11
   |
22 |     #[cfg(crossbeam_loom)]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

       Fresh phf v0.7.24
warning: `tinyvec` (lib) generated 140 warnings
warning: `serde_json` (lib) generated 183 warnings
warning: `crossbeam-epoch` (lib) generated 20 warnings
       Fresh combine v4.6.7
warning: elided lifetime has a name
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/combine-4.6.7/src/error.rs:76:61
   |
69 | impl<'s, T, R, F> ErrorInfo<'s, T, R> for Info<T, R, F>
   |      -- lifetime `'s` declared here
...
76 |     fn into_info(&'s self) -> Info<T, R, <Self as ErrorInfo<'_, T, R>>::Format> {
   |                                                             ^^ this elided lifetime gets resolved as `'s`
   |
   = note: `#[warn(elided_named_lifetimes)]` on by default

warning: this item cannot be used as its where bounds are not satisfied for the `Self` type
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/combine-4.6.7/src/parser/choice.rs:499:5
    |
499 | /     fn parse_mode_choice<M>(
500 | |         &mut self,
501 | |         _mode: M,
502 | |         _input: &mut Input,
...   |
505 | |     where
506 | |         M: ParseMode,
    | |_____________________^
    |
    = note: `#[warn(dead_code)]` on by default

       Fresh tracing-core v0.1.34
       Fresh android_system_properties v0.1.5
warning: `extern` fn uses type `unsafe fn(*mut String, *const u8, *const u8, u32)`, which is not FFI-safe
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/android_system_properties-0.1.5/src/lib.rs:56:37
   |
56 | type SystemPropertyReadCallbackFn = unsafe extern "C" fn(*const c_void, Callback, *mut String) -> *const c_void;
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider using an `extern fn(...) -> ...` function pointer instead
   = note: this function pointer has Rust-specific calling convention
   = note: `#[warn(improper_ctypes_definitions)]` on by default

warning: `combine` (lib) generated 2 warnings
warning: `android_system_properties` (lib) generated 1 warning
       Fresh cfg_aliases v0.1.1
warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.1/src/lib.rs:466:35
    |
466 |                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(ambiguous_wide_pointer_comparisons)]` on by default
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
    |
466 -                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);
466 +                     debug_assert!(std::ptr::addr_eq(raw_utf8, &*bytes as *const [u8]));
    |
help: use explicit `std::ptr::eq` method to compare metadata and addresses
    |
466 -                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);
466 +                     debug_assert!(std::ptr::eq(raw_utf8, &*bytes as *const [u8]));
    |

       Fresh tinyvec_macros v0.1.1
       Fresh cesu8 v1.1.0
warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cesu8-1.1.0/src/lib.rs:280:46
    |
280 |                         (0xE0         , 0xA0 ... 0xBF) |
    |                                              ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
    = note: `#[warn(ellipsis_inclusive_range_patterns)]` on by default

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cesu8-1.1.0/src/lib.rs:281:31
    |
281 |                         (0xE1 ... 0xEC, 0x80 ... 0xBF) |
    |                               ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cesu8-1.1.0/src/lib.rs:281:46
    |
281 |                         (0xE1 ... 0xEC, 0x80 ... 0xBF) |
    |                                              ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cesu8-1.1.0/src/lib.rs:282:46
    |
282 |                         (0xED         , 0x80 ... 0x9F) |
    |                                              ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cesu8-1.1.0/src/lib.rs:283:31
    |
283 |                         (0xEE ... 0xEF, 0x80 ... 0xBF) => {
    |                               ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cesu8-1.1.0/src/lib.rs:283:46
    |
283 |                         (0xEE ... 0xEF, 0x80 ... 0xBF) => {
    |                                              ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: `...` range patterns are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cesu8-1.1.0/src/lib.rs:288:46
    |
288 |                         (0xED         , 0xA0 ... 0xAF) => {
    |                                              ^^^ help: use `..=` for an inclusive range
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: trait objects without an explicit `dyn` are deprecated
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cesu8-1.1.0/src/lib.rs:109:32
    |
109 |     fn cause(&self) -> Option<&Error> { None }
    |                                ^^^^^
    |
    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
    = note: `#[warn(bare_trait_objects)]` on by default
help: if this is a dyn-compatible trait, use `dyn`
    |
109 |     fn cause(&self) -> Option<&dyn Error> { None }
    |                                +++

       Fresh cpufeatures v0.2.12
       Fresh either v1.13.0
warning: `percent-encoding` (lib) generated 1 warning
warning: `cesu8` (lib) generated 8 warnings
       Fresh itoa v1.0.11
       Fresh hashbrown v0.14.5
       Fresh openssl-probe v0.1.5
       Fresh tinyvec v1.6.1
warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.1/src/lib.rs:414:35
    |
414 |                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(ambiguous_wide_pointer_comparisons)]` on by default
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
    |
414 -                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);
414 +                     debug_assert!(std::ptr::addr_eq(raw_utf8, &*bytes as *const [u8]));
    |
help: use explicit `std::ptr::eq` method to compare metadata and addresses
    |
414 -                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);
414 +                     debug_assert!(std::ptr::eq(raw_utf8, &*bytes as *const [u8]));
    |

warning: `tinyvec` (lib) generated 140 warnings (140 duplicates)
warning: `form_urlencoded` (lib) generated 1 warning
       Fresh rustls-native-certs v0.8.1
       Fresh jni v0.21.1
warning: unused import: `self::class_desc::*`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jni-0.21.1/src/wrapper/descriptors/mod.rs:5:9
  |
5 | pub use self::class_desc::*;
  |         ^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `self::method_desc::*`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jni-0.21.1/src/wrapper/descriptors/mod.rs:8:9
  |
8 | pub use self::method_desc::*;
  |         ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `self::field_desc::*`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jni-0.21.1/src/wrapper/descriptors/mod.rs:11:9
   |
11 | pub use self::field_desc::*;
   |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `self::exception_desc::*`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jni-0.21.1/src/wrapper/descriptors/mod.rs:14:9
   |
14 | pub use self::exception_desc::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^

warning: elided lifetime has a name
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jni-0.21.1/src/wrapper/objects/jprimitive_array.rs:51:51
   |
50 | impl<'local, T: TypeArray> From<JPrimitiveArray<'local, T>> for JObject<'local> {
   |      ------ lifetime `'local` declared here
51 |     fn from(other: JPrimitiveArray<'local, T>) -> JObject {
   |                                                   ^^^^^^^ this elided lifetime gets resolved as `'local`
   |
   = note: `#[warn(elided_named_lifetimes)]` on by default

warning: this item cannot be used as its where bounds are not satisfied for the `Self` type
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/lib.rs:868:5
    |
868 | /     fn only_derive_is_allowed_to_implement_this_trait()
869 | |     where
870 | |         Self: Sized,
    | |____________________^
    |
    = note: `#[warn(dead_code)]` on by default

warning: this item cannot be used as its where bounds are not satisfied for the `Self` type
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/util/macros.rs:610:17
    |
610 |                   fn only_derive_is_allowed_to_implement_this_trait() {}
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/lib.rs:965:1
    |
965 | / safety_comment! {
966 | |     /// SAFETY:
967 | |     /// `str`, `ManuallyDrop<[T]>` [1], and `UnsafeCell<T>` [2] have the same
968 | |     /// representations as `[u8]`, `[T]`, and `T` repsectively. `str` has
...   |
989 | |     unsafe_impl_known_layout!(T: ?Sized + KnownLayout => #[repr(T)] UnsafeCell<T>);
990 | | }
    | |_- in this macro invocation
    |
    = note: this warning originates in the macro `unsafe_impl_known_layout` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: this item cannot be used as its where bounds are not satisfied for the `Self` type
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/util/macros.rs:224:9
    |
224 |           fn only_derive_is_allowed_to_implement_this_trait() {}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/impls.rs:193:1
    |
193 | / safety_comment! {
194 | |     /// SAFETY:
195 | |     /// Per the Reference [1], `str` has the same layout as `[u8]`.
196 | |     /// - `Immutable`: `[u8]` does not contain any `UnsafeCell`s.
...   |
242 | |     });
243 | | }
    | |_- in this macro invocation
    |
    = note: this warning originates in the macro `unsafe_impl` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: this item cannot be used as its where bounds are not satisfied for the `Self` type
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/util/macros.rs:168:9
    |
168 |           fn only_derive_is_allowed_to_implement_this_trait() {}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/impls.rs:193:1
    |
193 | / safety_comment! {
194 | |     /// SAFETY:
195 | |     /// Per the Reference [1], `str` has the same layout as `[u8]`.
196 | |     /// - `Immutable`: `[u8]` does not contain any `UnsafeCell`s.
...   |
242 | |     });
243 | | }
    | |_- in this macro invocation
    |
    = note: this warning originates in the macro `unsafe_impl` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: this item cannot be used as its where bounds are not satisfied for the `Self` type
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/util/macros.rs:224:9
    |
224 |           fn only_derive_is_allowed_to_implement_this_trait() {}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/impls.rs:698:1
    |
698 | / safety_comment! {
699 | |     /// SAFETY:
700 | |     /// Per the reference [1]:
701 | |     ///
...   |
762 | |     unsafe_impl!(T: Unaligned => Unaligned for [T]);
763 | | }
    | |_- in this macro invocation
    |
    = note: this warning originates in the macro `unsafe_impl` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: this item cannot be used as its where bounds are not satisfied for the `Self` type
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/util/macros.rs:192:9
    |
192 |           fn only_derive_is_allowed_to_implement_this_trait() {}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/impls.rs:698:1
    |
698 | / safety_comment! {
699 | |     /// SAFETY:
700 | |     /// Per the reference [1]:
701 | |     ///
...   |
762 | |     unsafe_impl!(T: Unaligned => Unaligned for [T]);
763 | | }
    | |_- in this macro invocation
    |
    = note: this warning originates in the macro `unsafe_impl` which comes from the expansion of the macro `safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/macros.rs:91:17
    |
91  |                 $crate::util::macro_util::core_reexport::mem::transmute(e)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `f32::from_bits(e)`
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/byteorder.rs:900:1
    |
900 | define_float_conversion!(f32, u32, 4, f32_ext);
    | ---------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unnecessary_transmutes)]` on by default
    = note: this warning originates in the macro `transmute` which comes from the expansion of the macro `define_float_conversion` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/macros.rs:91:17
    |
91  |                 $crate::util::macro_util::core_reexport::mem::transmute(e)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `f32::to_bits(e)`
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/byteorder.rs:900:1
    |
900 | define_float_conversion!(f32, u32, 4, f32_ext);
    | ---------------------------------------------- in this macro invocation
    |
    = note: this warning originates in the macro `transmute` which comes from the expansion of the macro `define_float_conversion` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/macros.rs:91:17
    |
91  |                 $crate::util::macro_util::core_reexport::mem::transmute(e)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `f32::from_bits(e)`
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/byteorder.rs:900:1
    |
900 | define_float_conversion!(f32, u32, 4, f32_ext);
    | ---------------------------------------------- in this macro invocation
    |
    = note: this warning originates in the macro `transmute` which comes from the expansion of the macro `define_float_conversion` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/macros.rs:91:17
    |
91  |                 $crate::util::macro_util::core_reexport::mem::transmute(e)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `f64::from_bits(e)`
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/byteorder.rs:901:1
    |
901 | define_float_conversion!(f64, u64, 8, f64_ext);
    | ---------------------------------------------- in this macro invocation
    |
    = note: this warning originates in the macro `transmute` which comes from the expansion of the macro `define_float_conversion` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unnecessary transmute
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/macros.rs:91:17
    |
91  |                 $crate::util::macro_util::core_reexport::mem::transmute(e)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this with: `f64::to_bits(e)`
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.14/src/byteorder.rs:901:1
    |
901 | define_float_conversion!(f64, u64, 8, f64_ext);
    | ---------------------------------------------- in this macro invocation
    |
    = note: this warning originates in the macro `transmute` which comes from the expansion of the macro `define_float_conversion` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: creating a shared reference to mutable static
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/iana-time-zone-0.1.60/src/tz_android.rs:26:14
   |
26 |     unsafe { PROPERTIES.as_ref() }
   |              ^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
   = note: `#[warn(static_mut_refs)]` on by default

warning: `jni` (lib) generated 5 warnings
warning: `zerocopy` (lib) generated 21 warnings (10 duplicates)
warning: `iana-time-zone` (lib) generated 1 warning
       Fresh thiserror v2.0.11
warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/lib.rs:53:13
   |
53 | #![cfg_attr(doc_cfg, feature(doc_cfg))]
   |             ^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/lib.rs:181:12
    |
181 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "std", feature = "std_rng"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/distributions/mod.rs:116:12
    |
116 | #[cfg_attr(doc_cfg, doc(cfg(feature = "alloc")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `features`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/distributions/distribution.rs:162:7
    |
162 | #[cfg(features = "nightly")]
    |       ^^^^^^^^^^^^^^^^^^^^
    |
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
help: there is a config with a similar name and value
    |
162 - #[cfg(features = "nightly")]
162 + #[cfg(feature = "nightly")]
    |

warning: unexpected `cfg` condition name: `std`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/distributions/utils.rs:235:11
    |
235 | #[cfg(not(std))]
    |           ^^^ help: found config with similar value: `feature = "std"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(std)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(std)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `std`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/distributions/utils.rs:291:19
    |
291 |         #[cfg(not(std))]
    |                   ^^^ help: found config with similar value: `feature = "std"`
...
359 | scalar_float_impl!(f32, u32);
    | ---------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(std)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(std)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `scalar_float_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `std`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/distributions/utils.rs:291:19
    |
291 |         #[cfg(not(std))]
    |                   ^^^ help: found config with similar value: `feature = "std"`
...
360 | scalar_float_impl!(f64, u64);
    | ---------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(std)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(std)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `scalar_float_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/distributions/weighted_index.rs:80:12
   |
80 | #[cfg_attr(doc_cfg, doc(cfg(feature = "alloc")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/distributions/weighted_index.rs:429:12
    |
429 | #[cfg_attr(doc_cfg, doc(cfg(feature = "alloc")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/rng.rs:395:12
    |
395 | #[cfg_attr(doc_cfg, doc(cfg(feature = "min_const_gen")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/rngs/mod.rs:99:12
   |
99 | #[cfg_attr(doc_cfg, doc(cfg(feature = "std")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/rngs/mod.rs:118:12
    |
118 | #[cfg_attr(doc_cfg, doc(cfg(feature = "getrandom")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/rngs/std.rs:32:12
   |
32 | #[cfg_attr(doc_cfg, doc(cfg(feature = "std_rng")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/rngs/thread.rs:60:12
   |
60 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "std", feature = "std_rng"))))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/rngs/thread.rs:87:12
   |
87 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "std", feature = "std_rng"))))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/seq/mod.rs:29:12
   |
29 | #[cfg_attr(doc_cfg, doc(cfg(feature = "alloc")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/seq/mod.rs:623:12
    |
623 | #[cfg_attr(doc_cfg, doc(cfg(feature = "alloc")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/seq/index.rs:276:12
    |
276 | #[cfg_attr(doc_cfg, doc(cfg(feature = "std")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/seq/mod.rs:114:16
    |
114 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "alloc")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/seq/mod.rs:142:16
    |
142 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "alloc")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/seq/mod.rs:170:16
    |
170 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "alloc")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/seq/mod.rs:219:16
    |
219 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "std")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/seq/mod.rs:465:16
    |
465 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "alloc")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: trait `Float` is never used
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/distributions/utils.rs:238:18
    |
238 | pub(crate) trait Float: Sized {
    |                  ^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated items `lanes`, `extract`, and `replace` are never used
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/distributions/utils.rs:247:8
    |
245 | pub(crate) trait FloatAsSIMD: Sized {
    |                  ----------- associated items in this trait
246 |     #[inline(always)]
247 |     fn lanes() -> usize {
    |        ^^^^^
...
255 |     fn extract(self, index: usize) -> Self {
    |        ^^^^^^^
...
260 |     fn replace(self, index: usize, new_value: Self) -> Self {
    |        ^^^^^^^

warning: method `all` is never used
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/distributions/utils.rs:268:8
    |
266 | pub(crate) trait BoolAsSIMD: Sized {
    |                  ---------- method in this trait
267 |     fn any(self) -> bool;
268 |     fn all(self) -> bool;
    |        ^^^

       Fresh target_build_utils v0.3.1
warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/target_build_utils-0.3.1/src/lib.rs:152:21
    |
152 |             let f = try!(File::open(path).map_err(|e| Error::Io(e)));
    |                     ^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/target_build_utils-0.3.1/src/lib.rs:153:34
    |
153 |             let json: s::Value = try!(s::from_reader(f).map_err(|_| Error::InvalidSpec));
    |                                  ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/target_build_utils-0.3.1/src/lib.rs:159:34
    |
159 |                 arch: Cow::Owned(try!(req("arch")).into()),
    |                                  ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/target_build_utils-0.3.1/src/lib.rs:160:32
    |
160 |                 os: Cow::Owned(try!(req("os")).into()),
    |                                ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/target_build_utils-0.3.1/src/lib.rs:162:36
    |
162 |                 endian: Cow::Owned(try!(req("target-endian")).into()),
    |                                    ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/target_build_utils-0.3.1/src/lib.rs:163:43
    |
163 |                 pointer_width: Cow::Owned(try!(req("target-pointer-width")).into()),
    |                                           ^^^

warning: use of deprecated method `std::error::Error::description`: use the Display impl or to_string()
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/target_build_utils-0.3.1/src/lib.rs:80:55
   |
80 |             ref e => fmt.write_str(std::error::Error::description(e)),
   |                                                       ^^^^^^^^^^^

warning: trait objects without an explicit `dyn` are deprecated
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/target_build_utils-0.3.1/src/lib.rs:96:32
   |
96 |     fn cause(&self) -> Option<&::std::error::Error> {
   |                                ^^^^^^^^^^^^^^^^^^^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
   = note: `#[warn(bare_trait_objects)]` on by default
help: if this is a dyn-compatible trait, use `dyn`
   |
96 |     fn cause(&self) -> Option<&dyn (::std::error::Error)> {
   |                                +++++                   +

warning: use of deprecated method `std::error::Error::description`: use the Display impl or to_string()
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/target_build_utils-0.3.1/src/lib.rs:91:35
   |
91 |             Error::Io(ref e) => e.description(),
   |                                   ^^^^^^^^^^^

       Fresh rand_core v0.9.3
       Fresh toml_edit v0.20.2
warning: unexpected `cfg` condition value: `kstring`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/internal_string.rs:8:7
  |
8 | #[cfg(feature = "kstring")]
  |       ^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`
  = help: consider adding `kstring` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `kstring`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/internal_string.rs:10:11
   |
10 | #[cfg(not(feature = "kstring"))]
   |           ^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`
   = help: consider adding `kstring` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `kstring`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/internal_string.rs:59:15
   |
59 |         #[cfg(feature = "kstring")]
   |               ^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`
   = help: consider adding `kstring` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `kstring`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/internal_string.rs:61:19
   |
61 |         #[cfg(not(feature = "kstring"))]
   |                   ^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`
   = help: consider adding `kstring` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: use of deprecated function `winnow::combinator::separated1`: Replaced with `combinator::separated`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/array.rs:4:25
  |
4 | use winnow::combinator::separated1;
  |                         ^^^^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/array.rs:5:20
  |
5 | use winnow::trace::trace;
  |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/array.rs:17:5
   |
17 |     trace("array", move |input: &mut Input<'i>| {
   |     ^^^^^

warning: use of deprecated function `winnow::combinator::separated1`: Replaced with `combinator::separated`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/array.rs:48:18
   |
48 |                 (separated1(array_value(check), ARRAY_SEP), opt(ARRAY_SEP)).map(
   |                  ^^^^^^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/datetime.rs:14:20
   |
14 | use winnow::trace::trace;
   |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/datetime.rs:25:5
   |
25 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/datetime.rs:56:5
   |
56 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/datetime.rs:66:5
   |
66 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/datetime.rs:86:5
   |
86 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/document.rs:10:20
   |
10 | use winnow::trace::trace;
   |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/document.rs:106:5
    |
106 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::combinator::separated0`: Replaced with `combinator::separated`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/inline_table.rs:3:25
  |
3 | use winnow::combinator::separated0;
  |                         ^^^^^^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/inline_table.rs:5:20
  |
5 | use winnow::trace::trace;
  |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/inline_table.rs:24:5
   |
24 |     trace("inline-table", move |input: &mut Input<'i>| {
   |     ^^^^^

warning: use of deprecated function `winnow::combinator::separated0`: Replaced with `combinator::separated`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/inline_table.rs:127:13
    |
127 |             separated0(keyval(check), INLINE_TABLE_SEP),
    |             ^^^^^^^^^^

warning: use of deprecated function `winnow::combinator::separated1`: Replaced with `combinator::separated`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/key.rs:4:25
  |
4 | use winnow::combinator::separated1;
  |                         ^^^^^^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/key.rs:7:20
  |
7 | use winnow::trace::trace;
  |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/key.rs:21:5
   |
21 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::combinator::separated1`: Replaced with `combinator::separated`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/key.rs:23:9
   |
23 |         separated1(
   |         ^^^^^^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/key.rs:47:5
   |
47 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/key.rs:66:5
   |
66 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::token::tag`: Replaced with `literal`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/numbers.rs:11:20
   |
11 | use winnow::token::tag;
   |                    ^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/numbers.rs:13:20
   |
13 | use winnow::trace::trace;
   |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/numbers.rs:23:5
   |
23 |     trace("boolean", alt((true_, false_))).parse_next(input)
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/numbers.rs:42:5
   |
42 |     trace("integer",
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/numbers.rs:56:5
   |
56 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/numbers.rs:95:5
   |
95 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/numbers.rs:128:5
    |
128 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/numbers.rs:162:5
    |
162 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/numbers.rs:199:5
    |
199 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::token::tag`: Replaced with `literal`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/numbers.rs:299:5
    |
299 |     tag(INF).value(f64::INFINITY).parse_next(input)
    |     ^^^

warning: use of deprecated function `winnow::token::tag`: Replaced with `literal`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/numbers.rs:304:5
    |
304 |     tag(NAN).value(f64::NAN).parse_next(input)
    |     ^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:13:25
   |
13 | use winnow::combinator::success;
   |                         ^^^^^^^

warning: use of deprecated function `winnow::token::tag`: Replaced with `literal`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:20:20
   |
20 | use winnow::token::tag;
   |                    ^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:22:20
   |
22 | use winnow::trace::trace;
   |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:33:5
   |
33 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:49:5
   |
49 |     trace("basic-string", |input: &mut Input<'i>| {
   |     ^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:113:17
    |
113 |         b'b' => success('\u{8}'),
    |                 ^^^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:114:17
    |
114 |         b'f' => success('\u{c}'),
    |                 ^^^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:115:17
    |
115 |         b'n' => success('\n'),
    |                 ^^^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:116:17
    |
116 |         b'r' => success('\r'),
    |                 ^^^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:117:17
    |
117 |         b't' => success('\t'),
    |                 ^^^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:120:18
    |
120 |         b'\\' => success('\\'),
    |                  ^^^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:121:17
    |
121 |         b'"' => success('"'),
    |                 ^^^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:153:5
    |
153 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::token::tag`: Replaced with `literal`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:190:38
    |
190 |     if let Some(qi) = opt(mlb_quotes(tag(ML_BASIC_STRING_DELIM).value(()))).parse_next(input)? {
    |                                      ^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:261:5
    |
261 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:290:5
    |
290 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::token::tag`: Replaced with `literal`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.20.2/src/parser/strings.rs:323:24
    |
323 |         opt(mll_quotes(tag(ML_LITERAL_STRING_DELIM).value(()))),
    |                        ^^^

warning: `rand` (lib) generated 26 warnings
warning: `target_build_utils` (lib) generated 9 warnings
warning: `toml_edit` (lib) generated 53 warnings
       Fresh crossbeam-epoch v0.9.18
       Fresh android-tzdata v0.1.1
warning: `crossbeam-epoch` (lib) generated 20 warnings (20 duplicates)
       Fresh fnv v1.0.7
warning: unnecessary qualification
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.1/src/lib.rs:54:13
   |
54 |             crate::ColorChoice::Auto,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: requested on the command line with `-W unused-qualifications`
help: remove the unnecessary path segments
   |
54 -             crate::ColorChoice::Auto,
54 +             ColorChoice::Auto,
   |

warning: unnecessary qualification
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.1/src/lib.rs:70:13
   |
70 |             crate::ColorChoice::Auto => 0,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: remove the unnecessary path segments
   |
70 -             crate::ColorChoice::Auto => 0,
70 +             ColorChoice::Auto => 0,
   |

warning: unnecessary qualification
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.1/src/lib.rs:71:13
   |
71 |             crate::ColorChoice::AlwaysAnsi => 1,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: remove the unnecessary path segments
   |
71 -             crate::ColorChoice::AlwaysAnsi => 1,
71 +             ColorChoice::AlwaysAnsi => 1,
   |

warning: unnecessary qualification
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.1/src/lib.rs:72:13
   |
72 |             crate::ColorChoice::Always => 2,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: remove the unnecessary path segments
   |
72 -             crate::ColorChoice::Always => 2,
72 +             ColorChoice::Always => 2,
   |

warning: unnecessary qualification
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.1/src/lib.rs:73:13
   |
73 |             crate::ColorChoice::Never => 3,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: remove the unnecessary path segments
   |
73 -             crate::ColorChoice::Never => 3,
73 +             ColorChoice::Never => 3,
   |

warning: unnecessary qualification
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.1/src/lib.rs:79:23
   |
79 |             0 => Some(crate::ColorChoice::Auto),
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: remove the unnecessary path segments
   |
79 -             0 => Some(crate::ColorChoice::Auto),
79 +             0 => Some(ColorChoice::Auto),
   |

warning: unnecessary qualification
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.1/src/lib.rs:80:23
   |
80 |             1 => Some(crate::ColorChoice::AlwaysAnsi),
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: remove the unnecessary path segments
   |
80 -             1 => Some(crate::ColorChoice::AlwaysAnsi),
80 +             1 => Some(ColorChoice::AlwaysAnsi),
   |

warning: unnecessary qualification
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.1/src/lib.rs:81:23
   |
81 |             2 => Some(crate::ColorChoice::Always),
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: remove the unnecessary path segments
   |
81 -             2 => Some(crate::ColorChoice::Always),
81 +             2 => Some(ColorChoice::Always),
   |

warning: unnecessary qualification
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.1/src/lib.rs:82:23
   |
82 |             3 => Some(crate::ColorChoice::Never),
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: remove the unnecessary path segments
   |
82 -             3 => Some(crate::ColorChoice::Never),
82 +             3 => Some(ColorChoice::Never),
   |

       Fresh utf8parse v0.2.2
       Fresh zerocopy v0.8.14
warning: `colorchoice` (lib) generated 9 warnings
warning: `zerocopy` (lib) generated 21 warnings (21 duplicates)
       Fresh anstyle-parse v0.2.4
       Fresh http v1.3.1
warning: creating a shared reference to mutable static
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-core-1.12.1/src/registry.rs:167:33
    |
167 |         .or_else(|err| unsafe { THE_REGISTRY.as_ref().ok_or(err) })
    |                                 ^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
    = note: `#[warn(static_mut_refs)]` on by default

warning: creating a mutable reference to mutable static
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-core-1.12.1/src/registry.rs:194:55
    |
194 |             .map(|registry: Arc<Registry>| unsafe { &*THE_REGISTRY.get_or_insert(registry) })
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives

       Fresh crossbeam-deque v0.8.5
warning: `http` (lib) generated 6 warnings (6 duplicates)
warning: `rayon-core` (lib) generated 2 warnings
       Fresh httparse v1.10.1
       Fresh rand_chacha v0.9.0
       Fresh proc-macro-crate v2.0.2
       Fresh memoffset v0.9.1
warning: unexpected `cfg` condition name: `doctests`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/lib.rs:59:7
   |
59 | #[cfg(doctests)]
   |       ^^^^^^^^ help: there is a config with a similar name: `doctest`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doctests)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doctests)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `doctests`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/lib.rs:62:7
   |
62 | #[cfg(doctests)]
   |       ^^^^^^^^ help: there is a config with a similar name: `doctest`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doctests)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doctests)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `raw_ref_macros`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/raw_field.rs:22:7
   |
22 | #[cfg(raw_ref_macros)]
   |       ^^^^^^^^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(raw_ref_macros)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(raw_ref_macros)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `raw_ref_macros`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/raw_field.rs:30:11
   |
30 | #[cfg(not(raw_ref_macros))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(raw_ref_macros)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(raw_ref_macros)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/raw_field.rs:57:7
   |
57 | #[cfg(allow_clippy)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/raw_field.rs:69:11
   |
69 | #[cfg(not(allow_clippy))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/raw_field.rs:90:7
   |
90 | #[cfg(allow_clippy)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/raw_field.rs:100:11
    |
100 | #[cfg(not(allow_clippy))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/raw_field.rs:125:7
    |
125 | #[cfg(allow_clippy)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/raw_field.rs:141:11
    |
141 | #[cfg(not(allow_clippy))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tuple_ty`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/raw_field.rs:183:7
    |
183 | #[cfg(tuple_ty)]
    |       ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tuple_ty)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tuple_ty)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `maybe_uninit`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:23:7
   |
23 | #[cfg(maybe_uninit)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(maybe_uninit)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(maybe_uninit)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `maybe_uninit`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:37:11
   |
37 | #[cfg(not(maybe_uninit))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(maybe_uninit)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(maybe_uninit)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_const`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:49:7
   |
49 | #[cfg(stable_const)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_const)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_const)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_const`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:61:11
   |
61 | #[cfg(not(stable_const))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_const)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_const)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:70:11
   |
70 | #[cfg(not(stable_offset_of))]
   |           ^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:83:7
   |
83 | #[cfg(stable_offset_of)]
   |       ^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tuple_ty`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:127:7
    |
127 | #[cfg(tuple_ty)]
    |       ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tuple_ty)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tuple_ty)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:128:11
    |
128 | #[cfg(not(stable_offset_of))]
    |           ^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tuple_ty`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:142:7
    |
142 | #[cfg(tuple_ty)]
    |       ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tuple_ty)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tuple_ty)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:143:7
    |
143 | #[cfg(stable_offset_of)]
    |       ^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tuple_ty`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:160:7
    |
160 | #[cfg(tuple_ty)]
    |       ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tuple_ty)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tuple_ty)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:170:11
    |
170 | #[cfg(not(stable_offset_of))]
    |           ^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/offset_of.rs:184:7
    |
184 | #[cfg(stable_offset_of)]
    |       ^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

       Fresh unicode-normalization v0.1.23
       Fresh sha1 v0.10.6
warning: unexpected `cfg` condition value: ``
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha1-0.10.6/src/compress/x86.rs:100:1
    |
100 | cpufeatures::new!(shani_cpuid, "sha", "sse2", "ssse3", "sse4.1");
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
    = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `$crate::__unless_target_features` crate for guidance on how handle this unexpected cfg
    = help: the macro `$crate::__unless_target_features` may come from an old version of the `cpufeatures` crate, try updating your dependency with `cargo update -p cpufeatures`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default
    = note: this warning originates in the macro `$crate::__unless_target_features` which comes from the expansion of the macro `cpufeatures::new` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: ``
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha1-0.10.6/src/compress/x86.rs:100:1
    |
100 | cpufeatures::new!(shani_cpuid, "sha", "sse2", "ssse3", "sse4.1");
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
    = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `$crate::__unless_target_features` crate for guidance on how handle this unexpected cfg
    = help: the macro `$crate::__unless_target_features` may come from an old version of the `cpufeatures` crate, try updating your dependency with `cargo update -p cpufeatures`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `$crate::__unless_target_features` which comes from the expansion of the macro `cpufeatures::new` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `memoffset` (lib) generated 24 warnings
warning: `sha1` (lib) generated 4 warnings (2 duplicates)
       Fresh zstd-sys v2.0.11+zstd.1.5.6
       Fresh http-body v1.0.1
       Fresh trackable_derive v1.0.0
       Fresh hmac v0.12.1
       Fresh rand_core v0.6.4
warning: unused import: `cc::Build`
 --> /home/saroj/.cargo/git/checkouts/machine-uid-f51f5046c7c2430a/381ff57/build.rs:1:5
  |
1 | use cc::Build;
  |     ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

       Fresh webpki-roots v0.26.9
       Fresh tracing-attributes v0.1.29
warning: `rand_core` (lib) generated 6 warnings (6 duplicates)
warning: `machine-uid` (build script) generated 1 warning
       Fresh dirs-sys-next v0.1.2
warning: unused import: `CStr`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dirs-sys-next-0.1.2/src/lib.rs:21:20
   |
21 |     use std::ffi::{CStr, OsString};
   |                    ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::mem`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dirs-sys-next-0.1.2/src/lib.rs:22:9
   |
22 |     use std::mem;
   |         ^^^^^^^^

warning: unused import: `std::os::unix::ffi::OsStringExt`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dirs-sys-next-0.1.2/src/lib.rs:23:9
   |
23 |     use std::os::unix::ffi::OsStringExt;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::ptr`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dirs-sys-next-0.1.2/src/lib.rs:25:9
   |
25 |     use std::ptr;
   |         ^^^^^^^^

       Fresh crc32fast v1.4.2
       Fresh unicode-bidi v0.3.15
       Fresh equivalent v1.0.1
       Fresh dasp_ring_buffer v0.11.0
warning: `dirs-sys-next` (lib) generated 4 warnings
       Fresh anstyle-query v1.1.0
       Fresh adler v1.0.2
       Fresh try-lock v0.2.5
       Fresh is_terminal_polyfill v1.70.0
       Fresh iana-time-zone v0.1.60
       Fresh percent-encoding v2.3.1
warning: `percent-encoding` (lib) generated 1 warning (1 duplicate)
       Fresh colorchoice v1.0.1
       Fresh anstyle v1.0.7
       Fresh miniz_oxide v0.7.4
       Fresh form_urlencoded v1.2.1
       Fresh want v0.3.1
warning: `colorchoice` (lib) generated 9 warnings (9 duplicates)
warning: `miniz_oxide` (lib) generated 1 warning (1 duplicate)
warning: `form_urlencoded` (lib) generated 1 warning (1 duplicate)
       Fresh anstream v0.6.14
       Fresh chrono v0.4.41
warning: unexpected `cfg` condition value: `kstring`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/internal_string.rs:8:7
  |
8 | #[cfg(feature = "kstring")]
  |       ^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`
  = help: consider adding `kstring` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `kstring`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/internal_string.rs:10:11
   |
10 | #[cfg(not(feature = "kstring"))]
   |           ^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`
   = help: consider adding `kstring` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `kstring`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/internal_string.rs:59:15
   |
59 |         #[cfg(feature = "kstring")]
   |               ^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`
   = help: consider adding `kstring` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `kstring`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/internal_string.rs:61:19
   |
61 |         #[cfg(not(feature = "kstring"))]
   |                   ^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`
   = help: consider adding `kstring` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: use of deprecated function `winnow::combinator::separated1`: Replaced with `combinator::separated`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/array.rs:4:25
  |
4 | use winnow::combinator::separated1;
  |                         ^^^^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/array.rs:5:20
  |
5 | use winnow::trace::trace;
  |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/array.rs:17:5
   |
17 |     trace("array", move |input: &mut Input<'i>| {
   |     ^^^^^

warning: use of deprecated function `winnow::combinator::separated1`: Replaced with `combinator::separated`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/array.rs:48:18
   |
48 |                 (separated1(array_value(check), ARRAY_SEP), opt(ARRAY_SEP)).map(
   |                  ^^^^^^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/datetime.rs:14:20
   |
14 | use winnow::trace::trace;
   |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/datetime.rs:25:5
   |
25 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/datetime.rs:56:5
   |
56 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/datetime.rs:66:5
   |
66 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/datetime.rs:86:5
   |
86 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/document.rs:10:20
   |
10 | use winnow::trace::trace;
   |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/document.rs:106:5
    |
106 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::combinator::separated0`: Replaced with `combinator::separated`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/inline_table.rs:3:25
  |
3 | use winnow::combinator::separated0;
  |                         ^^^^^^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/inline_table.rs:5:20
  |
5 | use winnow::trace::trace;
  |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/inline_table.rs:24:5
   |
24 |     trace("inline-table", move |input: &mut Input<'i>| {
   |     ^^^^^

warning: use of deprecated function `winnow::combinator::separated0`: Replaced with `combinator::separated`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/inline_table.rs:106:13
    |
106 |             separated0(keyval(check), INLINE_TABLE_SEP),
    |             ^^^^^^^^^^

warning: use of deprecated function `winnow::combinator::separated1`: Replaced with `combinator::separated`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/key.rs:4:25
  |
4 | use winnow::combinator::separated1;
  |                         ^^^^^^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/key.rs:7:20
  |
7 | use winnow::trace::trace;
  |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/key.rs:21:5
   |
21 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::combinator::separated1`: Replaced with `combinator::separated`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/key.rs:23:9
   |
23 |         separated1(
   |         ^^^^^^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/key.rs:47:5
   |
47 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/key.rs:66:5
   |
66 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::token::tag`: Replaced with `literal`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/numbers.rs:11:20
   |
11 | use winnow::token::tag;
   |                    ^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/numbers.rs:13:20
   |
13 | use winnow::trace::trace;
   |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/numbers.rs:23:5
   |
23 |     trace("boolean", alt((true_, false_))).parse_next(input)
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/numbers.rs:42:5
   |
42 |     trace("integer",
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/numbers.rs:56:5
   |
56 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/numbers.rs:95:5
   |
95 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/numbers.rs:128:5
    |
128 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/numbers.rs:162:5
    |
162 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/numbers.rs:199:5
    |
199 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::token::tag`: Replaced with `literal`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/numbers.rs:299:5
    |
299 |     tag(INF).value(f64::INFINITY).parse_next(input)
    |     ^^^

warning: use of deprecated function `winnow::token::tag`: Replaced with `literal`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/numbers.rs:304:5
    |
304 |     tag(NAN).value(f64::NAN).parse_next(input)
    |     ^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:13:25
   |
13 | use winnow::combinator::success;
   |                         ^^^^^^^

warning: use of deprecated function `winnow::token::tag`: Replaced with `literal`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:20:20
   |
20 | use winnow::token::tag;
   |                    ^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:22:20
   |
22 | use winnow::trace::trace;
   |                    ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:33:5
   |
33 |     trace(
   |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:49:5
   |
49 |     trace("basic-string", |input: &mut Input<'i>| {
   |     ^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:113:17
    |
113 |         b'b' => success('\u{8}'),
    |                 ^^^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:114:17
    |
114 |         b'f' => success('\u{c}'),
    |                 ^^^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:115:17
    |
115 |         b'n' => success('\n'),
    |                 ^^^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:116:17
    |
116 |         b'r' => success('\r'),
    |                 ^^^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:117:17
    |
117 |         b't' => success('\t'),
    |                 ^^^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:120:18
    |
120 |         b'\\' => success('\\'),
    |                  ^^^^^^^

warning: use of deprecated function `winnow::combinator::success`: Replaced with empty.value(...)`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:121:17
    |
121 |         b'"' => success('"'),
    |                 ^^^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:153:5
    |
153 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::token::tag`: Replaced with `literal`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:190:38
    |
190 |     if let Some(qi) = opt(mlb_quotes(tag(ML_BASIC_STRING_DELIM).value(()))).parse_next(input)? {
    |                                      ^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:261:5
    |
261 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::trace::trace`: Replaced with `winnow::combinator::trace`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:290:5
    |
290 |     trace(
    |     ^^^^^

warning: use of deprecated function `winnow::token::tag`: Replaced with `literal`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.19.15/src/parser/strings.rs:323:24
    |
323 |         opt(mll_quotes(tag(ML_LITERAL_STRING_DELIM).value(()))),
    |                        ^^^

       Fresh flate2 v1.0.30
warning: `toml_edit` (lib) generated 53 warnings
       Fresh indexmap v2.2.6
       Fresh idna v0.5.0
       Fresh rand_chacha v0.3.1
       Fresh tracing v0.1.41
       Fresh rayon-core v1.12.1
       Fresh trackable v1.3.0
warning: `rayon-core` (lib) generated 2 warnings (2 duplicates)
       Fresh nix v0.28.0
warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/lib.rs:134:7
    |
134 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/lib.rs:143:11
    |
143 | #[cfg(any(freebsdlike, target_os = "linux", target_os = "netbsd"))]
    |           ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/lib.rs:125:15
    |
125 |     #[cfg(any(linux_android,
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/lib.rs:126:15
    |
126 |               bsd,
    |               ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/lib.rs:127:15
    |
127 |               solarish))]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:835:11
    |
835 | #[cfg(any(linux_android, target_os = "fuchsia"))]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:1129:7
     |
1129 | #[cfg(apple_targets)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:2441:7
     |
2441 | #[cfg(solarish)]
     |       ^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:23:18
   |
23 |                  apple_targets,))] {
   |                  ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:27:48
   |
27 |     } else if #[cfg(any(target_os = "android", netbsdlike))] {
   |                                                ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:39:21
   |
39 |     } else if #[cfg(solarish)] {
   |                     ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:277:13
    |
277 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:278:13
    |
278 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:285:13
    |
285 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:286:13
    |
286 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:293:13
    |
293 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:294:13
    |
294 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:301:13
    |
301 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:302:13
    |
302 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:309:13
    |
309 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:310:13
    |
310 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:317:13
    |
317 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:318:13
    |
318 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:325:13
    |
325 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:326:13
    |
326 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:333:13
    |
333 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:334:13
    |
334 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:340:19
    |
340 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:340:34
    |
340 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:343:19
    |
343 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:343:34
    |
343 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:346:19
    |
346 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:346:34
    |
346 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:349:19
    |
349 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:349:34
    |
349 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:352:19
    |
352 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:352:34
    |
352 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:355:19
    |
355 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:355:34
    |
355 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:358:19
    |
358 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:358:34
    |
358 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:362:13
    |
362 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:363:13
    |
363 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:370:13
    |
370 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:371:13
    |
371 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:378:13
    |
378 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:379:13
    |
379 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:386:13
    |
386 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:387:13
    |
387 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:393:19
    |
393 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:393:34
    |
393 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:396:19
    |
396 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:396:34
    |
396 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:400:13
    |
400 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:401:13
    |
401 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:408:13
    |
408 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:409:13
    |
409 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:415:19
    |
415 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:415:34
    |
415 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:418:19
    |
418 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:418:34
    |
418 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:421:19
    |
421 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:421:34
    |
421 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:425:13
    |
425 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:426:13
    |
426 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:433:13
    |
433 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:434:13
    |
434 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:440:19
    |
440 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:443:19
    |
443 |         #[cfg(any(linux_android, target_os = "aix", target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:446:15
    |
446 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:450:13
    |
450 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:458:19
    |
458 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:458:34
    |
458 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:461:19
    |
461 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:461:34
    |
461 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:464:19
    |
464 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:464:34
    |
464 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:467:19
    |
467 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:467:34
    |
467 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:470:19
    |
470 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:470:34
    |
470 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:473:19
    |
473 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:473:34
    |
473 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:476:19
    |
476 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:476:34
    |
476 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:480:13
    |
480 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:481:13
    |
481 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:488:13
    |
488 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:489:13
    |
489 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:497:13
    |
497 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:498:13
    |
498 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:504:19
    |
504 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:504:34
    |
504 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:507:19
    |
507 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:507:34
    |
507 |         #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:511:13
    |
511 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:518:19
    |
518 |         #[cfg(any(linux_android, target_os = "fuchsia", target_os = "hurd"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:521:19
    |
521 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:524:19
    |
524 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:527:19
    |
527 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:530:19
    |
530 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:533:19
    |
533 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:536:19
    |
536 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:540:13
    |
540 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:548:13
    |
548 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:555:13
    |
555 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:556:13
    |
556 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:562:19
    |
562 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:565:19
    |
565 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:568:19
    |
568 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:571:19
    |
571 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:575:13
    |
575 |             linux_android,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:582:15
    |
582 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:585:19
    |
585 |         #[cfg(any(linux_android, target_os = "aix", target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:588:15
    |
588 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:603:15
    |
603 |         #[cfg(freebsdlike)]
    |               ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:606:19
    |
606 |         #[cfg(any(freebsdlike, target_os = "hurd", target_os = "redox"))]
    |                   ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:609:19
    |
609 |         #[cfg(any(freebsdlike, target_os = "hurd", target_os = "redox"))]
    |                   ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:618:19
    |
618 |         #[cfg(any(bsd, target_os = "hurd"))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:621:19
    |
621 |         #[cfg(any(bsd, target_os = "redox", solarish))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:621:45
    |
621 |         #[cfg(any(bsd, target_os = "redox", solarish))]
    |                                             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:625:13
    |
625 |             freebsdlike,
    |             ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:626:13
    |
626 |             apple_targets,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:634:19
    |
634 |         #[cfg(any(bsd, target_os = "haiku"))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:638:13
    |
638 |             bsd,
    |             ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:646:13
    |
646 |             bsd,
    |             ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:654:13
    |
654 |             freebsdlike,
    |             ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:655:13
    |
655 |             apple_targets,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:661:19
    |
661 |         #[cfg(any(freebsdlike, apple_targets, target_os = "openbsd"))]
    |                   ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:661:32
    |
661 |         #[cfg(any(freebsdlike, apple_targets, target_os = "openbsd"))]
    |                                ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:665:13
    |
665 |             bsd,
    |             ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:667:13
    |
667 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:673:19
    |
673 |         #[cfg(any(bsd, target_os = "aix", target_os = "hurd"))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:677:13
    |
677 |             bsd,
    |             ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:685:13
    |
685 |             bsd,
    |             ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:686:13
    |
686 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:695:13
    |
695 |             bsd,
    |             ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:696:13
    |
696 |             solarish,
    |             ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:703:19
    |
703 |         #[cfg(any(bsd, target_os = "aix", target_os = "redox"))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:706:19
    |
706 |         #[cfg(any(bsd, target_os = "hurd"))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:709:19
    |
709 |         #[cfg(any(bsd, target_os = "hurd"))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:712:19
    |
712 |         #[cfg(any(bsd, target_os = "hurd"))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:715:19
    |
715 |         #[cfg(any(bsd, target_os = "hurd"))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:718:19
    |
718 |         #[cfg(any(bsd, target_os = "hurd"))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:721:19
    |
721 |         #[cfg(any(bsd, target_os = "hurd"))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:724:19
    |
724 |         #[cfg(any(bsd, target_os = "hurd"))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:728:13
    |
728 |             bsd,
    |             ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:735:15
    |
735 |         #[cfg(apple_targets)]
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:738:15
    |
738 |         #[cfg(apple_targets)]
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:741:15
    |
741 |         #[cfg(apple_targets)]
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:744:15
    |
744 |         #[cfg(apple_targets)]
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:747:15
    |
747 |         #[cfg(apple_targets)]
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:750:15
    |
750 |         #[cfg(apple_targets)]
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:753:19
    |
753 |         #[cfg(any(apple_targets, target_os = "netbsd", target_os = "haiku"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:757:13
    |
757 |             apple_targets,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:764:19
    |
764 |         #[cfg(any(apple_targets, target_os = "netbsd", target_os = "haiku"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:768:13
    |
768 |             apple_targets,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:776:13
    |
776 |             apple_targets,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:784:13
    |
784 |             apple_targets,
    |             ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:791:19
    |
791 |         #[cfg(any(apple_targets, solarish, target_os = "aix"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:791:34
    |
791 |         #[cfg(any(apple_targets, solarish, target_os = "aix"))]
    |                                  ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:794:15
    |
794 |         #[cfg(apple_targets)]
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:797:15
    |
797 |         #[cfg(apple_targets)]
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:809:15
    |
809 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:812:15
    |
812 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/errno.rs:815:15
    |
815 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/fcntl.rs:8:5
  |
8 |     apple_targets,
  |     ^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/fcntl.rs:24:5
   |
24 |     apple_targets,
   |     ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/fcntl.rs:29:11
   |
29 | #[cfg(any(linux_android, target_os = "freebsd"))]
   |           ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/fcntl.rs:36:5
   |
36 |     linux_android,
   |     ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/fcntl.rs:194:30
    |
194 |     all(feature = "process", linux_android),
    |                              ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/fcntl.rs:466:11
    |
466 | #[cfg(any(linux_android, target_os = "freebsd"))]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/fcntl.rs:846:7
    |
846 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/ifaddrs.rs:7:7
  |
7 | #[cfg(apple_targets)]
  |       ^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/ifaddrs.rs:56:7
   |
56 | #[cfg(apple_targets)]
   |       ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/ifaddrs.rs:36:18
   |
36 |     if #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia"))] {
   |                  ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/ifaddrs.rs:90:15
   |
90 |         #[cfg(apple_targets)]
   |               ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/ifaddrs.rs:92:19
   |
92 |         #[cfg(not(apple_targets))]
   |                   ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:10:11
   |
10 | #[cfg(not(solarish))]
   |           ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:13:7
   |
13 | #[cfg(solarish)]
   |       ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:256:5
    |
256 |     bsd,
    |     ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:259:5
    |
259 |     solarish,
    |     ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:383:5
    |
383 |     bsd,
    |     ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:386:5
    |
386 |     solarish,
    |     ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:52:19
   |
52 |                   linux_android,
   |                   ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:53:19
   |
53 |                   solarish,
   |                   ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:54:19
   |
54 |                   apple_targets,
   |                   ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:64:19
   |
64 |                   linux_android,
   |                   ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:65:19
   |
65 |                   bsd,
   |                   ^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:66:19
   |
66 |                   solarish,
   |                   ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:80:19
   |
80 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
   |                   ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:83:42
   |
83 |         #[cfg(any(target_os = "freebsd", apple_targets, netbsdlike))]
   |                                          ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:83:57
   |
83 |         #[cfg(any(target_os = "freebsd", apple_targets, netbsdlike))]
   |                                                         ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:86:15
   |
86 |         #[cfg(solarish)]
   |               ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:90:19
   |
90 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
   |                   ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:93:15
   |
93 |         #[cfg(bsd)]
   |               ^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:99:15
   |
99 |         #[cfg(bsd)]
   |               ^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:102:15
    |
102 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:106:19
    |
106 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:109:15
    |
109 |         #[cfg(bsd)]
    |               ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:112:15
    |
112 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:116:19
    |
116 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:119:15
    |
119 |         #[cfg(bsd)]
    |               ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:122:19
    |
122 |         #[cfg(any(freebsdlike, apple_targets))]
    |                   ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:122:32
    |
122 |         #[cfg(any(freebsdlike, apple_targets))]
    |                                ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:125:15
    |
125 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:129:19
    |
129 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:132:15
    |
132 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:144:15
    |
144 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:150:15
    |
150 |         #[cfg(freebsdlike)]
    |               ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:153:15
    |
153 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:159:15
    |
159 |         #[cfg(freebsdlike)]
    |               ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:162:15
    |
162 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:165:15
    |
165 |         #[cfg(freebsdlike)]
    |               ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:168:15
    |
168 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:174:15
    |
174 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:183:15
    |
183 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:189:15
    |
189 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:192:15
    |
192 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:195:19
    |
195 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:198:19
    |
198 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:201:19
    |
201 |         #[cfg(any(linux_android, target_os = "fuchsia"))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:204:15
    |
204 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:207:15
    |
207 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:210:15
    |
210 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:213:15
    |
213 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:216:15
    |
216 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:219:15
    |
219 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:222:15
    |
222 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:225:15
    |
225 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:228:15
    |
228 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:231:15
    |
231 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:234:15
    |
234 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:237:15
    |
237 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:240:15
    |
240 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/net/if_.rs:243:15
    |
243 |         #[cfg(solarish)]
    |               ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:3:5
  |
3 |     freebsdlike,
  |     ^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:5:5
  |
5 |     apple_targets,
  |     ^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:34:11
   |
34 | #[cfg(any(bsd, linux_android, target_os = "redox", solarish))]
   |           ^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:34:16
   |
34 | #[cfg(any(bsd, linux_android, target_os = "redox", solarish))]
   |                ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:34:52
   |
34 | #[cfg(any(bsd, linux_android, target_os = "redox", solarish))]
   |                                                    ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:40:11
   |
40 | #[cfg(any(linux_android, target_os = "freebsd"))]
   |           ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:69:11
   |
69 | #[cfg(any(linux_android, bsd))]
   |           ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:69:26
   |
69 | #[cfg(any(linux_android, bsd))]
   |                          ^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:82:32
   |
82 | #[cfg(any(target_os = "linux", netbsdlike))]
   |                                ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:91:5
   |
91 |     solarish,
   |     ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:104:11
    |
104 | #[cfg(any(linux_android, freebsdlike, apple_targets, solarish))]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:104:26
    |
104 | #[cfg(any(linux_android, freebsdlike, apple_targets, solarish))]
    |                          ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:104:39
    |
104 | #[cfg(any(linux_android, freebsdlike, apple_targets, solarish))]
    |                                       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:104:54
    |
104 | #[cfg(any(linux_android, freebsdlike, apple_targets, solarish))]
    |                                                      ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:112:7
    |
112 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:131:11
    |
131 | #[cfg(any(linux_android, freebsdlike, apple_targets, target_os = "openbsd"))]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:131:26
    |
131 | #[cfg(any(linux_android, freebsdlike, apple_targets, target_os = "openbsd"))]
    |                          ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:131:39
    |
131 | #[cfg(any(linux_android, freebsdlike, apple_targets, target_os = "openbsd"))]
    |                                       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:142:7
    |
142 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:170:7
    |
170 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:176:7
    |
176 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/mod.rs:185:9
    |
185 |         solarish,
    |         ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/signal.rs:13:7
   |
13 | #[cfg(freebsdlike)]
   |       ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/signal.rs:318:9
    |
318 |     any(linux_android, target_os = "emscripten", target_os = "fuchsia"),
    |         ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/signal.rs:335:9
    |
335 |     any(linux_android, target_os = "emscripten", target_os = "fuchsia"),
    |         ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/signal.rs:360:5
    |
360 |     linux_android,
    |     ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:4:34
  |
4 | #[cfg(any(target_os = "freebsd", linux_android))]
  |                                  ^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:37:7
   |
37 | #[cfg(solarish)]
   |       ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:39:11
   |
39 | #[cfg(not(solarish))]
   |           ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:41:15
   |
41 | #[cfg(not(any(solarish, target_os = "haiku", target_os = "hurd", target_os = "redox")))]
   |               ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:44:11
   |
44 | #[cfg(any(solarish, target_os = "haiku", target_os = "hurd", target_os = "redox"))]
   |           ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:48:7
   |
48 | #[cfg(linux_android)]
   |       ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:50:7
   |
50 | #[cfg(linux_android)]
   |       ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:52:7
   |
52 | #[cfg(apple_targets)]
   |       ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:55:11
   |
55 | #[cfg(any(linux_android, apple_targets))]
   |           ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:55:26
   |
55 | #[cfg(any(linux_android, apple_targets))]
   |                          ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:226:7
    |
226 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:2086:5
     |
2086 |     freebsdlike,
     |     ^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:2087:5
     |
2087 |     netbsdlike,
     |     ^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:2090:5
     |
2090 |     solarish,
     |     ^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:127:11
    |
127 |     #[cfg(apple_targets)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:132:11
    |
132 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:136:11
    |
136 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:140:11
    |
140 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:144:11
    |
144 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:148:11
    |
148 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:152:11
    |
152 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:156:11
    |
156 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:160:11
    |
160 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:164:11
    |
164 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:168:11
    |
168 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:172:11
    |
172 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:176:11
    |
176 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:180:11
    |
180 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:184:11
    |
184 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:188:11
    |
188 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:193:11
    |
193 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:199:11
    |
199 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:475:18
    |
475 |     if #[cfg(any(freebsdlike, apple_targets))] {
    |                  ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:475:31
    |
475 |     if #[cfg(any(freebsdlike, apple_targets))] {
    |                               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:371:14
    |
371 |     if #[cfg(linux_android)] {
    |              ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:426:21
    |
426 |     } else if #[cfg(freebsdlike)] {
    |                     ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:2:5
  |
2 |     bsd,
  |     ^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:3:5
  |
3 |     linux_android,
  |     ^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:4:5
  |
4 |     solarish,
  |     ^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:11:11
   |
11 | #[cfg(any(linux_android, apple_targets))]
   |           ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:11:26
   |
11 | #[cfg(any(linux_android, apple_targets))]
   |                          ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:15:7
   |
15 | #[cfg(linux_android)]
   |       ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:17:7
   |
17 | #[cfg(linux_android)]
   |       ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:19:30
   |
19 | #[cfg(all(feature = "ioctl", apple_targets))]
   |                              ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:603:7
    |
603 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1488:7
     |
1488 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1561:7
     |
1561 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1789:11
     |
1789 | #[cfg(any(linux_android, target_os = "fuchsia"))]
     |           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1882:11
     |
1882 | #[cfg(any(bsd, solarish, target_os = "haiku", target_os = "aix"))]
     |           ^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1882:16
     |
1882 | #[cfg(any(bsd, solarish, target_os = "haiku", target_os = "aix"))]
     |                ^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1995:11
     |
1995 | #[cfg(any(linux_android, apple_targets))]
     |           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1995:26
     |
1995 | #[cfg(any(linux_android, apple_targets))]
     |                          ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:66:11
   |
66 |     #[cfg(linux_android)]
   |           ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:69:19
   |
69 |     #[cfg(not(any(linux_android, target_os = "redox")))]
   |                   ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:72:15
   |
72 |     #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
   |               ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:72:30
   |
72 |     #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
   |                              ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:75:11
   |
75 |     #[cfg(apple_targets)]
   |           ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:78:11
   |
78 |     #[cfg(linux_android)]
   |           ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:88:11
   |
88 |     #[cfg(linux_android)]
   |           ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:94:11
   |
94 |     #[cfg(linux_android)]
   |           ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:97:11
   |
97 |     #[cfg(linux_android)]
   |           ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:100:11
    |
100 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:105:11
    |
105 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:111:11
    |
111 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:115:11
    |
115 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:118:11
    |
118 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:121:11
    |
121 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:124:11
    |
124 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:127:11
    |
127 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:130:11
    |
130 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:136:11
    |
136 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:139:11
    |
139 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:143:11
    |
143 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:146:11
    |
146 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:155:11
    |
155 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:158:11
    |
158 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:163:9
    |
163 |         solarish,
    |         ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:164:9
    |
164 |         apple_targets,
    |         ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:171:11
    |
171 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:174:11
    |
174 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:179:9
    |
179 |         solarish,
    |         ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:186:11
    |
186 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:189:11
    |
189 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:193:11
    |
193 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:196:11
    |
196 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:202:15
    |
202 |     #[cfg(any(linux_android, apple_targets))]
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:202:30
    |
202 |     #[cfg(any(linux_android, apple_targets))]
    |                              ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:205:11
    |
205 |     #[cfg(bsd)]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:208:11
    |
208 |     #[cfg(bsd)]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:211:11
    |
211 |     #[cfg(bsd)]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:214:15
    |
214 |     #[cfg(any(apple_targets, netbsdlike))]
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:214:30
    |
214 |     #[cfg(any(apple_targets, netbsdlike))]
    |                              ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:217:11
    |
217 |     #[cfg(bsd)]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:220:11
    |
220 |     #[cfg(bsd)]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:223:11
    |
223 |     #[cfg(bsd)]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:226:11
    |
226 |     #[cfg(bsd)]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:229:11
    |
229 |     #[cfg(bsd)]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:232:11
    |
232 |     #[cfg(bsd)]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:235:15
    |
235 |     #[cfg(any(bsd, solarish))]
    |               ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:235:20
    |
235 |     #[cfg(any(bsd, solarish))]
    |                    ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:238:11
    |
238 |     #[cfg(bsd)]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:241:11
    |
241 |     #[cfg(bsd)]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:244:11
    |
244 |     #[cfg(bsd)]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:247:11
    |
247 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:288:19
    |
288 |     #[cfg(not(any(bsd, target_os = "haiku", target_os = "hurd")))]
    |                   ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:302:11
    |
302 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1082:11
     |
1082 |     #[cfg(linux_android)]
     |           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1090:11
     |
1090 |     #[cfg(linux_android)]
     |           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1092:34
     |
1092 |     #[cfg(all(feature = "ioctl", apple_targets))]
     |                                  ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1101:15
     |
1101 |     #[cfg(any(linux_android, apple_targets))]
     |               ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1101:30
     |
1101 |     #[cfg(any(linux_android, apple_targets))]
     |                              ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:262:19
    |
262 |             #[cfg(linux_android)]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:264:19
    |
264 |             #[cfg(apple_targets)]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:266:27
    |
266 |             #[cfg(not(any(linux_android, target_os = "redox")))]
    |                           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:268:19
    |
268 |             #[cfg(linux_android)]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:270:23
    |
270 |             #[cfg(any(bsd, solarish))]
    |                       ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:270:28
    |
270 |             #[cfg(any(bsd, solarish))]
    |                            ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:272:23
    |
272 |             #[cfg(any(linux_android, apple_targets))]
    |                       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:272:38
    |
272 |             #[cfg(any(linux_android, apple_targets))]
    |                                      ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:315:15
    |
315 |         #[cfg(linux_android)]
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:386:11
    |
386 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:416:11
    |
416 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:476:11
    |
476 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:485:11
    |
485 |     #[cfg(linux_android)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:366:23
    |
366 |             #[cfg(any(bsd, target_os = "haiku", target_os = "hurd"))]
    |                       ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:445:26
    |
445 |             if #[cfg(any(linux_android,
    |                          ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:447:22
    |
447 |                      solarish,
    |                      ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:509:26
    |
509 |             if #[cfg(any(linux_android,
    |                          ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:511:22
    |
511 |                      solarish,
    |                      ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:526:9
    |
526 |         linux_android,
    |         ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:528:9
    |
528 |         solarish,
    |         ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:555:26
    |
555 |             if #[cfg(any(linux_android,
    |                          ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:557:26
    |
557 |                          solarish,
    |                          ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:585:26
    |
585 |             if #[cfg(any(linux_android,
    |                          ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:587:26
    |
587 |                          solarish,
    |                          ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:620:19
    |
620 |             #[cfg(linux_android)]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:704:18
    |
704 |         if #[cfg(bsd)] {
    |                  ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:824:17
    |
824 |                 bsd,
    |                 ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:898:17
    |
898 |                 bsd,
    |                 ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1023:17
     |
1023 |                 bsd,
     |                 ^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1186:15
     |
1186 |     #[cfg(any(linux_android, target_os = "fuchsia", solarish))]
     |               ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1186:53
     |
1186 |     #[cfg(any(linux_android, target_os = "fuchsia", solarish))]
     |                                                     ^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1127:21
     |
1127 |                     linux_android,
     |                     ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1129:21
     |
1129 |                     solarish,
     |                     ^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1147:23
     |
1147 |                 #[cfg(linux_android)]
     |                       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1159:27
     |
1159 |                 #[cfg(any(bsd, solarish, target_os = "haiku"))]
     |                           ^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1159:32
     |
1159 |                 #[cfg(any(bsd, solarish, target_os = "haiku"))]
     |                                ^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1164:23
     |
1164 |                 #[cfg(linux_android)]
     |                       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1168:27
     |
1168 |                 #[cfg(any(linux_android, target_os = "fuchsia"))]
     |                           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1173:46
     |
1173 |                 #[cfg(all(feature = "ioctl", apple_targets))]
     |                                              ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1177:27
     |
1177 |                 #[cfg(any(linux_android, apple_targets))]
     |                           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1177:42
     |
1177 |                 #[cfg(any(linux_android, apple_targets))]
     |                                          ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1300:11
     |
1300 |     #[cfg(linux_android)]
     |           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1304:15
     |
1304 |     #[cfg(any(linux_android, target_os = "fuchsia"))]
     |               ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1310:15
     |
1310 |     #[cfg(any(bsd, solarish))]
     |               ^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1310:20
     |
1310 |     #[cfg(any(bsd, solarish))]
     |                    ^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1326:11
     |
1326 |     #[cfg(linux_android)]
     |           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1330:34
     |
1330 |     #[cfg(all(feature = "ioctl", apple_targets))]
     |                                  ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1335:15
     |
1335 |     #[cfg(any(linux_android, apple_targets))]
     |               ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1335:30
     |
1335 |     #[cfg(any(linux_android, apple_targets))]
     |                              ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1245:26
     |
1245 |             if #[cfg(any(linux_android,
     |                          ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1247:22
     |
1247 |                      solarish,
     |                      ^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1274:26
     |
1274 |             if #[cfg(any(linux_android,
     |                          ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1276:22
     |
1276 |                      solarish,
     |                      ^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1354:23
     |
1354 |                 #[cfg(linux_android)]
     |                       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1360:27
     |
1360 |                 #[cfg(any(bsd, solarish))]
     |                           ^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1360:32
     |
1360 |                 #[cfg(any(bsd, solarish))]
     |                                ^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1363:23
     |
1363 |                 #[cfg(linux_android)]
     |                       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1365:27
     |
1365 |                 #[cfg(any(linux_android, target_os = "fuchsia"))]
     |                           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1368:23
     |
1368 |                 #[cfg(apple_targets)]
     |                       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1372:27
     |
1372 |                 #[cfg(any(linux_android, apple_targets))]
     |                           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1372:42
     |
1372 |                 #[cfg(any(linux_android, apple_targets))]
     |                                          ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1416:23
     |
1416 |                 #[cfg(linux_android)]
     |                       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1422:27
     |
1422 |                 #[cfg(any(bsd, solarish))]
     |                           ^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1422:32
     |
1422 |                 #[cfg(any(bsd, solarish))]
     |                                ^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1425:23
     |
1425 |                 #[cfg(linux_android)]
     |                       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1427:27
     |
1427 |                 #[cfg(any(linux_android, target_os = "fuchsia"))]
     |                           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1430:23
     |
1430 |                 #[cfg(apple_targets)]
     |                       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1434:27
     |
1434 |                 #[cfg(any(linux_android, apple_targets))]
     |                           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1434:42
     |
1434 |                 #[cfg(any(linux_android, apple_targets))]
     |                                          ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1446:23
     |
1446 |                 #[cfg(linux_android)]
     |                       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1452:27
     |
1452 |                 #[cfg(any(bsd, solarish))]
     |                           ^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1452:32
     |
1452 |                 #[cfg(any(bsd, solarish))]
     |                                ^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1455:23
     |
1455 |                 #[cfg(linux_android)]
     |                       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1457:27
     |
1457 |                 #[cfg(any(linux_android, target_os = "fuchsia"))]
     |                           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1460:23
     |
1460 |                 #[cfg(apple_targets)]
     |                       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1464:27
     |
1464 |                 #[cfg(any(linux_android, apple_targets))]
     |                           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:1464:42
     |
1464 |                 #[cfg(any(linux_android, apple_targets))]
     |                                          ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:2040:15
     |
2040 |         #[cfg(linux_android)]
     |               ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:2046:15
     |
2046 |         #[cfg(apple_targets)]
     |               ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:2066:15
     |
2066 |         #[cfg(linux_android)]
     |               ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:2071:15
     |
2071 |         #[cfg(apple_targets)]
     |               ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/addr.rs:2096:19
     |
2096 |             #[cfg(apple_targets)]
     |                   ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:263:11
    |
263 | #[cfg(not(solarish))]
    |           ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:414:11
    |
414 | #[cfg(any(linux_android, target_os = "fuchsia"))]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:426:7
    |
426 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:497:11
    |
497 | #[cfg(any(freebsdlike, apple_targets))]
    |           ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:497:24
    |
497 | #[cfg(any(freebsdlike, apple_targets))]
    |                        ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:507:7
    |
507 | #[cfg(apple_targets)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:516:7
    |
516 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:536:7
    |
536 | #[cfg(apple_targets)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:548:11
    |
548 | #[cfg(any(freebsdlike, linux_android))]
    |           ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:548:24
    |
548 | #[cfg(any(freebsdlike, linux_android))]
    |                        ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:587:11
    |
587 | #[cfg(any(linux_android, target_os = "fuchsia"))]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:625:7
    |
625 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:661:7
    |
661 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:672:7
    |
672 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:701:7
    |
701 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:710:7
    |
710 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:722:7
    |
722 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:732:7
    |
732 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:751:7
    |
751 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:770:7
    |
770 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:855:7
    |
855 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:877:11
    |
877 | #[cfg(any(linux_android, apple_targets, target_os = "netbsd"))]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:877:26
    |
877 | #[cfg(any(linux_android, apple_targets, target_os = "netbsd"))]
    |                          ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:889:11
    |
889 | #[cfg(any(linux_android, target_os = "freebsd", apple_targets, netbsdlike))]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:889:49
    |
889 | #[cfg(any(linux_android, target_os = "freebsd", apple_targets, netbsdlike))]
    |                                                 ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:889:64
    |
889 | #[cfg(any(linux_android, target_os = "freebsd", apple_targets, netbsdlike))]
    |                                                                ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:901:7
    |
901 | #[cfg(bsd)]
    |       ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:913:7
    |
913 | #[cfg(bsd)]
    |       ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:925:11
    |
925 | #[cfg(any(linux_android, target_os = "freebsd"))]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:971:11
    |
971 | #[cfg(any(linux_android, target_os = "fuchsia"))]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:992:7
    |
992 | #[cfg(linux_android)]
    |       ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1001:7
     |
1001 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1010:7
     |
1010 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1019:11
     |
1019 | #[cfg(any(linux_android, target_os = "freebsd"))]
     |           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1029:11
     |
1029 | #[cfg(any(linux_android, target_os = "freebsd"))]
     |           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1038:11
     |
1038 | #[cfg(any(linux_android, target_os = "freebsd"))]
     |           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1050:7
     |
1050 | #[cfg(apple_targets)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1059:11
     |
1059 | #[cfg(any(linux_android, apple_targets))]
     |           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `apple_targets`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1059:26
     |
1059 | #[cfg(any(linux_android, apple_targets))]
     |                          ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1071:7
     |
1071 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1077:7
     |
1077 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1097:7
     |
1097 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1101:7
     |
1101 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1108:7
     |
1108 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1144:7
     |
1144 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1148:7
     |
1148 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1155:7
     |
1155 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:561:14
    |
561 |     if #[cfg(linux_android)] {
    |              ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:320:14
    |
320 |     if #[cfg(linux_android)] {
    |              ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:331:25
    |
331 |     } else if #[cfg(any(bsd, solarish))] {
    |                         ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:331:30
    |
331 |     } else if #[cfg(any(bsd, solarish))] {
    |                              ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: elided lifetime has a name
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/sockopt.rs:1556:34
     |
1555 | impl<'a> Set<'a, OsString> for SetOsString<'a> {
     |      -- lifetime `'a` declared here
1556 |     fn new(val: &'a OsString) -> SetOsString {
     |                                  ^^^^^^^^^^^ this elided lifetime gets resolved as `'a`
     |
     = note: `#[warn(elided_named_lifetimes)]` on by default

warning: unexpected `cfg` condition name: `apple_targets`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:222:11
    |
222 |     #[cfg(apple_targets)]
    |           ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(apple_targets)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(apple_targets)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:256:19
    |
256 |         #[cfg(any(linux_android,
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:257:19
    |
257 |                   freebsdlike,
    |                   ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:258:19
    |
258 |                   netbsdlike,
    |                   ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:259:19
    |
259 |                   solarish))]
    |                   ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:262:19
    |
262 |         #[cfg(any(linux_android,
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:263:19
    |
263 |                   freebsdlike,
    |                   ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:264:19
    |
264 |                   netbsdlike,
    |                   ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:265:19
    |
265 |                   solarish))]
    |                   ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:321:15
    |
321 |         #[cfg(linux_android)]
    |               ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:330:19
    |
330 |         #[cfg(any(linux_android, freebsdlike, netbsdlike))]
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:330:34
    |
330 |         #[cfg(any(linux_android, freebsdlike, netbsdlike))]
    |                                  ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:330:47
    |
330 |         #[cfg(any(linux_android, freebsdlike, netbsdlike))]
    |                                               ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:334:19
    |
334 |         #[cfg(any(linux_android,
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:335:19
    |
335 |                   freebsdlike,
    |                   ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:336:19
    |
336 |                   solarish,
    |                   ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:337:19
    |
337 |                   netbsdlike,
    |                   ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:343:19
    |
343 |         #[cfg(any(linux_android,
    |                   ^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `netbsdlike`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/socket/mod.rs:344:19
    |
344 |                   netbsdlike,
    |                   ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(netbsdlike)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(netbsdlike)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `solarish`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/sys/time.rs:20:13
   |
20 |             solarish,
   |             ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(solarish)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(solarish)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/unistd.rs:7:30
  |
7 |     all(feature = "process", linux_android)
  |                              ^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `bsd`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/unistd.rs:26:27
   |
26 | #[cfg(all(feature = "fs", bsd))]
   |                           ^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bsd)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(bsd)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/unistd.rs:51:11
   |
51 | #[cfg(any(freebsdlike, linux_android, target_os = "openbsd"))]
   |           ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/unistd.rs:51:24
   |
51 | #[cfg(any(freebsdlike, linux_android, target_os = "openbsd"))]
   |                        ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/unistd.rs:54:11
   |
54 | #[cfg(any(freebsdlike, linux_android, target_os = "openbsd"))]
   |           ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/unistd.rs:54:24
   |
54 | #[cfg(any(freebsdlike, linux_android, target_os = "openbsd"))]
   |                        ^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/unistd.rs:2849:7
     |
2849 | #[cfg(linux_android)]
     |       ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/unistd.rs:2876:11
     |
2876 | #[cfg(any(linux_android, freebsdlike, target_os = "openbsd"))]
     |           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/unistd.rs:2876:26
     |
2876 | #[cfg(any(linux_android, freebsdlike, target_os = "openbsd"))]
     |                          ^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `linux_android`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/unistd.rs:2921:11
     |
2921 | #[cfg(any(linux_android, freebsdlike, target_os = "openbsd"))]
     |           ^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(linux_android)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(linux_android)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `freebsdlike`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.28.0/src/unistd.rs:2921:26
     |
2921 | #[cfg(any(linux_android, freebsdlike, target_os = "openbsd"))]
     |                          ^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(freebsdlike)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(freebsdlike)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

       Fresh num_enum_derive v0.7.2
       Fresh rand v0.9.0
       Fresh paste v1.0.15
warning: `nix` (lib) generated 538 warnings
       Fresh prettyplease v0.2.20
       Fresh tokio-util v0.7.15
       Fresh tokio-rustls v0.26.0
       Fresh futures-executor v0.3.30
       Fresh toml_datetime v0.6.3
       Fresh serde_spanned v0.6.6
       Fresh itertools v0.12.1
warning: use of deprecated method `de::Deserializer::<'a>::end`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml-0.5.11/src/de.rs:79:7
   |
79 |     d.end()?;
   |       ^^^
   |
   = note: `#[warn(deprecated)]` on by default

warning: `toml` (lib) generated 1 warning
       Fresh ryu v1.0.18
warning: unused import: `crate::windows::*`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nu-ansi-term-0.49.0/src/lib.rs:255:9
    |
255 | pub use crate::windows::*;
    |         ^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

       Fresh winnow v0.5.40
       Fresh utf-8 v0.7.6
       Fresh rustc-hash v2.1.1
       Fresh bitflags v2.9.1
       Fresh ndk-context v0.1.1
warning: creating a mutable reference to mutable static
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ndk-context-0.1.1/src/lib.rs:83:20
   |
83 |       let previous = ANDROID_CONTEXT.replace(AndroidContext {
   |  ____________________^
84 | |         java_vm,
85 | |         context_jobject,
86 | |     });
   | |______^ mutable reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives
   = note: `#[warn(static_mut_refs)]` on by default

warning: creating a mutable reference to mutable static
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ndk-context-0.1.1/src/lib.rs:98:20
   |
98 |     let previous = ANDROID_CONTEXT.take();
   |                    ^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives

warning: `nu-ansi-term` (lib) generated 1 warning
warning: `winnow` (lib) generated 26 warnings (26 duplicates)
warning: `ndk-context` (lib) generated 2 warnings
       Fresh data-encoding v2.9.0
       Fresh tower-service v0.3.3
       Fresh gimli v0.29.0
       Fresh signature v1.6.4
       Fresh serde_json v1.0.118
       Fresh ed25519 v1.5.3
warning: creating a mutable reference to mutable static
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/backtrace-0.3.73/src/symbolize/gimli.rs:339:11
    |
339 |         f(MAPPINGS_CACHE.get_or_insert_with(|| Cache::new()))
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives
    = note: `#[warn(static_mut_refs)]` on by default

       Fresh addr2line v0.22.0
       Fresh tungstenite v0.26.2
       Fresh toml_edit v0.19.15
warning: unexpected `cfg` condition value: `notify`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flexi_logger-0.27.4/src/flexi_error.rs:43:11
   |
43 |     #[cfg(feature = "notify")]
   |           ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `async`, `colors`, `compress`, `default`, `dont_minimize_extra_stacks`, `is-terminal`, `specfile`, `specfile_without_notification`, `syslog_writer`, `textfilter`, and `trc`
   = help: consider adding `notify` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: `#[must_use]` has no effect when applied to a provided trait method
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flexi_logger-0.27.4/src/file_spec.rs:43:5
   |
43 |     #[must_use]
   |     ^^^^^^^^^^^
   |
   = note: `#[warn(unused_attributes)]` on by default

warning: `#[must_use]` has no effect when applied to a provided trait method
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flexi_logger-0.27.4/src/log_specification.rs:427:5
    |
427 |     #[must_use]
    |     ^^^^^^^^^^^

warning: field `1` is never read
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flexi_logger-0.27.4/src/write_mode.rs:120:31
    |
120 |     BufferAndFlushWith(usize, Duration),
    |     ------------------        ^^^^^^^^
    |     |
    |     field in this variant
    |
    = note: `#[warn(dead_code)]` on by default
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
    |
120 -     BufferAndFlushWith(usize, Duration),
120 +     BufferAndFlushWith(usize, ()),
    |

       Fresh bindgen v0.71.1
warning: `backtrace` (lib) generated 1 warning
warning: `toml_edit` (lib) generated 53 warnings (53 duplicates)
warning: `flexi_logger` (lib) generated 4 warnings
       Fresh libsodium-sys v0.2.7
       Fresh bindgen v0.65.1
warning: unexpected `cfg` condition value: `prettyplease`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.65.1/lib.rs:174:11
    |
174 |     #[cfg(feature = "prettyplease")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `__cli`, `annotate-snippets`, `default`, `experimental`, `log`, `logging`, `runtime`, `static`, `testing_only_extra_assertions`, `testing_only_libclang_5`, `testing_only_libclang_9`, `which`, and `which-rustfmt`
    = help: consider adding `prettyplease` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `features`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.65.1/options/mod.rs:1342:17
     |
1342 |                 features = "experimental",
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
help: there is a config with a similar name and value
     |
1342 -                 features = "experimental",
1342 +                 feature = "experimental",
     |

warning: unexpected `cfg` condition name: `testing_only_extra_assertions`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.65.1/ir/item.rs:101:7
    |
101 | #[cfg(testing_only_extra_assertions)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: found config with similar value: `feature = "testing_only_extra_assertions"`
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(testing_only_extra_assertions)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(testing_only_extra_assertions)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `testing_only_extra_assertions`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.65.1/ir/item.rs:104:11
    |
104 | #[cfg(not(testing_only_extra_assertions))]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: found config with similar value: `feature = "testing_only_extra_assertions"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(testing_only_extra_assertions)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(testing_only_extra_assertions)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `testing_only_extra_assertions`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.65.1/ir/item.rs:107:11
    |
107 | #[cfg(not(testing_only_extra_assertions))]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: found config with similar value: `feature = "testing_only_extra_assertions"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(testing_only_extra_assertions)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(testing_only_extra_assertions)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `prettyplease`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.65.1/lib.rs:192:19
    |
192 |             #[cfg(feature = "prettyplease")]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `__cli`, `annotate-snippets`, `default`, `experimental`, `log`, `logging`, `runtime`, `static`, `testing_only_extra_assertions`, `testing_only_libclang_5`, `testing_only_libclang_9`, `which`, and `which-rustfmt`
    = help: consider adding `prettyplease` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `prettyplease`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.65.1/lib.rs:204:19
    |
204 |             #[cfg(feature = "prettyplease")]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `__cli`, `annotate-snippets`, `default`, `experimental`, `log`, `logging`, `runtime`, `static`, `testing_only_extra_assertions`, `testing_only_libclang_5`, `testing_only_libclang_9`, `which`, and `which-rustfmt`
    = help: consider adding `prettyplease` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `prettyplease`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.65.1/lib.rs:970:19
    |
970 |             #[cfg(feature = "prettyplease")]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `__cli`, `annotate-snippets`, `default`, `experimental`, `log`, `logging`, `runtime`, `static`, `testing_only_extra_assertions`, `testing_only_libclang_5`, `testing_only_libclang_9`, `which`, and `which-rustfmt`
    = help: consider adding `prettyplease` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: trait `HasFloat` is never used
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bindgen-0.65.1/ir/item.rs:89:18
   |
89 | pub(crate) trait HasFloat {
   |                  ^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: oboe-sys@0.6.1: In file included from oboe/src/aaudio/AudioStreamAAudio.cpp:22:
warning: oboe-sys@0.6.1: In file included from oboe/src/aaudio/AudioStreamAAudio.h:27:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/aaudio/AudioStreamAAudio.cpp:26:
warning: oboe-sys@0.6.1: In file included from oboe/src/aaudio/AAudioExtensions.h:26:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.cpp:17:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.cpp:17:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioStream.cpp:21:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: 1 warning generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioStreamBuilder.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/aaudio/AAudioExtensions.h:26:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioStreamBuilder.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/aaudio/AAudioExtensions.h:26:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/common/DataConversionFlowGraph.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/DataConversionFlowGraph.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/common/DataConversionFlowGraph.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/DataConversionFlowGraph.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/common/FilterAudioStream.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/FilterAudioStream.h:21:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/common/FilterAudioStream.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/FilterAudioStream.h:22:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/DataConversionFlowGraph.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/common/LatencyTuner.cpp:17:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: 1 warning generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceFloatCaller.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceFloatCaller.h:24:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceFloatCaller.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceFloatCaller.h:24:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceI16Caller.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceI16Caller.h:24:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceI16Caller.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceI16Caller.h:24:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceI24Caller.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceI24Caller.h:24:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceI24Caller.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceI24Caller.h:24:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceI32Caller.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceI32Caller.h:25:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceI32Caller.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/SourceI32Caller.h:25:
warning: oboe-sys@0.6.1: In file included from oboe/src/common/AudioSourceCaller.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/common/Utilities.cpp:26:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: 1 warning generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/common/QuirksManager.cpp:18:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/common/QuirksManager.cpp:18:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: oboe/src/common/QuirksManager.cpp:159:47: warning: unused parameter 'builder' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     bool isMMapSafe(const AudioStreamBuilder &builder) override {
warning: oboe-sys@0.6.1:                                               ^
warning: oboe-sys@0.6.1: 3 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioInputStreamOpenSLES.cpp:24:
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioInputStreamOpenSLES.h:24:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioInputStreamOpenSLES.cpp:24:
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioInputStreamOpenSLES.h:24:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioOutputStreamOpenSLES.cpp:25:
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioOutputStreamOpenSLES.h:24:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioOutputStreamOpenSLES.cpp:25:
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioOutputStreamOpenSLES.h:24:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioStreamBuffered.cpp:19:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioStreamBuffered.cpp:19:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: oboe/src/opensles/AudioStreamBuffered.cpp:263:25: warning: comparison of integers of different signs: 'int32_t' (aka 'int') and 'uint32_t' (aka 'unsigned int') [-Wsign-compare]
warning: oboe-sys@0.6.1:     if (requestedFrames > mFifoBuffer->getBufferCapacityInFrames()) {
warning: oboe-sys@0.6.1:         ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: 3 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioStreamOpenSLES.cpp:21:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioStreamOpenSLES.cpp:26:
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/AudioStreamOpenSLES.h:25:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: oboe/src/opensles/AudioStreamOpenSLES.cpp:44:22: warning: comparison of integers of different signs: 'int' and 'const SLuint32' (aka 'const unsigned int') [-Wsign-compare]
warning: oboe-sys@0.6.1:     if (channelCount > kAudioChannelCountMax) {
warning: oboe-sys@0.6.1:         ~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~
warning: oboe-sys@0.6.1: oboe/src/opensles/AudioStreamOpenSLES.cpp:193:58: warning: unused parameter 'sampleRate' [-Wunused-parameter]
warning: oboe-sys@0.6.1: Result AudioStreamOpenSLES::configureBufferSizes(int32_t sampleRate) {
warning: oboe-sys@0.6.1:                                                          ^
warning: oboe-sys@0.6.1: 4 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/EngineOpenSLES.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/OpenSLESUtilities.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/EngineOpenSLES.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/OpenSLESUtilities.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/OpenSLESUtilities.cpp:17:
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/OpenSLESUtilities.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/OpenSLESUtilities.cpp:17:
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/OpenSLESUtilities.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/OutputMixerOpenSLES.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/OpenSLESUtilities.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/OutputMixerOpenSLES.cpp:20:
warning: oboe-sys@0.6.1: In file included from oboe/src/opensles/OpenSLESUtilities.h:21:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: In file included from oboe/src/common/StabilizedCallback.cpp:17:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/StabilizedCallback.h:21:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: 1 warning generated.
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe-ext/src/AudioStreamWrapper.cpp:1:
warning: oboe-sys@0.6.1: In file included from oboe-ext/include/oboe/OboeExt.h:4:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe-ext/src/AudioStreamWrapper.cpp:1:
warning: oboe-sys@0.6.1: In file included from oboe-ext/include/oboe/OboeExt.h:4:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe-ext/src/AudioStreamBuilderWrapper.cpp:1:
warning: oboe-sys@0.6.1: In file included from oboe-ext/include/oboe/OboeExt.h:4:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe-ext/src/AudioStreamBuilderWrapper.cpp:1:
warning: oboe-sys@0.6.1: In file included from oboe-ext/include/oboe/OboeExt.h:4:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: oboe-sys@0.6.1: In file included from oboe-ext/src/AudioStreamCallbackWrapper.cpp:1:
warning: oboe-sys@0.6.1: In file included from oboe-ext/include/oboe/OboeExt.h:4:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:29:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/LatencyTuner.h:23:
warning: oboe-sys@0.6.1: oboe/include/oboe/AudioStream.h:632:55: warning: unused parameter 'numFrames' [-Wunused-parameter]
warning: oboe-sys@0.6.1:     virtual void endPerformanceHintInCallback(int32_t numFrames) {}
warning: oboe-sys@0.6.1:                                                       ^
warning: oboe-sys@0.6.1: In file included from oboe-ext/src/AudioStreamCallbackWrapper.cpp:1:
warning: oboe-sys@0.6.1: In file included from oboe-ext/include/oboe/OboeExt.h:4:
warning: oboe-sys@0.6.1: In file included from oboe/include/oboe/Oboe.h:38:
warning: oboe-sys@0.6.1: oboe/include/oboe/FullDuplexStream.h:180:26: warning: unused parameter 'audioStream' [-Wunused-parameter]
warning: oboe-sys@0.6.1:             AudioStream *audioStream,
warning: oboe-sys@0.6.1:                          ^
warning: oboe-sys@0.6.1: 2 warnings generated.
warning: `bindgen` (lib) generated 9 warnings
       Fresh futures v0.3.30
warning: unnecessary parentheses around index expression
   --> /home/saroj/.cargo/git/checkouts/tokio-socks-a8e38ee48b2fdda7/bdb9aa3/src/tcp.rs:426:22
    |
426 |             self.buf[(2 + username_len)] = password_len as u8;
    |                      ^                ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
426 -             self.buf[(2 + username_len)] = password_len as u8;
426 +             self.buf[2 + username_len] = password_len as u8;
    |

       Fresh zstd-safe v7.1.0
       Fresh netlink-packet-utils v0.5.2
       Fresh num_enum v0.7.2
warning: unexpected `cfg` condition name: `tests`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-0.13.1/src/stream/functions.rs:58:7
   |
58 | #[cfg(tests)]
   |       ^^^^^ help: there is a config with a similar name: `test`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tests)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tests)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: field `0` is never read
   --> /home/saroj/.cargo/git/checkouts/sysinfo-7cea62a9ad7b4e33/90b1705/src/unix/linux/component.rs:158:13
    |
158 |     Unknown(u8),
    |     ------- ^^
    |     |
    |     field in this variant
    |
    = note: `#[warn(dead_code)]` on by default
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
    |
158 -     Unknown(u8),
158 +     Unknown(()),
    |

warning: creating a shared reference to mutable static
   --> /home/saroj/.cargo/git/checkouts/sysinfo-7cea62a9ad7b4e33/90b1705/src/lib.rs:112:40
    |
112 |                 if let Ok(ref mut x) = sys::system::REMAINING_FILES.lock() {
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
    = note: `#[warn(static_mut_refs)]` on by default

warning: creating a shared reference to mutable static
  --> /home/saroj/.cargo/git/checkouts/sysinfo-7cea62a9ad7b4e33/90b1705/src/unix/linux/utils.rs:38:36
   |
38 |             if let Ok(ref mut x) = REMAINING_FILES.lock() {
   |                                    ^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static
  --> /home/saroj/.cargo/git/checkouts/sysinfo-7cea62a9ad7b4e33/90b1705/src/unix/linux/utils.rs:66:36
   |
66 |             if let Ok(ref mut x) = crate::sys::system::REMAINING_FILES.lock() {
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: `tokio-socks` (lib) generated 1 warning
warning: `zstd` (lib) generated 1 warning
warning: `sysinfo` (lib) generated 4 warnings
       Fresh mac_address v1.1.7
       Fresh rayon v1.10.0
       Fresh rand v0.8.5
       Fresh trackable v0.2.24
warning: unused import: `super::*`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/trackable-0.2.24/src/lib.rs:57:13
   |
57 |     pub use super::*;
   |             ^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

       Fresh url v2.5.2
warning: anonymous parameters are deprecated and will be removed in the next edition
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sodiumoxide-0.2.7/src/crypto/nonce.rs:7:19
  |
7 |     fn from_bytes(Self::Bytes) -> Self;
  |                   ^^^^^^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: Self::Bytes`
  |
  = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!
  = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>
  = note: `#[warn(anonymous_parameters)]` on by default

warning: use of deprecated associated function `ed25519::Signature::new`: use ed25519::Signature::from_bytes instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sodiumoxide-0.2.7/src/crypto/sign/ed25519.rs:167:16
    |
167 |     Signature::new(sig)
    |                ^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated associated function `ed25519::Signature::new`: use ed25519::Signature::from_bytes instead
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sodiumoxide-0.2.7/src/crypto/sign/ed25519.rs:223:20
    |
223 |         Signature::new(sig)
    |                    ^^^

       Fresh machine-uid v0.3.0 (https://github.com/rustdesk-org/machine-uid#381ff579)
warning: `rand` (lib) generated 26 warnings (26 duplicates)
warning: `trackable` (lib) generated 1 warning
warning: `sodiumoxide` (lib) generated 3 warnings
       Fresh hyper v1.6.0
       Fresh directories-next v2.0.0
       Fresh dasp_rms v0.11.0
       Fresh sha2 v0.10.8
warning: unexpected `cfg` condition value: ``
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha2-0.10.8/src/sha256/x86.rs:100:1
    |
100 | cpufeatures::new!(shani_cpuid, "sha", "sse2", "ssse3", "sse4.1");
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
    = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `$crate::__unless_target_features` crate for guidance on how handle this unexpected cfg
    = help: the macro `$crate::__unless_target_features` may come from an old version of the `cpufeatures` crate, try updating your dependency with `cargo update -p cpufeatures`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default
    = note: this warning originates in the macro `$crate::__unless_target_features` which comes from the expansion of the macro `cpufeatures::new` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: ``
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha2-0.10.8/src/sha256/x86.rs:100:1
    |
100 | cpufeatures::new!(shani_cpuid, "sha", "sse2", "ssse3", "sse4.1");
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
    = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `$crate::__unless_target_features` crate for guidance on how handle this unexpected cfg
    = help: the macro `$crate::__unless_target_features` may come from an old version of the `cpufeatures` crate, try updating your dependency with `cargo update -p cpufeatures`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `$crate::__unless_target_features` which comes from the expansion of the macro `cpufeatures::new` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: ``
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha2-0.10.8/src/sha512/x86.rs:14:1
   |
14 | cpufeatures::new!(avx2_cpuid, "avx2");
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::__unless_target_features` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::__unless_target_features` may come from an old version of the `cpufeatures` crate, try updating your dependency with `cargo update -p cpufeatures`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `$crate::__unless_target_features` which comes from the expansion of the macro `cpufeatures::new` (in Nightly builds, run with -Z macro-backtrace for more info)

       Fresh dasp_peak v0.11.0
warning: `sha2` (lib) generated 8 warnings (5 duplicates)
warning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dlopen-0.1.8/src/raw/unix.rs:7:15
  |
7 | use std::mem::uninitialized;
  |               ^^^^^^^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dlopen-0.1.8/src/raw/unix.rs:86:31
   |
86 |     let mut dlinfo: Dl_info = uninitialized();
   |                               ^^^^^^^^^^^^^

warning: trait objects without an explicit `dyn` are deprecated
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dlopen-0.1.8/src/err.rs:35:32
   |
35 |     fn cause(&self) -> Option<&ErrorTrait> {
   |                                ^^^^^^^^^^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
   = note: `#[warn(bare_trait_objects)]` on by default
help: if this is a dyn-compatible trait, use `dyn`
   |
35 |     fn cause(&self) -> Option<&dyn ErrorTrait> {
   |                                +++

warning: use of deprecated method `std::error::Error::description`: use the Display impl or to_string()
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dlopen-0.1.8/src/err.rs:49:26
   |
49 |         f.write_str(self.description())?;
   |                          ^^^^^^^^^^^

warning: the type `Dl_info` does not permit being left uninitialized
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dlopen-0.1.8/src/raw/unix.rs:86:31
   |
86 |     let mut dlinfo: Dl_info = uninitialized();
   |                               ^^^^^^^^^^^^^^^
   |                               |
   |                               this code causes undefined behavior when executed
   |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: raw pointers must be initialized
   = note: `#[warn(invalid_value)]` on by default

       Fresh env_filter v0.1.3
       Fresh pin-project v1.1.5
       Fresh ndk-sys v0.5.0+25.2.9519653
warning: unexpected `cfg` condition value: `armv7`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ndk-sys-0.5.0+25.2.9519653/src/lib.rs:26:30
   |
26 |     any(target_arch = "arm", target_arch = "armv7")
   |                              ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `amdgpu`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

       Fresh uuid v1.16.0
       Fresh default_net v0.1.0 (https://github.com/rustdesk-org/default_net#78f8f70c)
       Fresh crossbeam-queue v0.3.11
warning: `dlopen` (lib) generated 5 warnings
warning: `ndk-sys` (lib) generated 1 warning
       Fresh crossbeam-channel v0.5.13
       Fresh protobuf-support v3.7.2
       Fresh inout v0.1.3
       Fresh toml v0.5.11
       Fresh is-terminal v0.4.16
warning: `toml` (lib) generated 1 warning (1 duplicate)
       Fresh num_cpus v1.16.0
warning: unexpected `cfg` condition value: `nacl`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num_cpus-1.16.0/src/lib.rs:355:5
    |
355 |     target_os = "nacl",
    |     ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `nacl`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num_cpus-1.16.0/src/lib.rs:437:5
    |
437 |     target_os = "nacl",
    |     ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: trait `Zero` is never used
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/socket2-0.3.19/src/utils.rs:38:11
   |
38 | pub trait Zero {
   |           ^^^^
   |
   = note: `#[warn(dead_code)]` on by default

       Fresh object v0.36.1
warning: unexpected `cfg` condition value: `bitrig`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/filetime-0.2.23/src/unix/mod.rs:88:11
   |
88 |     #[cfg(target_os = "bitrig")]
   |           ^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `bitrig`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/filetime-0.2.23/src/unix/mod.rs:97:15
   |
97 |     #[cfg(not(target_os = "bitrig"))]
   |               ^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `lynxos178`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, and `uefi` and 9 more
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `emulate_second_only_system`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/filetime-0.2.23/src/lib.rs:82:17
   |
82 |         if cfg!(emulate_second_only_system) {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(emulate_second_only_system)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(emulate_second_only_system)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

       Fresh nu-ansi-term v0.49.0
       Fresh rustls-platform-verifier-android v0.1.0
       Fresh powerfmt v0.2.0
warning: unexpected `cfg` condition name: `__powerfmt_docs`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/powerfmt-0.2.0/src/lib.rs:6:13
  |
6 | #![cfg_attr(__powerfmt_docs, feature(doc_auto_cfg, rustc_attrs))]
  |             ^^^^^^^^^^^^^^^
  |
  = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(__powerfmt_docs)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(__powerfmt_docs)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `__powerfmt_docs`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/powerfmt-0.2.0/src/lib.rs:7:13
  |
7 | #![cfg_attr(__powerfmt_docs, allow(internal_features))]
  |             ^^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(__powerfmt_docs)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(__powerfmt_docs)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `__powerfmt_docs`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/powerfmt-0.2.0/src/smart_display.rs:629:12
    |
629 | #[cfg_attr(__powerfmt_docs, rustc_must_implement_one_of(fmt, fmt_with_metadata))]
    |            ^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(__powerfmt_docs)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(__powerfmt_docs)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cargo-clippy`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.22.1/src/lib.rs:223:13
    |
223 | #![cfg_attr(feature = "cargo-clippy", allow(clippy::cast_lossless))]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `alloc`, `default`, and `std`
    = help: consider adding `cargo-clippy` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: `num_cpus` (lib) generated 2 warnings
warning: `socket2` (lib) generated 1 warning
warning: `filetime` (lib) generated 3 warnings
warning: `nu-ansi-term` (lib) generated 1 warning (1 duplicate)
warning: `powerfmt` (lib) generated 3 warnings
warning: `base64` (lib) generated 1 warning
       Fresh base64 v0.22.1
       Fresh overload v0.1.1
       Fresh base64ct v1.6.0
       Fresh rustc-demangle v0.1.24
       Fresh humantime v2.1.0
       Fresh glob v0.3.1
       Fresh crc-catalog v2.4.0
warning: `base64` (lib) generated 1 warning (1 duplicate)
warning: `humantime` (lib) generated 2 warnings (2 duplicates)
warning: unexpected `cfg` condition value: `checked`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.8/build.rs:9:14
  |
9 |     if !cfg!(feature = "checked") {
  |              ^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `default`, `musl-reference-tests`, `rand`, and `unstable`
  = help: consider adding `checked` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

       Fresh build-target v0.4.0
       Fresh password-hash v0.4.2
       Fresh flexi_logger v0.27.4
       Fresh crc v3.3.0
       Fresh env_logger v0.11.6
warning: `libm` (build script) generated 1 warning
warning: `flexi_logger` (lib) generated 4 warnings (4 duplicates)
warning: use of deprecated function `rustls_platform_verifier::tls_config`: use the `ConfigVerifierExt` instead
   --> libs/hbb_common/src/proxy.rs:459:50
    |
459 |         let verifier = rustls_platform_verifier::tls_config();
    |                                                  ^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: unused variable: `local_addr`
  --> libs/hbb_common/src/websocket.rs:33:9
   |
33 |         local_addr: Option<SocketAddr>,
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_local_addr`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `proxy_conf`
  --> libs/hbb_common/src/websocket.rs:34:9
   |
34 |         proxy_conf: Option<&Socks5Server>,
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proxy_conf`

warning: creating a shared reference to mutable static
  --> libs/hbb_common/src/platform/mod.rs:65:33
   |
65 |         if let Some(callback) = &GLOBAL_CALLBACK {
   |                                 ^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
   = note: `#[warn(static_mut_refs)]` on by default
help: use `&raw const` instead to create a raw pointer
   |
65 |         if let Some(callback) = &raw const GLOBAL_CALLBACK {
   |                                  +++++++++

       Fresh nu-ansi-term v0.46.0
warning: unused import: `windows::*`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nu-ansi-term-0.46.0/src/lib.rs:261:9
    |
261 | pub use windows::*;
    |         ^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

       Fresh backtrace v0.3.73
       Fresh deranged v0.3.11
warning: lint `illegal_floating_point_literal_pattern` has been removed: no longer a warning, float patterns behave the same as `==`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/deranged-0.3.11/src/lib.rs:9:5
  |
9 |     illegal_floating_point_literal_pattern,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(renamed_and_removed_lints)]` on by default

warning: unexpected `cfg` condition name: `docs_rs`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/deranged-0.3.11/src/lib.rs:1:13
  |
1 | #![cfg_attr(docs_rs, feature(doc_auto_cfg))]
  |             ^^^^^^^ help: there is a config with a similar name: `docsrs`
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(docs_rs)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(docs_rs)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

       Fresh rustls-platform-verifier v0.5.1
       Fresh confy v0.4.0-2 (https://github.com/rustdesk-org/confy#83db9ec1)
warning: `hbb_common` (lib) generated 4 warnings
warning: `nu-ansi-term` (lib) generated 1 warning
warning: `backtrace` (lib) generated 1 warning (1 duplicate)
warning: `deranged` (lib) generated 2 warnings
       Fresh cipher v0.4.4
   Compiling hwcodec v0.7.1 (https://github.com/rustdesk-org/hwcodec#0ea7e709)
       Fresh protobuf v3.7.2
       Fresh tokio-socks v0.5.2-3 (https://github.com/rustdesk-org/tokio-socks#bdb9aa3d)
       Fresh ndk v0.8.0
warning: unnecessary qualification
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ndk-0.8.0/src/input_queue.rs:109:17
    |
109 |                 std::ptr::null_mut(),
    |                 ^^^^^^^^^^^^^^^^^^
    |
note: the lint level is defined here
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ndk-0.8.0/src/lib.rs:10:5
    |
10  |     unused_qualifications
    |     ^^^^^^^^^^^^^^^^^^^^^
help: remove the unnecessary path segments
    |
109 -                 std::ptr::null_mut(),
109 +                 ptr::null_mut(),
    |

       Fresh hyper-util v0.1.12
warning: unused variable: `timer`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.12/src/client/legacy/client.rs:1461:32
     |
1461 |     pub fn timer<M>(&mut self, timer: M) -> &mut Self
     |                                ^^^^^ help: if this is intentional, prefix it with an underscore: `_timer`
     |
     = note: `#[warn(unused_variables)]` on by default

       Fresh dasp_envelope v0.11.0
warning: dart-sys@4.1.5: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dart-sys-4.1.5/dart-sdk/include/dart_api_dl.c:33:31: warning: unused parameter 'object' [-Wunused-parameter]
warning: dart-sys@4.1.5:     Dart_WeakPersistentHandle object, intptr_t external_size) {
warning: dart-sys@4.1.5:                               ^
warning: dart-sys@4.1.5: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dart-sys-4.1.5/dart-sdk/include/dart_api_dl.c:33:48: warning: unused parameter 'external_size' [-Wunused-parameter]
warning: dart-sys@4.1.5:     Dart_WeakPersistentHandle object, intptr_t external_size) {
warning: dart-sys@4.1.5:                                                ^
warning: dart-sys@4.1.5: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dart-sys-4.1.5/dart-sdk/include/dart_api_dl.c:38:28: warning: unused parameter 'object' [-Wunused-parameter]
warning: dart-sys@4.1.5:     Dart_FinalizableHandle object,
warning: dart-sys@4.1.5:                            ^
warning: dart-sys@4.1.5: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dart-sys-4.1.5/dart-sdk/include/dart_api_dl.c:39:17: warning: unused parameter 'strong_ref_to_object' [-Wunused-parameter]
warning: dart-sys@4.1.5:     Dart_Handle strong_ref_to_object,
warning: dart-sys@4.1.5:                 ^
warning: dart-sys@4.1.5: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dart-sys-4.1.5/dart-sdk/include/dart_api_dl.c:40:14: warning: unused parameter 'external_allocation_size' [-Wunused-parameter]
warning: dart-sys@4.1.5:     intptr_t external_allocation_size) {
warning: dart-sys@4.1.5:              ^
warning: dart-sys@4.1.5: 5 warnings generated.
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CFG_FEATURE=default CARGO_CFG_PANIC=unwind CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=aarch64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=neon CARGO_CFG_TARGET_HAS_ATOMIC=128,16,32,64,8,ptr CARGO_CFG_TARGET_OS=android CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_DEFAULT=1 CARGO_MANIFEST_DIR=/home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70 CARGO_MANIFEST_PATH=/home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=hwcodec CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.7.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/Documents/rustdesk/target/release:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' NUM_JOBS=8 OPT_LEVEL=3 OUT_DIR=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/build/hwcodec-812131b56716abcd/out PROFILE=release RUSTC=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc RUSTC_LINKER=/home/saroj/Android/Sdk/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang RUSTDOC=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustdoc TARGET=aarch64-linux-android /home/saroj/Documents/rustdesk/target/release/build/hwcodec-bb990c087cd922c2/build-script-build`
warning: `protobuf` (lib) generated 2 warnings (2 duplicates)
warning: `tokio-socks` (lib) generated 1 warning (1 duplicate)
warning: `ndk` (lib) generated 1 warning
warning: `hyper-util` (lib) generated 1 warning
       Fresh sysinfo v0.29.10 (https://github.com/rustdesk-org/sysinfo?branch=rlim_max#90b1705d)
       Fresh bytecodec v0.4.15
       Fresh netlink-packet-core v0.5.0
       Fresh zstd v0.13.1
       Fresh bzip2-sys v0.1.11+1.0.8
warning: `extern` declarations without an explicit ABI are deprecated
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bzip2-sys-0.1.11+1.0.8/lib.rs:52:9
   |
52 |           extern {
   |           ^^^^^^ help: explicitly specify the "C" ABI: `extern "C"`
...
58 | / abi_compat! {
59 | |     pub fn BZ2_bzCompressInit(stream: *mut bz_stream,
60 | |                               blockSize100k: c_int,
61 | |                               verbosity: c_int,
...  |
69 | |     pub fn BZ2_bzDecompressEnd(stream: *mut bz_stream) -> c_int,
70 | | }
   | |_- in this macro invocation
   |
   = note: `#[warn(missing_abi)]` on by default
   = note: this warning originates in the macro `abi_compat` (in Nightly builds, run with -Z macro-backtrace for more info)

       Fresh webm-sys v1.0.4 (https://github.com/rustdesk-org/rust-webm#d2c4d3ac)
warning: `sysinfo` (lib) generated 4 warnings (4 duplicates)
warning: `zstd` (lib) generated 1 warning (1 duplicate)
warning: `bzip2-sys` (lib) generated 1 warning
       Fresh oboe-sys v0.6.1
       Fresh sodiumoxide v0.2.7
       Fresh tokio-tungstenite v0.26.2
       Fresh zstd-safe v5.0.2+zstd.1.5.2
warning: unused import: `Builder`
 --> /home/saroj/.cargo/git/checkouts/kcp-sys-a97dc6603837a17f/1e5e30a/build.rs:3:15
  |
3 | use bindgen::{Builder, RustTarget};
  |               ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: use of deprecated associated constant `bindgen::RustTarget::Stable_1_73`: The use of this constant is deprecated, please use `RustTarget::stable` instead.
  --> /home/saroj/.cargo/git/checkouts/kcp-sys-a97dc6603837a17f/1e5e30a/build.rs:27:34
   |
27 |         .rust_target(RustTarget::Stable_1_73)
   |                                  ^^^^^^^^^^^
   |
   = note: `#[warn(deprecated)]` on by default

       Fresh toml v0.7.8
       Fresh rustversion v1.0.17
warning: `sodiumoxide` (lib) generated 3 warnings (3 duplicates)
warning: `kcp-sys` (build script) generated 2 warnings
       Fresh dasp_interpolate v0.11.0
       Fresh dirs-next v2.0.0
       Fresh tracing-log v0.2.0
warning: lint `private_in_public` has been removed: replaced with another group of lints, see RFC <https://rust-lang.github.io/rfcs/2145-type-privacy.html> for more information
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-log-0.2.0/src/lib.rs:115:5
    |
115 |     private_in_public,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(renamed_and_removed_lints)]` on by default

       Fresh dlopen v0.1.8
   Compiling env_logger v0.10.2
warning: `tracing-log` (lib) generated 1 warning
[hwcodec 0.7.1] cargo:rerun-if-changed=src
[hwcodec 0.7.1] cargo:rerun-if-changed=deps
[hwcodec 0.7.1] cargo:rerun-if-changed=/home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/externals
[hwcodec 0.7.1] cargo:rerun-if-changed=/home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp
warning: `dlopen` (lib) generated 5 warnings (5 duplicates)
   Compiling sharded-slab v0.1.7
   Compiling dasp_window v0.11.1
   Compiling num-integer v0.1.46
   Compiling dlopen2_derive v0.2.0
   Compiling os-version v0.2.0
   Compiling webpki-roots v1.0.0
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=env_logger CARGO_MANIFEST_DIR=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_logger-0.10.2 CARGO_MANIFEST_PATH=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_logger-0.10.2/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='A logging implementation for `log` which is configured via an environment
variable.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=env_logger CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-cli/env_logger' CARGO_PKG_RUST_VERSION=1.60.0 CARGO_PKG_VERSION=0.10.2 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=10 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name env_logger --edition=2021 /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_logger-0.10.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C panic=abort -C codegen-units=1 --cfg 'feature="regex"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("auto-color", "color", "default", "humantime", "regex"))' -C metadata=aeda88ebb6111d7c -C extra-filename=-11dc1148e4666d9e -C rpath --out-dir /home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps --target aarch64-linux-android -C linker=/home/saroj/Android/Sdk/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang -C strip=symbols -L dependency=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps -L dependency=/home/saroj/Documents/rustdesk/target/release/deps --extern log=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps/liblog-f4c92557fe3b9e0f.rmeta --extern regex=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps/libregex-6f8fb66b61707f76.rmeta --cap-lints warn`
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=sharded_slab CARGO_MANIFEST_DIR=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7 CARGO_MANIFEST_PATH=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/Cargo.toml CARGO_PKG_AUTHORS='Eliza Weisman <eliza@buoyant.io>' CARGO_PKG_DESCRIPTION='A lock-free concurrent slab.
' CARGO_PKG_HOMEPAGE='https://github.com/hawkw/sharded-slab' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=sharded-slab CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/hawkw/sharded-slab' CARGO_PKG_RUST_VERSION=1.42.0 CARGO_PKG_VERSION=0.1.7 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=7 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name sharded_slab --edition=2018 /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C panic=abort -C codegen-units=1 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("loom"))' -C metadata=d9c095b4c0895467 -C extra-filename=-0f0c12914b557140 -C rpath --out-dir /home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps --target aarch64-linux-android -C linker=/home/saroj/Android/Sdk/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang -C strip=symbols -L dependency=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps -L dependency=/home/saroj/Documents/rustdesk/target/release/deps --extern lazy_static=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps/liblazy_static-716c3e976e309425.rmeta --cap-lints warn`
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=dasp_window CARGO_MANIFEST_DIR=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dasp_window-0.11.1 CARGO_MANIFEST_PATH=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dasp_window-0.11.1/Cargo.toml CARGO_PKG_AUTHORS='mitchmindtree <mitchell.nordine@gmail.com>' CARGO_PKG_DESCRIPTION='Windowing function abstractions (e.g. hanning, rectangle) for audio PCM DSP.' CARGO_PKG_HOMEPAGE='https://github.com/rustaudio/dasp' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=dasp_window CARGO_PKG_README=../README.md CARGO_PKG_REPOSITORY='https://github.com/rustaudio/dasp.git' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.11.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=11 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name dasp_window --edition=2018 /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dasp_window-0.11.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C panic=abort -C codegen-units=1 --cfg 'feature="std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("all", "all-no-std", "default", "hanning", "rectangle", "std"))' -C metadata=7ecda7446633e88b -C extra-filename=-9724da820421671b -C rpath --out-dir /home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps --target aarch64-linux-android -C linker=/home/saroj/Android/Sdk/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang -C strip=symbols -L dependency=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps -L dependency=/home/saroj/Documents/rustdesk/target/release/deps --extern dasp_sample=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps/libdasp_sample-a030ea36701f0fcf.rmeta --cap-lints warn`
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=num_integer CARGO_MANIFEST_DIR=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-integer-0.1.46 CARGO_MANIFEST_PATH=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-integer-0.1.46/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='Integer traits and functions' CARGO_PKG_HOMEPAGE='https://github.com/rust-num/num-integer' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=num-integer CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-num/num-integer' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=0.1.46 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=46 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name num_integer --edition=2018 /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-integer-0.1.46/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C panic=abort -C codegen-units=1 --cfg 'feature="i128"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "i128", "std"))' -C metadata=715084cd31f07abc -C extra-filename=-038b30cfee28002c -C rpath --out-dir /home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps --target aarch64-linux-android -C linker=/home/saroj/Android/Sdk/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang -C strip=symbols -L dependency=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps -L dependency=/home/saroj/Documents/rustdesk/target/release/deps --extern num_traits=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps/libnum_traits-a3ba0195115108ca.rmeta --cap-lints warn`
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=dlopen2_derive CARGO_MANIFEST_DIR=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dlopen2_derive-0.2.0 CARGO_MANIFEST_PATH=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dlopen2_derive-0.2.0/Cargo.toml CARGO_PKG_AUTHORS='Szymon Wieloch <szymon.wieloch@gmail.com>:OpenByte <development.openbyte@gmail.com>' CARGO_PKG_DESCRIPTION='Derive macros for the dlopen2 crate.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=dlopen2_derive CARGO_PKG_README='' CARGO_PKG_REPOSITORY='' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name dlopen2_derive --edition=2015 /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dlopen2_derive-0.2.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=5a804673f2f69b60 -C extra-filename=-d1eb698cba2d922e -C rpath --out-dir /home/saroj/Documents/rustdesk/target/release/deps -C strip=symbols -L dependency=/home/saroj/Documents/rustdesk/target/release/deps --extern proc_macro2=/home/saroj/Documents/rustdesk/target/release/deps/libproc_macro2-486c44d9e19c02cc.rlib --extern quote=/home/saroj/Documents/rustdesk/target/release/deps/libquote-05baab23a6b8c39f.rlib --extern syn=/home/saroj/Documents/rustdesk/target/release/deps/libsyn-eb87068cd196eb85.rlib --extern proc_macro --cap-lints warn`
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=os_version CARGO_MANIFEST_DIR=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/os-version-0.2.0 CARGO_MANIFEST_PATH=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/os-version-0.2.0/Cargo.toml CARGO_PKG_AUTHORS='kpcyrd <git@rxv.cc>' CARGO_PKG_DESCRIPTION='Get the operating system version' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=os-version CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/kpcyrd/os-version' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name os_version --edition=2018 /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/os-version-0.2.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=848be5bdc3f81a8c -C extra-filename=-310f4c404bf0d73a -C rpath --out-dir /home/saroj/Documents/rustdesk/target/release/deps -C strip=symbols -L dependency=/home/saroj/Documents/rustdesk/target/release/deps --extern anyhow=/home/saroj/Documents/rustdesk/target/release/deps/libanyhow-5b7acd812a670dc3.rmeta --cap-lints warn`
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=webpki_roots CARGO_MANIFEST_DIR=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-1.0.0 CARGO_MANIFEST_PATH=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-1.0.0/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Mozilla'\''s CA root certificates for use with webpki' CARGO_PKG_HOMEPAGE='https://github.com/rustls/webpki-roots' CARGO_PKG_LICENSE=CDLA-Permissive-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=webpki-roots CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rustls/webpki-roots' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.0.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name webpki_roots --edition=2021 /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-1.0.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C panic=abort -C codegen-units=1 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=93689570a750af1c -C extra-filename=-6c9db391790c011f -C rpath --out-dir /home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps --target aarch64-linux-android -C linker=/home/saroj/Android/Sdk/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang -C strip=symbols -L dependency=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps -L dependency=/home/saroj/Documents/rustdesk/target/release/deps --extern pki_types=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps/librustls_pki_types-38e189ac1b466dff.rmeta --cap-lints warn`
warning: unexpected `cfg` condition name: `rustbuild`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_logger-0.10.2/src/lib.rs:274:13
    |
274 | #![cfg_attr(rustbuild, feature(staged_api, rustc_private))]
    |             ^^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustbuild)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustbuild)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `rustbuild`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_logger-0.10.2/src/lib.rs:275:13
    |
275 | #![cfg_attr(rustbuild, unstable(feature = "rustc_private", issue = "27812"))]
    |             ^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(rustbuild)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(rustbuild)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

   Compiling sync_wrapper v1.0.2
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=sync_wrapper CARGO_MANIFEST_DIR=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sync_wrapper-1.0.2 CARGO_MANIFEST_PATH=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sync_wrapper-1.0.2/Cargo.toml CARGO_PKG_AUTHORS='Actyx AG <developer@actyx.io>' CARGO_PKG_DESCRIPTION='A tool for enlisting the compiler'\''s help in proving the absence of concurrency' CARGO_PKG_HOMEPAGE='https://docs.rs/sync_wrapper' CARGO_PKG_LICENSE=Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=sync_wrapper CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/Actyx/sync_wrapper' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.0.2 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name sync_wrapper --edition=2021 /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sync_wrapper-1.0.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C panic=abort -C codegen-units=1 --cfg 'feature="futures"' --cfg 'feature="futures-core"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("futures", "futures-core"))' -C metadata=3dbaae600cd2dc85 -C extra-filename=-4ab805b3edc3053f -C rpath --out-dir /home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps --target aarch64-linux-android -C linker=/home/saroj/Android/Sdk/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang -C strip=symbols -L dependency=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps -L dependency=/home/saroj/Documents/rustdesk/target/release/deps --extern futures_core=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps/libfutures_core-3cc0cf83865e103e.rmeta --cap-lints warn`
warning: unexpected `cfg` condition name: `loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:15:17
   |
15 | #[cfg(all(test, loom))]
   |                 ^^^^ help: found config with similar value: `feature = "loom"`
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:453:9
    |
453 |         test_println!("pool: create {:?}", tid);
    |         --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:621:9
    |
621 |         test_println!("pool: create_owned {:?}", tid);
    |         --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:655:9
    |
655 |         test_println!("pool: create_with");
    |         ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:678:9
    |
678 |         test_println!("pool: get{:?}; current={:?}", tid, Tid::<C>::current());
    |         ---------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:769:9
    |
769 |         test_println!("pool: get{:?}; current={:?}", tid, Tid::<C>::current());
    |         ---------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:914:9
    |
914 |         test_println!("drop Ref: try clearing data");
    |         -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:1049:9
     |
1049 |         test_println!(" -> drop RefMut: try clearing data");
     |         --------------------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:1124:9
     |
1124 |         test_println!("drop OwnedRef: try clearing data");
     |         ------------------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:1135:13
     |
1135 |             test_println!("-> shard={:?}", shard_idx);
     |             ----------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:1139:17
     |
1139 |                 test_println!("-> shard={:?} does not exist! THIS IS A BUG", shard_idx);
     |                 ----------------------------------------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:1238:9
     |
1238 |         test_println!("-> shard={:?}", shard_idx);
     |         ----------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:1290:9
     |
1290 |         test_println!("drop OwnedRefMut: try clearing data");
     |         ---------------------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/pool.rs:1303:17
     |
1303 |                 test_println!("-> shard does not exist! THIS IS A BUG");
     |                 ------------------------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
 --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/sync.rs:3:11
  |
3 | #[cfg(all(loom, any(test, feature = "loom")))]
  |           ^^^^ help: found config with similar value: `feature = "loom"`
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/sync.rs:63:15
   |
63 | #[cfg(not(all(loom, any(feature = "loom", test))))]
   |               ^^^^ help: found config with similar value: `feature = "loom"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/clear.rs:95:11
   |
95 | #[cfg(all(loom, test))]
   |           ^^^^ help: found config with similar value: `feature = "loom"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/iter.rs:18:9
   |
18 |         test_println!("UniqueIter::next");
   |         --------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/iter.rs:20:13
   |
20 |             test_println!("-> try next slot");
   |             --------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/iter.rs:22:17
   |
22 |                 test_println!("-> found an item!");
   |                 ---------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/iter.rs:26:13
   |
26 |             test_println!("-> try next page");
   |             --------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/iter.rs:28:17
   |
28 |                 test_println!("-> found another page");
   |                 -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/iter.rs:33:13
   |
33 |             test_println!("-> try next shard");
   |             ---------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/iter.rs:35:17
   |
35 |                 test_println!("-> found another shard");
   |                 --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/iter.rs:38:17
   |
38 |                 test_println!("-> all done!");
   |                 ----------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:115:13
    |
115 | /             test_println!(
116 | |                 "-> get {:?}; current_gen={:?}; lifecycle={:#x}; state={:?}; refs={:?};",
117 | |                 gen,
118 | |                 current_gen,
...   |
121 | |                 refs,
122 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:129:17
    |
129 |                 test_println!("-> get: no longer exists!");
    |                 ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:142:21
    |
142 |                     test_println!("-> {:?}", new_refs);
    |                     ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:154:21
    |
154 |                     test_println!("-> get: retrying; lifecycle={:#x};", actual);
    |                     ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:175:13
    |
175 | /             test_println!(
176 | |                 "-> mark_release; gen={:?}; current_gen={:?};",
177 | |                 gen,
178 | |                 curr_gen
179 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:187:13
    |
187 |             test_println!("-> mark_release; state={:?};", state);
    |             ---------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:190:21
    |
190 |                     test_println!("--> mark_release; cannot release (already removed!)");
    |                     -------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:194:21
    |
194 |                     test_println!("--> mark_release; already marked;");
    |                     -------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:202:13
    |
202 | /             test_println!(
203 | |                 "-> mark_release; old_lifecycle={:#x}; new_lifecycle={:#x};",
204 | |                 lifecycle,
205 | |                 new_lifecycle
206 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:216:21
    |
216 |                     test_println!("-> mark_release; retrying");
    |                     ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:224:9
    |
224 |         test_println!("-> mark_release: marked; refs={:?};", refs);
    |         ---------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:246:13
    |
246 | /             test_println!("-> release_with; lifecycle={:#x}; expected_gen={:?}; current_gen={:?}; next_gen={:?};",
247 | |                 lifecycle,
248 | |                 gen,
249 | |                 current_gen,
250 | |                 next_gen
251 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:258:17
    |
258 |                 test_println!("-> already removed!");
    |                 ------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:275:21
    |
275 |                     test_println!("-> advanced gen; lifecycle={:#x}; refs={:?};", actual, refs);
    |                     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:277:25
    |
277 |                         test_println!("-> ok to remove!");
    |                         --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:290:21
    |
290 |                     test_println!("-> refs={:?}; spin...", refs);
    |                     -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:296:21
    |
296 |                     test_println!("-> retrying; lifecycle={:#x};", actual);
    |                     ------------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:316:9
    |
316 | /         test_println!(
317 | |             "-> initialize_state; state={:?}; gen={:?}; refs={:?};",
318 | |             Lifecycle::<C>::from_packed(lifecycle),
319 | |             gen,
320 | |             refs,
321 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:324:13
    |
324 |             test_println!("-> initialize while referenced! cancelling");
    |             ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:363:9
    |
363 |         test_println!("-> inserted at {:?}", gen);
    |         ----------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:389:17
    |
389 | /                 test_println!(
390 | |                     "-> try_remove_value; nothing exists at generation={:?}",
391 | |                     gen
392 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:397:9
    |
397 |         test_println!("-> try_remove_value; marked!");
    |         --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:401:13
    |
401 |             test_println!("-> try_remove_value; can remove now");
    |             ---------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:453:17
    |
453 | /                 test_println!(
454 | |                     "-> try_clear_storage; nothing exists at generation={:?}",
455 | |                     gen
456 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:461:9
    |
461 |         test_println!("-> try_clear_storage; marked!");
    |         ---------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:465:13
    |
465 |             test_println!("-> try_remove_value; can clear now");
    |             --------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:485:13
    |
485 |             test_println!("-> cleared: {}", cleared);
    |             ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:510:13
    |
510 | /             test_println!(
511 | |                 "-> drop guard: state={:?}; gen={:?}; refs={:?}; lifecycle={:#x}; new_lifecycle={:#x}; dropping={:?}",
512 | |                 state,
513 | |                 gen,
...   |
517 | |                 dropping
518 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:526:21
    |
526 |                     test_println!("-> drop guard: done;  dropping={:?}", dropping);
    |                     -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:530:21
    |
530 |                     test_println!("-> drop guard; retry, actual={:#x}", actual);
    |                     ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:710:13
    |
710 |             test_println!("-> get: {}; MAX={}", self.value, RefCount::<C>::MAX);
    |             ------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:830:9
    |
830 | /         test_println!(
831 | |             "InitGuard::release; curr_lifecycle={:?}; downgrading={}",
832 | |             Lifecycle::<C>::from_packed(self.curr_lifecycle),
833 | |             new_refs != 0,
834 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:836:13
    |
836 |             test_println!("-> already released!");
    |             ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:852:17
    |
852 |                 test_println!("--> advanced to PRESENT; done");
    |                 ---------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:856:17
    |
856 | /                 test_println!(
857 | |                     "--> lifecycle changed; actual={:?}",
858 | |                     Lifecycle::<C>::from_packed(actual)
859 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:870:13
    |
870 | /             test_println!(
871 | |                 "-> InitGuard::release; lifecycle={:#x}; state={:?}; refs={:?};",
872 | |                 curr_lifecycle,
873 | |                 state,
874 | |                 refs,
875 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:889:21
    |
889 |                     test_println!("-> InitGuard::RELEASE: done!");
    |                     --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/slot.rs:894:21
    |
894 |                     test_println!("-> InitGuard::release; retry, actual={:#x}", actual);
    |                     ------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/stack.rs:72:11
   |
72 | #[cfg(all(loom, test))]
   |           ^^^^ help: found config with similar value: `feature = "loom"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/stack.rs:20:9
   |
20 |         test_println!("-> pop {:#x}", val);
   |         ---------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/stack.rs:34:13
   |
34 |             test_println!("-> next {:#x}", next);
   |             ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/stack.rs:43:21
   |
43 |                     test_println!("-> retry!");
   |                     -------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/stack.rs:47:21
   |
47 |                     test_println!("-> successful; next={:#x}", next);
   |                     ------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/mod.rs:146:9
    |
146 |         test_println!("-> local head {:?}", head);
    |         ----------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/mod.rs:156:13
    |
156 |             test_println!("-> remote head {:?}", head);
    |             ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/mod.rs:163:13
    |
163 |             test_println!("-> NULL! {:?}", head);
    |             ------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/mod.rs:185:9
    |
185 |         test_println!("-> offset {:?}", poff);
    |         ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/mod.rs:214:9
    |
214 |         test_println!("-> take: offset {:?}", offset);
    |         --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/mod.rs:231:9
    |
231 |         test_println!("-> offset {:?}", offset);
    |         --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/mod.rs:287:9
    |
287 |         test_println!("-> init_with: insert at offset: {}", index);
    |         ---------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/mod.rs:294:9
    |
294 |         test_println!("-> alloc new page ({})", self.size);
    |         -------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/mod.rs:318:9
    |
318 |         test_println!("-> offset {:?}", offset);
    |         --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/page/mod.rs:338:9
    |
338 |         test_println!("-> offset {:?}", offset);
    |         --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:79:9
   |
79 |         test_println!("-> {:?}", addr);
   |         ------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:111:9
    |
111 |         test_println!("-> remove_local {:?}", addr);
    |         ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:125:9
    |
125 |         test_println!("-> take_remote {:?}; page {:?}", addr, page_index);
    |         ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:172:13
    |
172 |             test_println!("-> page {}; {:?}; {:?}", page_idx, local, page);
    |             -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:208:9
    |
208 | /         test_println!(
209 | |             "-> clear_after_release; self.tid={:?}; current.tid={:?};",
210 | |             tid,
211 | |             self.tid
212 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:286:9
    |
286 |         test_println!("-> get shard={}", idx);
    |         ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:293:9
    |
293 |         test_println!("current: {:?}", tid);
    |         ----------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:306:13
    |
306 |             test_println!("-> allocated new shard for index {} at {:p}", idx, ptr);
    |             ---------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:315:13
    |
315 |             test_println!("-> highest index={}, prev={}", std::cmp::max(max, idx), max);
    |             --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:326:9
    |
326 |         test_println!("Array::iter_mut");
    |         -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:328:9
    |
328 |         test_println!("-> highest index={}", max);
    |         ----------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:381:9
    |
381 |         test_println!("---> loaded={:p} (order={:?})", ptr, order);
    |         ---------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:383:13
    |
383 |             test_println!("---> null");
    |             -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:418:9
    |
418 |         test_println!("IterMut::next");
    |         ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:425:13
    |
425 |             test_println!("-> next.is_some={}", next.is_some());
    |             --------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/shard.rs:427:17
    |
427 |                 test_println!("-> done");
    |                 ------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/tid.rs:185:15
    |
185 | #[cfg(not(all(loom, any(feature = "loom", test))))]
    |               ^^^^ help: found config with similar value: `feature = "loom"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/tid.rs:197:21
    |
197 | #[cfg(all(test, not(loom)))]
    |                     ^^^^ help: found config with similar value: `feature = "loom"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/lib.rs:422:9
    |
422 |         test_println!("insert {:?}", tid);
    |         --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/lib.rs:457:9
    |
457 |         test_println!("vacant_entry {:?}", tid);
    |         --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/lib.rs:518:9
    |
518 |         test_println!("rm_deferred {:?}", tid);
    |         -------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/lib.rs:584:9
    |
584 |         test_println!("rm {:?}", tid);
    |         ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/lib.rs:611:9
    |
611 |         test_println!("get {:?}; current={:?}", tid, Tid::<C>::current());
    |         ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/lib.rs:709:9
    |
709 |         test_println!("get_owned {:?}; current={:?}", tid, Tid::<C>::current());
    |         ----------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/lib.rs:960:9
    |
960 |         test_println!("drop OwnedEntry: try clearing data");
    |         --------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/lib.rs:971:13
    |
971 |             test_println!("-> shard={:?}", shard_idx);
    |             ----------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/lib.rs:975:17
    |
975 |                 test_println!("-> shard={:?} does not exist! THIS IS A BUG", shard_idx);
    |                 ----------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

   Compiling thread_local v1.1.8
   Compiling enum-map-derive v0.17.0
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=thread_local CARGO_MANIFEST_DIR=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thread_local-1.1.8 CARGO_MANIFEST_PATH=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thread_local-1.1.8/Cargo.toml CARGO_PKG_AUTHORS='Amanieu d'\''Antras <amanieu@gmail.com>' CARGO_PKG_DESCRIPTION='Per-object thread-local storage' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=thread_local CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/Amanieu/thread_local-rs' CARGO_PKG_RUST_VERSION=1.59 CARGO_PKG_VERSION=1.1.8 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=8 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name thread_local --edition=2021 /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thread_local-1.1.8/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C panic=abort -C codegen-units=1 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("nightly"))' -C metadata=005c796029e82cef -C extra-filename=-a5a6ce335c0a939c -C rpath --out-dir /home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps --target aarch64-linux-android -C linker=/home/saroj/Android/Sdk/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang -C strip=symbols -L dependency=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps -L dependency=/home/saroj/Documents/rustdesk/target/release/deps --extern cfg_if=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps/libcfg_if-9e436ab570d25d2e.rmeta --extern once_cell=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/deps/libonce_cell-c33accd63a0561d0.rmeta --cap-lints warn`
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=enum_map_derive CARGO_MANIFEST_DIR=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enum-map-derive-0.17.0 CARGO_MANIFEST_PATH=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enum-map-derive-0.17.0/Cargo.toml CARGO_PKG_AUTHORS='Kamila Borowska <kamila@borowska.pw>' CARGO_PKG_DESCRIPTION='Macros 1.1 implementation of #[derive(Enum)]' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=enum-map-derive CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://codeberg.org/xfix/enum-map' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=0.17.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=17 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name enum_map_derive --edition=2021 /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enum-map-derive-0.17.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=e8bd6a0ad18d5ff8 -C extra-filename=-caf4e2eec24e5207 -C rpath --out-dir /home/saroj/Documents/rustdesk/target/release/deps -C strip=symbols -L dependency=/home/saroj/Documents/rustdesk/target/release/deps --extern proc_macro2=/home/saroj/Documents/rustdesk/target/release/deps/libproc_macro2-486c44d9e19c02cc.rlib --extern quote=/home/saroj/Documents/rustdesk/target/release/deps/libquote-05baab23a6b8c39f.rlib --extern syn=/home/saroj/Documents/rustdesk/target/release/deps/libsyn-29b6ed07c16479c7.rlib --extern proc_macro --cap-lints warn`
   Compiling zerocopy-derive v0.7.34
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=zerocopy_derive CARGO_MANIFEST_DIR=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-derive-0.7.34 CARGO_MANIFEST_PATH=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-derive-0.7.34/Cargo.toml CARGO_PKG_AUTHORS='Joshua Liebow-Feeser <joshlf@google.com>' CARGO_PKG_DESCRIPTION='Custom derive for traits from the zerocopy crate' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='BSD-2-Clause OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=zerocopy-derive CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/google/zerocopy' CARGO_PKG_RUST_VERSION=1.60.0 CARGO_PKG_VERSION=0.7.34 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=34 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name zerocopy_derive --edition=2018 /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-derive-0.7.34/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=dfc3474e03b21e82 -C extra-filename=-ad513768d0390205 -C rpath --out-dir /home/saroj/Documents/rustdesk/target/release/deps -C strip=symbols -L dependency=/home/saroj/Documents/rustdesk/target/release/deps --extern proc_macro2=/home/saroj/Documents/rustdesk/target/release/deps/libproc_macro2-486c44d9e19c02cc.rlib --extern quote=/home/saroj/Documents/rustdesk/target/release/deps/libquote-05baab23a6b8c39f.rlib --extern syn=/home/saroj/Documents/rustdesk/target/release/deps/libsyn-29b6ed07c16479c7.rlib --extern proc_macro --cap-lints warn`
warning: methods `unchecked_unwrap` and `unchecked_unwrap_none` are never used
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thread_local-1.1.8/src/unreachable.rs:13:15
   |
11 | pub trait UncheckedOptionExt<T> {
   |           ------------------ methods in this trait
12 |     /// Get the value out of this Option without checking for None.
13 |     unsafe fn unchecked_unwrap(self) -> T;
   |               ^^^^^^^^^^^^^^^^
...
16 |     unsafe fn unchecked_unwrap_none(self);
   |               ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: method `unchecked_unwrap_err` is never used
  --> /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thread_local-1.1.8/src/unreachable.rs:25:15
   |
20 | pub trait UncheckedResultExt<T, E> {
   |           ------------------ method in this trait
...
25 |     unsafe fn unchecked_unwrap_err(self) -> E;
   |               ^^^^^^^^^^^^^^^^^^^^

[hwcodec 0.7.1] /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/common.h:38:3: error: unknown type name 'int64_t'
[hwcodec 0.7.1] /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:6:38: error: unknown type name 'uint8_t'
[hwcodec 0.7.1] /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:6:53: error: unknown type name 'int32_t'
[hwcodec 0.7.1] /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:6:66: error: unknown type name 'int32_t'
[hwcodec 0.7.1] /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:7:49: error: unknown type name 'int64_t'
[hwcodec 0.7.1] /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/common.h:38:3: error: unknown type name 'int64_t', err: true
[hwcodec 0.7.1] /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:6:38: error: unknown type name 'uint8_t', err: true
[hwcodec 0.7.1] /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:6:53: error: unknown type name 'int32_t', err: true
[hwcodec 0.7.1] /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:6:66: error: unknown type name 'int32_t', err: true
[hwcodec 0.7.1] /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:7:49: error: unknown type name 'int64_t', err: true
[hwcodec 0.7.1] 
[hwcodec 0.7.1] thread 'main' panicked at /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/build.rs:34:10:
[hwcodec 0.7.1] called `Result::unwrap()` on an `Err` value: ()
[hwcodec 0.7.1] stack backtrace:
[hwcodec 0.7.1]    0:     0x55bbb01cbd62 - <unknown>
[hwcodec 0.7.1]    1:     0x55bbb01f3ad3 - <unknown>
[hwcodec 0.7.1]    2:     0x55bbb01c80a3 - <unknown>
[hwcodec 0.7.1]    3:     0x55bbb01cbbb2 - <unknown>
[hwcodec 0.7.1]    4:     0x55bbb01cd952 - <unknown>
[hwcodec 0.7.1]    5:     0x55bbb01cd755 - <unknown>
[hwcodec 0.7.1]    6:     0x55bbb01ce372 - <unknown>
[hwcodec 0.7.1]    7:     0x55bbb01ce0fa - <unknown>
[hwcodec 0.7.1]    8:     0x55bbb01cc259 - <unknown>
[hwcodec 0.7.1]    9:     0x55bbb01cdd8d - <unknown>
[hwcodec 0.7.1]   10:     0x55bbb01f1ed0 - <unknown>
[hwcodec 0.7.1]   11:     0x55bbb01f2296 - <unknown>
[hwcodec 0.7.1]   12:     0x55bbafc89e29 - <unknown>
[hwcodec 0.7.1]   13:     0x55bbafc895c7 - <unknown>
[hwcodec 0.7.1]   14:     0x55bbafc87cd3 - <unknown>
[hwcodec 0.7.1]   15:     0x55bbafc87bc6 - <unknown>
[hwcodec 0.7.1]   16:     0x55bbafc87ba9 - <unknown>
[hwcodec 0.7.1]   17:     0x55bbb01c1af4 - <unknown>
[hwcodec 0.7.1]   18:     0x55bbafc87b91 - <unknown>
[hwcodec 0.7.1]   19:     0x55bbafc8dd75 - <unknown>
   Compiling num-derive v0.4.2
     Running `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=num_derive CARGO_MANIFEST_DIR=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-derive-0.4.2 CARGO_MANIFEST_PATH=/home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-derive-0.4.2/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='Numeric syntax extensions' CARGO_PKG_HOMEPAGE='https://github.com/rust-num/num-derive' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=num-derive CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-num/num-derive' CARGO_PKG_RUST_VERSION=1.56.0 CARGO_PKG_VERSION=0.4.2 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name num_derive --edition=2021 /home/saroj/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-derive-0.4.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=6bcfaf4717f9de78 -C extra-filename=-d15ae53788bb9cd9 -C rpath --out-dir /home/saroj/Documents/rustdesk/target/release/deps -C strip=symbols -L dependency=/home/saroj/Documents/rustdesk/target/release/deps --extern proc_macro2=/home/saroj/Documents/rustdesk/target/release/deps/libproc_macro2-486c44d9e19c02cc.rlib --extern quote=/home/saroj/Documents/rustdesk/target/release/deps/libquote-05baab23a6b8c39f.rlib --extern syn=/home/saroj/Documents/rustdesk/target/release/deps/libsyn-29b6ed07c16479c7.rlib --extern proc_macro --cap-lints warn`
[hwcodec 0.7.1]   20:     0x7f1edd4f3083 - __libc_start_main
[hwcodec 0.7.1]                                at /build/glibc-B3wQXB/glibc-2.31/csu/../csu/libc-start.c:308:16
[hwcodec 0.7.1]   21:     0x55bbafc86e8e - <unknown>
[hwcodec 0.7.1]   22:                0x0 - <unknown>
error: failed to run custom build command for `hwcodec v0.7.1 (https://github.com/rustdesk-org/hwcodec#0ea7e709)`
note: To improve backtraces for build dependencies, set the CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG=true environment variable to enable debug information generation.

Caused by:
  process didn't exit successfully: `CARGO=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CFG_FEATURE=default CARGO_CFG_PANIC=unwind CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=aarch64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=neon CARGO_CFG_TARGET_HAS_ATOMIC=128,16,32,64,8,ptr CARGO_CFG_TARGET_OS=android CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_DEFAULT=1 CARGO_MANIFEST_DIR=/home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70 CARGO_MANIFEST_PATH=/home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=hwcodec CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.7.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/saroj/Documents/rustdesk/target/release/deps:/home/saroj/Documents/rustdesk/target/release:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib:/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' NUM_JOBS=8 OPT_LEVEL=3 OUT_DIR=/home/saroj/Documents/rustdesk/target/aarch64-linux-android/release/build/hwcodec-812131b56716abcd/out PROFILE=release RUSTC=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc RUSTC_LINKER=/home/saroj/Android/Sdk/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang RUSTDOC=/home/saroj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustdoc TARGET=aarch64-linux-android /home/saroj/Documents/rustdesk/target/release/build/hwcodec-bb990c087cd922c2/build-script-build` (exit status: 101)
  --- stdout
  cargo:rerun-if-changed=src
  cargo:rerun-if-changed=deps
  cargo:rerun-if-changed=/home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/externals
  cargo:rerun-if-changed=/home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp

  --- stderr
  /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/common.h:38:3: error: unknown type name 'int64_t'
  /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:6:38: error: unknown type name 'uint8_t'
  /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:6:53: error: unknown type name 'int32_t'
  /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:6:66: error: unknown type name 'int32_t'
  /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:7:49: error: unknown type name 'int64_t'
  /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/common.h:38:3: error: unknown type name 'int64_t', err: true
  /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:6:38: error: unknown type name 'uint8_t', err: true
  /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:6:53: error: unknown type name 'int32_t', err: true
  /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:6:66: error: unknown type name 'int32_t', err: true
  /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/cpp/common/callback.h:7:49: error: unknown type name 'int64_t', err: true

  thread 'main' panicked at /home/saroj/.cargo/git/checkouts/hwcodec-3f3da9ff8e484625/0ea7e70/build.rs:34:10:
  called `Result::unwrap()` on an `Err` value: ()
  stack backtrace:
     0:     0x55bbb01cbd62 - <unknown>
     1:     0x55bbb01f3ad3 - <unknown>
     2:     0x55bbb01c80a3 - <unknown>
     3:     0x55bbb01cbbb2 - <unknown>
     4:     0x55bbb01cd952 - <unknown>
     5:     0x55bbb01cd755 - <unknown>
     6:     0x55bbb01ce372 - <unknown>
     7:     0x55bbb01ce0fa - <unknown>
     8:     0x55bbb01cc259 - <unknown>
     9:     0x55bbb01cdd8d - <unknown>
    10:     0x55bbb01f1ed0 - <unknown>
    11:     0x55bbb01f2296 - <unknown>
    12:     0x55bbafc89e29 - <unknown>
    13:     0x55bbafc895c7 - <unknown>
    14:     0x55bbafc87cd3 - <unknown>
    15:     0x55bbafc87bc6 - <unknown>
    16:     0x55bbafc87ba9 - <unknown>
    17:     0x55bbb01c1af4 - <unknown>
    18:     0x55bbafc87b91 - <unknown>
    19:     0x55bbafc8dd75 - <unknown>
    20:     0x7f1edd4f3083 - __libc_start_main
                                 at /build/glibc-B3wQXB/glibc-2.31/csu/../csu/libc-start.c:308:16
    21:     0x55bbafc86e8e - <unknown>
    22:                0x0 - <unknown>
warning: build failed, waiting for other jobs to finish...
warning: `thread_local` (lib) generated 2 warnings
warning: `sharded-slab` (lib) generated 105 warnings
warning: `env_logger` (lib) generated 2 warnings
[2025-07-10T18:14:36Z INFO  cargo_ndk::cli] If the build failed due to a missing target, you can run this command:
[2025-07-10T18:14:36Z INFO  cargo_ndk::cli] 
[2025-07-10T18:14:36Z INFO  cargo_ndk::cli]     rustup target install aarch64-linux-android
